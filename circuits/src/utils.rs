use std::marker::PhantomData;
use plonky2lib_succinct::hash_functions::blake2b::CHUNK_128_BYTES;

pub const NUM_AUTHORITIES: usize = 7;
pub const NUM_AUTHORITIES_PADDED: usize = 8;  // The random access gadget requires a power of 2, so we pad the authority set to 16
pub const QUORUM_SIZE: usize = 5;  // 2/3 + 1 of NUM_VALIDATORS
pub const MAX_NUM_HEADERS_PER_STEP: usize = 20;

//pub const MAX_HEADER_SIZE: usize = CHUNK_128_BYTES * 16; // 2048 bytes
pub const MAX_HEADER_SIZE: usize = CHUNK_128_BYTES * 10; // 1280 bytes.  Keep this for now.
pub const HASH_SIZE: usize = 32;                         // in bytes
pub const PUB_KEY_SIZE: usize = 32;                      // in bytes


pub const ENCODED_PRECOMMIT_LENGTH: usize = 53;

use plonky2::{
    iop::{
        target::Target,
        generator::{SimpleGenerator, GeneratedValues},
        witness::{PartitionWitness, Witness, WitnessWrite}
    },
    hash::hash_types::RichField,
    plonk::circuit_builder::CircuitBuilder, util::serialization::{Buffer, IoResult, Read, Write}
};
use plonky2_field::{extension::Extendable, types::{PrimeField, PrimeField64}};

#[derive(Clone)]
pub struct AvailHashTarget(pub [Target; HASH_SIZE]);

pub trait WitnessAvailHash<F: PrimeField64>: Witness<F> {
    fn get_avail_hash_target(&self, target: AvailHashTarget) -> [u8; HASH_SIZE];
    fn set_avail_hash_target(&mut self, target: &AvailHashTarget, value: &[u8; HASH_SIZE]);
}

impl<T: Witness<F>, F: PrimeField64> WitnessAvailHash<F> for T {
    fn get_avail_hash_target(&self, target: AvailHashTarget) -> [u8; HASH_SIZE] {
        target.0
        .iter()
        .map(|t| u8::try_from(self.get_target(*t).to_canonical_u64()).unwrap())
        .collect::<Vec<u8>>()
        .try_into()
        .unwrap()
    }

    fn set_avail_hash_target(&mut self, target: &AvailHashTarget, value: &[u8; HASH_SIZE]) {
        for i in 0..HASH_SIZE {
            self.set_target(target.0[i], F::from_canonical_u8(value[i]));
        }
    }
}

pub trait GeneratedValuesAvailHash<F: PrimeField> {
    fn set_avail_hash_target(&mut self, target: &AvailHashTarget, value: [u8; HASH_SIZE]);
}

impl<F: PrimeField> GeneratedValuesAvailHash<F> for GeneratedValues<F> {
    fn set_avail_hash_target(&mut self, target: &AvailHashTarget, value: [u8; HASH_SIZE]) {
        for i in 0..HASH_SIZE {
            self.set_target(target.0[i], F::from_canonical_u8(value[i]));
        }
    }
}

#[derive(Debug)]
pub struct EncodedHeaderTarget {
    pub header_bytes: [Target; MAX_HEADER_SIZE],
    pub header_size: Target,
}

pub trait WitnessEncodedHeader<F: PrimeField64>: Witness<F> {
    fn get_encoded_header_target(&self, target: EncodedHeaderTarget) -> Vec<u8>;
    fn set_encoded_header_target(&mut self, target: &EncodedHeaderTarget, value: Vec<u8>);
}

impl<T: Witness<F>, F: PrimeField64> WitnessEncodedHeader<F> for T {
    fn get_encoded_header_target(&self, target: EncodedHeaderTarget) -> Vec<u8> {
        let header_size = self.get_target(target.header_size).to_canonical_u64();
        target.header_bytes
        .iter()
        .take(header_size as usize)
        .map(|t| u8::try_from(self.get_target(*t).to_canonical_u64()).unwrap())
        .collect::<Vec<u8>>()
        .try_into()
        .unwrap()
    }

    fn set_encoded_header_target(&mut self, target: &EncodedHeaderTarget, value: Vec<u8>) {
        let header_size = value.len();
        self.set_target(target.header_size, F::from_canonical_u64(header_size as u64));
        for i in 0..header_size {
            self.set_target(target.header_bytes[i], F::from_canonical_u8(value[i]));
        }

        for i in header_size..MAX_HEADER_SIZE {
            self.set_target(target.header_bytes[i], F::from_canonical_u8(0));
        }
    }
}

pub trait GeneratedValuesEncodedHeader<F: PrimeField> {
    fn set_encoded_header_target(&mut self, target: &EncodedHeaderTarget, value: Vec<u8>);
}

impl<F: PrimeField> GeneratedValuesEncodedHeader<F> for GeneratedValues<F> {
    fn set_encoded_header_target(&mut self, target: &EncodedHeaderTarget, value: Vec<u8>) {
        let header_size = value.len();
        self.set_target(target.header_size, F::from_canonical_u64(header_size as u64));
        for i in 0..header_size {
            self.set_target(target.header_bytes[i], F::from_canonical_u8(value[i]));
        }

        for i in header_size..MAX_HEADER_SIZE {
            self.set_target(target.header_bytes[i], F::from_canonical_u8(0));
        }
    }
}

pub trait CircuitBuilderUtils {
    fn add_virtual_avail_hash_target_safe(
        &mut self,
        set_as_public: bool
    ) -> AvailHashTarget;

    fn add_virtual_encoded_header_target_safe(
        &mut self
    ) -> EncodedHeaderTarget;

    fn connect_hash(
        &mut self,
        x: AvailHashTarget,
        y: AvailHashTarget
    );

    fn int_div(
        &mut self,
        dividend: Target,
        divisor: Target,
    ) -> Target;

    fn random_access_vec(
        &mut self,
        index: Target,
        targets: &Vec<Vec<Target>>,
    ) -> Vec<Target>;
}

impl<F: RichField + Extendable<D>, const D: usize> CircuitBuilderUtils for CircuitBuilder<F, D> {
    fn add_virtual_avail_hash_target_safe(&mut self, set_as_public: bool) -> AvailHashTarget {
        let mut hash_target = Vec::new();
        for _ in 0..HASH_SIZE {
            let byte = self.add_virtual_target();
            if set_as_public {
                self.register_public_input(byte);
            }
            self.range_check(byte, 8);
            hash_target.push(byte);
        }

        AvailHashTarget(hash_target.try_into().unwrap())
    }

    fn add_virtual_encoded_header_target_safe(&mut self) -> EncodedHeaderTarget {
        let mut header_bytes = Vec::new();
        for _j in 0..MAX_HEADER_SIZE {
            let byte = self.add_virtual_target();
            self.range_check(byte, 8);
            header_bytes.push(byte);
        }

        let header_size = self.add_virtual_target();

        EncodedHeaderTarget {
            header_bytes: header_bytes.try_into().unwrap(),
            header_size,
        }
    }

    fn connect_hash(
        &mut self,
        x: AvailHashTarget,
        y: AvailHashTarget
    ) {
        for i in 0..HASH_SIZE {
            self.connect(x.0[i], y.0[i]);
        }
    }

    fn int_div(
        &mut self,
        dividend: Target,
        divisor: Target,
    ) -> Target {
        let quotient = self.add_virtual_target();
        let remainder = self.add_virtual_target();
    
        self.add_simple_generator(FloorDivGenerator::<F, D> {
            divisor,
            dividend,
            quotient,
            remainder,
            _marker: PhantomData
        });
        let base = self.mul(quotient, divisor);
        let rhs = self.add(base, remainder);
        let is_equal = self.is_equal(rhs, dividend);
        self.assert_one(is_equal.target);
        quotient
    }

    fn random_access_vec(
        &mut self,
        index: Target,
        targets: &Vec<Vec<Target>>,
    ) -> Vec<Target> {
        assert!(!targets.is_empty());

        let v_size = targets[0].len();

        // Assert that all vectors have the same length
        targets.iter().for_each(|t| {
            assert_eq!(t.len(), v_size);
        });

        (0..v_size).map(|i| {
            self.random_access(
                index,
                targets.iter().map(|t| {
                    t[i]
                }).collect::<Vec<Target>>())
        }).collect::<Vec<Target>>()
    }

}


#[derive(Debug)]
struct FloorDivGenerator<
    F: RichField + Extendable<D>,
    const D: usize
> {
    divisor: Target,
    dividend: Target,
    quotient: Target,
    remainder: Target,
    _marker: PhantomData<F>,
}


impl<
    F: RichField + Extendable<D>,
    const D: usize,
> SimpleGenerator<F> for FloorDivGenerator<F, D> {
    fn id(&self) -> String {
        "FloorDivGenerator".to_string()
    }

    fn serialize(&self, dst: &mut Vec<u8>) -> IoResult<()> {
        dst.write_target(self.divisor)?;
        dst.write_target(self.dividend)?;
        dst.write_target(self.quotient)?;
        dst.write_target(self.remainder)
    }

    fn deserialize(src: &mut Buffer) -> IoResult<Self> {
        let divisor = src.read_target()?;
        let dividend = src.read_target()?;
        let quotient = src.read_target()?;
        let remainder = src.read_target()?;
        Ok(Self { divisor, dividend, quotient, remainder, _marker: PhantomData })
    }

    fn dependencies(&self) -> Vec<Target> {
        Vec::from([self.dividend])
    }

    fn run_once(&self, witness: &PartitionWitness<F>, out_buffer: &mut GeneratedValues<F>) {
        let divisor = witness.get_target(self.divisor);
        let dividend = witness.get_target(self.dividend);
        let divisor_int = divisor.to_canonical_u64() as u32;
        let dividend_int = dividend.to_canonical_u64() as u32;
        let quotient = dividend_int / divisor_int;
        let remainder = dividend_int % divisor_int;
        out_buffer.set_target(self.quotient, F::from_canonical_u32(quotient));
        out_buffer.set_target(self.remainder, F::from_canonical_u32(remainder));
    }    
}


// Will convert each byte into 8 bits (big endian)
pub fn to_bits(msg: Vec<u8>) -> Vec<bool> {
    let mut res = Vec::new();
    for i in 0..msg.len() {
        let char = msg[i];
        for j in 0..8 {
            if (char & (1 << 7 - j)) != 0 {
                res.push(true);
            } else {
                res.push(false);
            }
        }
    }
    res
}


#[cfg(test)]
#[allow(dead_code)]
pub (crate) mod tests {
    use super::{ENCODED_PRECOMMIT_LENGTH, QUORUM_SIZE, NUM_AUTHORITIES_PADDED};

    // Block 34153 contains a new authorities event
    pub const BLOCK_34153_BLOCK_HASH: &str = "1a3c929ec4479c7911c8acaeb4f140ed14499cfa49e7720c686f608f30934a1f";
    pub const BLOCK_34153_HEADER: [u8; 1037] = [83, 232, 36, 106, 55, 129, 50, 225, 23, 101, 125, 221, 17, 194, 23, 17, 37, 106, 56, 236, 83, 96, 252, 59, 29, 8, 238, 231, 110, 76, 99, 60, 166, 21, 2, 0, 76, 73, 59, 139, 61, 175, 156, 92, 89, 240, 208, 129, 0, 19, 9, 53, 247, 223, 151, 95, 172, 130, 130, 235, 132, 32, 244, 230, 234, 3, 159, 40, 97, 251, 242, 214, 244, 178, 11, 107, 28, 152, 214, 89, 176, 169, 219, 161, 153, 16, 21, 45, 226, 103, 107, 196, 131, 63, 132, 173, 0, 126, 158, 243, 16, 6, 66, 65, 66, 69, 181, 1, 1, 3, 0, 0, 0, 115, 227, 6, 5, 0, 0, 0, 0, 222, 251, 142, 160, 105, 41, 114, 128, 156, 28, 0, 146, 90, 123, 142, 107, 255, 99, 120, 15, 167, 139, 156, 85, 139, 148, 88, 130, 140, 129, 176, 8, 148, 94, 38, 115, 63, 4, 122, 169, 50, 110, 6, 86, 150, 235, 33, 157, 224, 239, 228, 176, 13, 126, 52, 71, 24, 7, 204, 55, 159, 235, 52, 10, 111, 81, 184, 170, 254, 169, 59, 98, 127, 88, 146, 33, 22, 12, 192, 193, 3, 152, 126, 190, 45, 19, 92, 223, 59, 198, 157, 141, 87, 178, 50, 10, 4, 66, 65, 66, 69, 233, 4, 1, 28, 250, 227, 26, 62, 3, 197, 162, 5, 187, 151, 10, 61, 110, 71, 219, 27, 103, 90, 230, 221, 233, 68, 235, 128, 165, 158, 87, 140, 33, 129, 222, 21, 1, 0, 0, 0, 0, 0, 0, 0, 236, 128, 7, 245, 196, 124, 144, 113, 11, 137, 49, 251, 226, 84, 207, 174, 19, 104, 180, 227, 126, 105, 48, 117, 220, 86, 74, 254, 16, 131, 9, 88, 1, 0, 0, 0, 0, 0, 0, 0, 146, 209, 165, 163, 154, 190, 110, 166, 201, 213, 69, 89, 88, 165, 16, 53, 223, 52, 16, 252, 134, 60, 174, 29, 195, 113, 207, 151, 184, 233, 117, 2, 1, 0, 0, 0, 0, 0, 0, 0, 234, 30, 19, 162, 135, 149, 130, 152, 155, 113, 192, 62, 55, 45, 132, 196, 120, 48, 229, 34, 252, 79, 193, 5, 14, 95, 127, 68, 178, 91, 196, 110, 1, 0, 0, 0, 0, 0, 0, 0, 128, 181, 229, 98, 137, 69, 113, 131, 74, 44, 158, 186, 9, 202, 186, 138, 23, 52, 251, 14, 48, 163, 155, 220, 217, 249, 1, 180, 193, 20, 118, 112, 1, 0, 0, 0, 0, 0, 0, 0, 242, 11, 145, 253, 5, 132, 247, 79, 20, 250, 23, 77, 145, 187, 40, 26, 106, 157, 159, 185, 173, 249, 93, 82, 115, 64, 3, 147, 131, 109, 93, 67, 1, 0, 0, 0, 0, 0, 0, 0, 190, 163, 236, 227, 176, 74, 146, 32, 92, 44, 109, 129, 201, 130, 38, 48, 140, 163, 158, 86, 118, 153, 185, 132, 207, 215, 244, 143, 38, 103, 242, 99, 1, 0, 0, 0, 0, 0, 0, 0, 30, 220, 137, 168, 43, 105, 252, 70, 169, 123, 7, 75, 49, 17, 188, 251, 242, 183, 75, 228, 132, 40, 83, 106, 232, 136, 43, 42, 242, 208, 255, 155, 4, 70, 82, 78, 75, 121, 4, 1, 28, 249, 172, 110, 237, 110, 185, 17, 220, 67, 225, 32, 200, 72, 14, 2, 88, 166, 179, 62, 11, 145, 115, 76, 198, 79, 20, 72, 39, 5, 59, 23, 174, 1, 0, 0, 0, 0, 0, 0, 0, 248, 108, 114, 39, 126, 210, 14, 254, 21, 186, 177, 171, 207, 52, 101, 110, 125, 35, 54, 228, 33, 51, 250, 153, 51, 30, 135, 75, 84, 88, 178, 143, 1, 0, 0, 0, 0, 0, 0, 0, 117, 132, 65, 63, 146, 123, 238, 90, 96, 125, 54, 217, 238, 220, 69, 26, 213, 218, 182, 106, 243, 157, 83, 197, 72, 100, 146, 96, 224, 103, 96, 20, 1, 0, 0, 0, 0, 0, 0, 0, 2, 248, 6, 149, 240, 164, 162, 48, 130, 70, 200, 129, 52, 178, 222, 117, 158, 52, 125, 82, 113, 137, 116, 45, 212, 46, 152, 114, 75, 213, 169, 188, 1, 0, 0, 0, 0, 0, 0, 0, 219, 1, 66, 24, 130, 52, 8, 204, 20, 245, 223, 208, 80, 36, 208, 43, 222, 40, 26, 173, 130, 66, 223, 15, 7, 106, 79, 212, 132, 177, 171, 207, 1, 0, 0, 0, 0, 0, 0, 0, 228, 220, 143, 76, 125, 13, 23, 0, 156, 142, 42, 77, 70, 43, 157, 109, 236, 90, 189, 207, 155, 158, 116, 197, 175, 136, 165, 24, 198, 223, 141, 206, 1, 0, 0, 0, 0, 0, 0, 0, 115, 7, 16, 36, 196, 223, 188, 129, 134, 62, 114, 1, 219, 136, 252, 26, 111, 166, 220, 196, 246, 242, 240, 168, 163, 62, 248, 255, 62, 249, 68, 115, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 66, 65, 66, 69, 1, 1, 78, 250, 249, 201, 80, 173, 21, 247, 128, 80, 198, 79, 209, 213, 136, 19, 74, 241, 80, 247, 236, 93, 206, 58, 46, 80, 237, 60, 189, 115, 201, 39, 234, 214, 142, 3, 210, 80, 175, 69, 67, 12, 50, 172, 120, 130, 211, 182, 70, 196, 67, 156, 72, 91, 228, 97, 24, 11, 122, 46, 198, 91, 162, 135, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 169, 161, 178, 174, 91, 2, 211, 230, 60, 235, 63, 166, 127, 90, 166, 129, 4, 241, 152, 240, 90, 112, 146, 41, 140, 52, 41, 68, 103, 76, 175, 6, 112, 191, 128, 124, 135, 203, 181, 181, 88, 218, 32, 85, 15, 105, 87, 156, 169, 161, 178, 174, 91, 2, 211, 230, 60, 235, 63, 166, 127, 90, 166, 129, 4, 241, 152, 240, 90, 112, 146, 41, 140, 52, 41, 68, 103, 76, 175, 6, 112, 191, 128, 124, 135, 203, 181, 181, 88, 218, 32, 85, 15, 105, 87, 156, 4, 0];
    pub const BLOCK_34153_PARENT_HASH: &str = "53e8246a378132e117657ddd11c21711256a38ec5360fc3b1d08eee76e4c633c";
    pub const BLOCK_34153_STATE_ROOT: &str = "4c493b8b3daf9c5c59f0d08100130935f7df975fac8282eb8420f4e6ea039f28";

    pub const BLOCK_34152_BLOCK_HASH: &str = "53e8246a378132e117657ddd11c21711256a38ec5360fc3b1d08eee76e4c633c";
    pub const BLOCK_34152_HEADER: [u8; 423] = [121, 24, 28, 129, 68, 99, 242, 52, 31, 85, 149, 101, 220, 45, 80, 207, 143, 233, 184, 123, 137, 224, 181, 118, 51, 160, 56, 204, 182, 148, 126, 48, 162, 21, 2, 0, 18, 182, 181, 234, 229, 196, 15, 19, 40, 160, 63, 12, 217, 213, 166, 170, 51, 59, 208, 108, 177, 31, 201, 149, 226, 233, 90, 185, 195, 16, 2, 5, 217, 137, 56, 60, 66, 13, 38, 91, 230, 169, 255, 173, 86, 215, 116, 123, 83, 123, 158, 181, 197, 234, 90, 98, 22, 66, 161, 223, 76, 215, 76, 151, 8, 6, 66, 65, 66, 69, 181, 1, 3, 1, 0, 0, 0, 114, 227, 6, 5, 0, 0, 0, 0, 202, 107, 25, 53, 121, 108, 237, 125, 243, 119, 164, 221, 175, 68, 5, 160, 175, 187, 43, 45, 229, 239, 143, 244, 2, 60, 160, 165, 231, 33, 186, 50, 234, 140, 32, 81, 240, 145, 53, 247, 173, 230, 239, 57, 163, 28, 0, 39, 232, 15, 201, 247, 47, 27, 154, 210, 9, 228, 84, 94, 53, 69, 46, 2, 52, 12, 23, 122, 20, 94, 108, 17, 200, 121, 101, 78, 72, 178, 227, 108, 115, 51, 26, 35, 11, 19, 178, 251, 60, 127, 31, 162, 102, 211, 11, 2, 5, 66, 65, 66, 69, 1, 1, 186, 68, 234, 29, 7, 197, 55, 52, 7, 126, 58, 119, 93, 115, 216, 79, 68, 86, 4, 36, 189, 87, 7, 74, 107, 9, 121, 206, 252, 117, 82, 42, 2, 189, 175, 234, 102, 127, 36, 113, 68, 105, 67, 94, 192, 171, 254, 236, 148, 248, 225, 156, 199, 161, 73, 195, 198, 193, 238, 130, 234, 169, 126, 143, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 174, 193, 160, 35, 203, 134, 115, 156, 112, 12, 176, 71, 152, 242, 74, 137, 39, 106, 126, 229, 69, 48, 125, 8, 255, 16, 236, 33, 214, 163, 57, 168, 200, 246, 69, 247, 13, 107, 239, 192, 126, 160, 185, 116, 221, 230, 172, 197, 174, 193, 160, 35, 203, 134, 115, 156, 112, 12, 176, 71, 152, 242, 74, 137, 39, 106, 126, 229, 69, 48, 125, 8, 255, 16, 236, 33, 214, 163, 57, 168, 200, 246, 69, 247, 13, 107, 239, 192, 126, 160, 185, 116, 221, 230, 172, 197, 4, 0];
    pub const BLOCK_34152_PARENT_HASH: &str = "79181c814463f2341f559565dc2d50cf8fe9b87b89e0b57633a038ccb6947e30";
    pub const BLOCK_34152_STATE_ROOT: &str = "12b6b5eae5c40f1328a03f0cd9d5a6aa333bd06cb11fc995e2e95ab9c3100205";

    pub const BLOCK_34151_BLOCK_HASH: &str = "79181c814463f2341f559565dc2d50cf8fe9b87b89e0b57633a038ccb6947e30";
    pub const BLOCK_34151_HEADER: [u8; 423] = [116, 184, 162, 218, 98, 204, 179, 75, 189, 142, 216, 186, 159, 109, 146, 203, 13, 15, 42, 215, 151, 221, 252, 184, 198, 30, 235, 122, 11, 121, 36, 210, 158, 21, 2, 0, 129, 14, 180, 217, 87, 177, 231, 111, 151, 125, 244, 147, 148, 248, 36, 89, 77, 104, 49, 248, 225, 9, 138, 6, 209, 165, 177, 65, 67, 191, 11, 145, 62, 121, 175, 229, 192, 142, 76, 162, 96, 214, 13, 91, 228, 223, 161, 101, 55, 155, 204, 32, 213, 191, 28, 92, 6, 49, 217, 121, 203, 219, 249, 36, 8, 6, 66, 65, 66, 69, 181, 1, 3, 6, 0, 0, 0, 113, 227, 6, 5, 0, 0, 0, 0, 84, 113, 190, 59, 246, 9, 62, 21, 219, 207, 74, 59, 84, 241, 182, 116, 230, 4, 165, 19, 156, 248, 39, 88, 44, 108, 223, 3, 220, 173, 87, 27, 89, 204, 232, 204, 49, 109, 88, 217, 197, 184, 216, 138, 180, 207, 185, 63, 227, 28, 74, 92, 252, 206, 183, 121, 129, 168, 85, 96, 117, 114, 40, 1, 58, 150, 46, 1, 238, 64, 253, 168, 231, 175, 147, 84, 101, 9, 115, 69, 134, 90, 118, 81, 219, 236, 225, 235, 249, 204, 248, 152, 187, 73, 134, 6, 5, 66, 65, 66, 69, 1, 1, 236, 160, 233, 102, 121, 184, 157, 18, 182, 36, 177, 248, 228, 217, 179, 1, 150, 91, 15, 220, 144, 12, 57, 64, 27, 173, 59, 247, 182, 230, 128, 125, 93, 223, 75, 7, 235, 87, 96, 164, 159, 235, 146, 66, 94, 3, 11, 142, 157, 149, 206, 212, 62, 105, 31, 15, 247, 69, 19, 169, 138, 202, 143, 129, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 174, 141, 122, 86, 122, 120, 237, 45, 180, 162, 148, 68, 107, 45, 92, 218, 219, 225, 96, 151, 173, 194, 52, 119, 254, 5, 120, 133, 236, 224, 66, 115, 134, 217, 179, 144, 6, 21, 126, 133, 221, 177, 37, 91, 182, 27, 66, 49, 174, 141, 122, 86, 122, 120, 237, 45, 180, 162, 148, 68, 107, 45, 92, 218, 219, 225, 96, 151, 173, 194, 52, 119, 254, 5, 120, 133, 236, 224, 66, 115, 134, 217, 179, 144, 6, 21, 126, 133, 221, 177, 37, 91, 182, 27, 66, 49, 4, 0];
    pub const BLOCK_34151_PARENT_HASH: &str = "74b8a2da62ccb34bbd8ed8ba9f6d92cb0d0f2ad797ddfcb8c61eeb7a0b7924d2";
    pub const BLOCK_34151_STATE_ROOT: &str = "810eb4d957b1e76f977df49394f824594d6831f8e1098a06d1a5b14143bf0b91";

    pub const BLOCK_34150_BLOCK_HASH: &str = "74b8a2da62ccb34bbd8ed8ba9f6d92cb0d0f2ad797ddfcb8c61eeb7a0b7924d2";
    pub const BLOCK_34150_HEADER: [u8; 423] = [115, 151, 133, 139, 189, 227, 133, 188, 152, 53, 129, 67, 27, 139, 71, 215, 57, 246, 105, 229, 231, 196, 168, 48, 89, 164, 6, 110, 37, 64, 48, 214, 154, 21, 2, 0, 241, 103, 20, 174, 0, 213, 22, 55, 90, 149, 92, 36, 95, 43, 0, 100, 27, 22, 77, 54, 120, 243, 208, 227, 38, 241, 187, 161, 7, 188, 195, 94, 111, 244, 205, 91, 178, 102, 148, 22, 198, 184, 244, 247, 6, 25, 81, 73, 229, 110, 187, 74, 9, 30, 203, 193, 194, 132, 235, 240, 21, 37, 87, 91, 8, 6, 66, 65, 66, 69, 181, 1, 3, 6, 0, 0, 0, 112, 227, 6, 5, 0, 0, 0, 0, 38, 156, 161, 92, 9, 151, 111, 88, 221, 230, 163, 56, 50, 244, 227, 95, 194, 121, 132, 17, 170, 17, 64, 213, 77, 57, 238, 125, 66, 230, 158, 52, 53, 217, 95, 28, 214, 142, 88, 18, 33, 35, 86, 15, 45, 14, 118, 201, 193, 198, 101, 97, 240, 132, 235, 19, 74, 149, 171, 174, 141, 71, 135, 13, 118, 218, 185, 95, 191, 192, 150, 0, 125, 37, 17, 190, 26, 73, 156, 124, 68, 100, 212, 169, 178, 98, 181, 17, 22, 59, 24, 212, 196, 97, 149, 9, 5, 66, 65, 66, 69, 1, 1, 156, 95, 246, 16, 27, 145, 50, 123, 56, 200, 17, 233, 250, 231, 153, 170, 11, 92, 182, 153, 255, 33, 231, 190, 42, 63, 213, 237, 78, 212, 233, 11, 40, 23, 122, 234, 201, 140, 108, 163, 102, 110, 200, 253, 48, 248, 109, 170, 252, 209, 107, 232, 236, 186, 8, 165, 140, 122, 194, 236, 0, 28, 185, 133, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 131, 62, 6, 195, 205, 90, 95, 157, 107, 12, 47, 159, 70, 5, 110, 32, 81, 189, 160, 32, 31, 19, 175, 2, 10, 107, 10, 35, 110, 72, 114, 130, 224, 14, 82, 174, 64, 172, 86, 89, 44, 94, 90, 102, 68, 120, 14, 7, 131, 62, 6, 195, 205, 90, 95, 157, 107, 12, 47, 159, 70, 5, 110, 32, 81, 189, 160, 32, 31, 19, 175, 2, 10, 107, 10, 35, 110, 72, 114, 130, 224, 14, 82, 174, 64, 172, 86, 89, 44, 94, 90, 102, 68, 120, 14, 7, 4, 0];
    pub const BLOCK_34150_PARENT_HASH: &str = "7397858bbde385bc983581431b8b47d739f669e5e7c4a83059a4066e254030d6";
    pub const BLOCK_34150_STATE_ROOT: &str = "f16714ae00d516375a955c245f2b00641b164d3678f3d0e326f1bba107bcc35e";

    pub const BLOCK_34149_BLOCK_HASH: &str = "7397858bbde385bc983581431b8b47d739f669e5e7c4a83059a4066e254030d6";
    pub const BLOCK_34149_HEADER: [u8; 423] = [178, 168, 16, 169, 127, 246, 185, 106, 102, 134, 149, 96, 143, 228, 70, 82, 186, 164, 124, 2, 94, 123, 122, 199, 238, 35, 159, 181, 153, 103, 88, 185, 150, 21, 2, 0, 110, 96, 243, 17, 158, 70, 1, 25, 42, 103, 205, 54, 5, 39, 113, 241, 90, 160, 62, 229, 34, 184, 165, 76, 82, 231, 224, 164, 105, 97, 242, 173, 18, 136, 100, 68, 239, 38, 14, 3, 68, 149, 41, 185, 93, 170, 105, 202, 96, 187, 145, 238, 244, 87, 64, 253, 229, 212, 64, 94, 143, 39, 234, 212, 8, 6, 66, 65, 66, 69, 181, 1, 3, 5, 0, 0, 0, 111, 227, 6, 5, 0, 0, 0, 0, 114, 232, 118, 24, 137, 22, 196, 194, 48, 139, 165, 107, 207, 5, 254, 220, 56, 100, 88, 55, 94, 100, 29, 103, 15, 184, 179, 167, 207, 50, 161, 12, 127, 210, 31, 123, 168, 88, 229, 226, 225, 168, 2, 172, 203, 52, 210, 41, 84, 132, 23, 93, 254, 54, 107, 187, 242, 91, 145, 177, 31, 151, 46, 15, 104, 21, 117, 166, 57, 13, 30, 222, 223, 62, 235, 198, 122, 212, 248, 38, 199, 168, 49, 174, 166, 33, 254, 217, 153, 174, 52, 197, 46, 21, 104, 10, 5, 66, 65, 66, 69, 1, 1, 122, 246, 171, 174, 128, 242, 104, 221, 124, 208, 88, 91, 82, 231, 15, 39, 73, 158, 83, 58, 51, 249, 161, 78, 163, 65, 5, 173, 109, 219, 75, 116, 249, 71, 53, 170, 77, 98, 85, 155, 249, 112, 77, 29, 2, 90, 197, 13, 204, 99, 117, 200, 117, 16, 135, 126, 88, 234, 112, 202, 205, 9, 182, 133, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 178, 92, 164, 156, 84, 155, 153, 50, 25, 83, 200, 10, 220, 144, 86, 243, 231, 220, 45, 239, 99, 61, 104, 248, 141, 180, 119, 178, 150, 255, 124, 23, 125, 21, 123, 159, 151, 30, 244, 83, 76, 4, 141, 203, 97, 83, 29, 80, 178, 92, 164, 156, 84, 155, 153, 50, 25, 83, 200, 10, 220, 144, 86, 243, 231, 220, 45, 239, 99, 61, 104, 248, 141, 180, 119, 178, 150, 255, 124, 23, 125, 21, 123, 159, 151, 30, 244, 83, 76, 4, 141, 203, 97, 83, 29, 80, 4, 0];
    pub const BLOCK_34149_PARENT_HASH: &str = "b2a810a97ff6b96a668695608fe44652baa47c025e7b7ac7ee239fb5996758b9";
    pub const BLOCK_34149_STATE_ROOT: &str = "6e60f3119e4601192a67cd36052771f15aa03ee522b8a54c52e7e0a46961f2ad";

    pub const BLOCK_34148_BLOCK_HASH: &str = "b2a810a97ff6b96a668695608fe44652baa47c025e7b7ac7ee239fb5996758b9";
    pub const BLOCK_34148_HEADER: [u8; 423] = [141, 219, 200, 235, 54, 237, 231, 50, 26, 7, 246, 136, 47, 110, 167, 91, 110, 134, 88, 175, 23, 138, 24, 155, 67, 129, 178, 60, 78, 196, 43, 241, 146, 21, 2, 0, 107, 108, 3, 112, 225, 183, 189, 34, 72, 190, 158, 1, 16, 128, 142, 86, 212, 237, 165, 141, 72, 18, 50, 126, 119, 215, 72, 45, 112, 202, 63, 2, 23, 170, 228, 175, 102, 253, 113, 3, 118, 221, 57, 77, 198, 2, 254, 97, 150, 225, 2, 160, 100, 1, 106, 83, 144, 66, 173, 17, 81, 95, 234, 211, 8, 6, 66, 65, 66, 69, 181, 1, 3, 2, 0, 0, 0, 110, 227, 6, 5, 0, 0, 0, 0, 208, 1, 218, 48, 84, 2, 80, 130, 42, 158, 214, 215, 213, 129, 102, 201, 196, 31, 92, 128, 186, 254, 236, 139, 189, 250, 255, 237, 51, 124, 224, 8, 10, 218, 214, 161, 216, 51, 32, 176, 23, 90, 112, 126, 170, 25, 196, 242, 15, 152, 9, 78, 0, 219, 170, 19, 28, 130, 161, 72, 242, 71, 11, 3, 73, 185, 208, 155, 192, 117, 100, 95, 14, 104, 172, 140, 204, 168, 16, 75, 118, 128, 111, 62, 75, 128, 231, 81, 74, 32, 141, 241, 16, 124, 241, 7, 5, 66, 65, 66, 69, 1, 1, 24, 128, 75, 238, 212, 181, 40, 43, 136, 105, 139, 247, 205, 88, 192, 81, 49, 232, 28, 182, 62, 213, 50, 238, 7, 207, 139, 154, 211, 244, 79, 9, 100, 178, 247, 51, 47, 132, 188, 27, 15, 20, 44, 197, 98, 97, 134, 253, 158, 27, 232, 41, 10, 164, 131, 20, 249, 108, 215, 167, 133, 25, 91, 134, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 151, 27, 238, 224, 166, 17, 77, 180, 194, 172, 55, 120, 166, 128, 39, 39, 221, 87, 69, 248, 105, 142, 209, 232, 108, 74, 21, 57, 225, 65, 71, 196, 12, 89, 52, 217, 22, 113, 227, 241, 190, 13, 249, 53, 81, 149, 113, 114, 151, 27, 238, 224, 166, 17, 77, 180, 194, 172, 55, 120, 166, 128, 39, 39, 221, 87, 69, 248, 105, 142, 209, 232, 108, 74, 21, 57, 225, 65, 71, 196, 12, 89, 52, 217, 22, 113, 227, 241, 190, 13, 249, 53, 81, 149, 113, 114, 4, 0];
    pub const BLOCK_34148_PARENT_HASH: &str = "8ddbc8eb36ede7321a07f6882f6ea75b6e8658af178a189b4381b23c4ec42bf1";
    pub const BLOCK_34148_STATE_ROOT: &str = "6b6c0370e1b7bd2248be9e0110808e56d4eda58d4812327e77d7482d70ca3f02";

    pub const BLOCK_34147_BLOCK_HASH: &str = "8ddbc8eb36ede7321a07f6882f6ea75b6e8658af178a189b4381b23c4ec42bf1";
    pub const BLOCK_34147_HEADER: [u8; 423] = [203, 20, 162, 241, 179, 155, 236, 91, 69, 89, 207, 54, 109, 124, 62, 88, 20, 80, 242, 16, 233, 208, 115, 38, 137, 30, 96, 97, 66, 14, 103, 140, 142, 21, 2, 0, 172, 115, 197, 198, 175, 224, 148, 18, 52, 222, 35, 238, 75, 114, 70, 147, 16, 125, 207, 163, 251, 67, 26, 93, 157, 39, 213, 3, 5, 197, 164, 92, 199, 57, 5, 188, 165, 196, 217, 224, 73, 41, 189, 86, 227, 20, 46, 46, 10, 110, 10, 33, 87, 105, 232, 4, 189, 54, 124, 107, 221, 76, 119, 101, 8, 6, 66, 65, 66, 69, 181, 1, 3, 1, 0, 0, 0, 109, 227, 6, 5, 0, 0, 0, 0, 198, 132, 27, 69, 234, 235, 177, 34, 86, 182, 80, 63, 196, 79, 161, 49, 43, 70, 34, 83, 173, 69, 252, 133, 96, 215, 197, 234, 72, 219, 25, 55, 123, 35, 53, 151, 51, 149, 165, 149, 69, 41, 249, 25, 73, 168, 3, 157, 18, 251, 137, 61, 65, 69, 214, 173, 250, 20, 171, 3, 211, 122, 255, 10, 194, 4, 134, 140, 137, 164, 123, 68, 180, 251, 174, 24, 12, 175, 134, 186, 240, 191, 211, 40, 110, 112, 212, 16, 234, 225, 125, 50, 145, 221, 221, 8, 5, 66, 65, 66, 69, 1, 1, 64, 109, 243, 231, 131, 210, 138, 218, 117, 177, 63, 155, 78, 234, 224, 64, 211, 165, 120, 243, 185, 47, 85, 233, 216, 78, 155, 106, 222, 84, 20, 97, 106, 159, 123, 153, 199, 183, 254, 64, 94, 7, 206, 139, 111, 218, 203, 87, 83, 89, 54, 236, 206, 199, 103, 135, 84, 188, 221, 248, 173, 49, 117, 143, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 148, 42, 209, 12, 222, 101, 182, 51, 151, 98, 242, 47, 201, 241, 71, 131, 234, 12, 93, 98, 253, 207, 130, 107, 18, 116, 236, 247, 66, 135, 143, 121, 158, 121, 28, 122, 149, 112, 223, 41, 138, 182, 42, 133, 183, 221, 226, 23, 148, 42, 209, 12, 222, 101, 182, 51, 151, 98, 242, 47, 201, 241, 71, 131, 234, 12, 93, 98, 253, 207, 130, 107, 18, 116, 236, 247, 66, 135, 143, 121, 158, 121, 28, 122, 149, 112, 223, 41, 138, 182, 42, 133, 183, 221, 226, 23, 4, 0];
    pub const BLOCK_34147_PARENT_HASH: &str = "cb14a2f1b39bec5b4559cf366d7c3e581450f210e9d07326891e6061420e678c";
    pub const BLOCK_34147_STATE_ROOT: &str = "ac73c5c6afe0941234de23ee4b724693107dcfa3fb431a5d9d27d50305c5a45c";

    pub const BLOCK_34146_BLOCK_HASH: &str = "cb14a2f1b39bec5b4559cf366d7c3e581450f210e9d07326891e6061420e678c";
    pub const BLOCK_34146_HEADER: [u8; 423] = [187, 32, 51, 154, 198, 61, 197, 79, 56, 229, 86, 223, 45, 118, 68, 82, 73, 32, 17, 246, 65, 75, 214, 234, 15, 133, 13, 97, 165, 142, 151, 13, 138, 21, 2, 0, 115, 240, 168, 48, 186, 2, 69, 233, 91, 75, 152, 100, 127, 82, 72, 151, 241, 191, 222, 239, 149, 197, 35, 245, 34, 45, 93, 247, 235, 164, 163, 55, 103, 2, 96, 96, 211, 213, 113, 19, 221, 200, 79, 205, 192, 2, 228, 131, 154, 34, 49, 147, 30, 112, 35, 36, 3, 119, 179, 92, 57, 75, 94, 36, 8, 6, 66, 65, 66, 69, 181, 1, 3, 3, 0, 0, 0, 108, 227, 6, 5, 0, 0, 0, 0, 26, 40, 205, 71, 167, 101, 211, 127, 176, 63, 97, 71, 61, 59, 42, 223, 49, 189, 131, 88, 188, 56, 202, 228, 30, 36, 211, 117, 22, 249, 189, 4, 166, 205, 206, 145, 255, 250, 56, 229, 222, 102, 141, 23, 42, 52, 251, 86, 89, 195, 58, 149, 91, 71, 131, 122, 226, 217, 28, 87, 17, 180, 20, 10, 98, 83, 174, 15, 118, 86, 20, 103, 1, 201, 106, 255, 20, 108, 112, 190, 86, 72, 214, 135, 154, 103, 25, 179, 162, 139, 36, 185, 194, 168, 225, 11, 5, 66, 65, 66, 69, 1, 1, 206, 242, 162, 20, 208, 138, 208, 185, 51, 166, 112, 121, 138, 5, 242, 69, 89, 94, 183, 163, 255, 101, 114, 27, 61, 58, 106, 163, 186, 129, 201, 76, 77, 20, 116, 4, 222, 240, 103, 181, 115, 80, 199, 68, 194, 73, 32, 38, 51, 92, 248, 145, 68, 165, 151, 229, 140, 67, 66, 57, 27, 212, 232, 141, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 147, 143, 153, 57, 164, 25, 26, 160, 97, 165, 238, 80, 32, 24, 35, 205, 56, 3, 115, 38, 240, 50, 249, 141, 122, 124, 174, 25, 248, 2, 176, 64, 237, 27, 175, 156, 4, 20, 243, 98, 216, 38, 234, 239, 100, 187, 117, 13, 147, 143, 153, 57, 164, 25, 26, 160, 97, 165, 238, 80, 32, 24, 35, 205, 56, 3, 115, 38, 240, 50, 249, 141, 122, 124, 174, 25, 248, 2, 176, 64, 237, 27, 175, 156, 4, 20, 243, 98, 216, 38, 234, 239, 100, 187, 117, 13, 4, 0];
    pub const BLOCK_34146_PARENT_HASH: &str = "bb20339ac63dc54f38e556df2d764452492011f6414bd6ea0f850d61a58e970d";
    pub const BLOCK_34146_STATE_ROOT: &str = "73f0a830ba0245e95b4b98647f524897f1bfdeef95c523f5222d5df7eba4a337";

    pub const BLOCK_34145_BLOCK_HASH: &str = "bb20339ac63dc54f38e556df2d764452492011f6414bd6ea0f850d61a58e970d";
    pub const BLOCK_34145_HEADER: [u8; 423] = [182, 133, 97, 13, 80, 6, 5, 159, 220, 34, 117, 191, 63, 119, 225, 41, 119, 145, 162, 25, 211, 61, 153, 180, 145, 201, 60, 127, 248, 249, 143, 89, 134, 21, 2, 0, 37, 97, 216, 103, 137, 177, 211, 189, 189, 44, 170, 73, 190, 201, 210, 149, 154, 247, 239, 21, 194, 254, 155, 120, 7, 161, 51, 205, 48, 212, 158, 123, 119, 66, 216, 208, 214, 181, 78, 240, 209, 215, 15, 207, 222, 241, 29, 89, 64, 200, 47, 192, 59, 196, 184, 253, 85, 135, 52, 5, 72, 230, 163, 236, 8, 6, 66, 65, 66, 69, 181, 1, 3, 5, 0, 0, 0, 107, 227, 6, 5, 0, 0, 0, 0, 222, 174, 212, 34, 229, 228, 168, 25, 212, 176, 175, 209, 38, 109, 8, 136, 45, 70, 216, 189, 84, 96, 217, 26, 120, 18, 111, 131, 152, 18, 112, 102, 253, 228, 233, 175, 5, 97, 202, 15, 126, 171, 213, 252, 83, 157, 254, 36, 135, 19, 218, 115, 88, 199, 96, 171, 91, 38, 135, 108, 63, 249, 70, 14, 10, 108, 222, 229, 243, 110, 233, 191, 200, 174, 96, 150, 98, 119, 35, 28, 235, 0, 15, 188, 136, 247, 195, 127, 72, 163, 35, 83, 48, 222, 182, 0, 5, 66, 65, 66, 69, 1, 1, 164, 115, 20, 127, 131, 144, 230, 247, 133, 159, 154, 245, 154, 237, 135, 38, 173, 96, 124, 234, 154, 211, 152, 18, 89, 227, 193, 218, 224, 230, 244, 101, 181, 22, 30, 126, 120, 247, 16, 175, 175, 252, 127, 10, 115, 43, 117, 136, 194, 57, 180, 2, 164, 87, 240, 105, 120, 21, 196, 142, 229, 152, 187, 131, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 164, 15, 193, 234, 0, 214, 215, 243, 128, 58, 44, 189, 203, 41, 83, 150, 254, 22, 245, 109, 79, 80, 211, 152, 99, 71, 251, 230, 190, 251, 122, 69, 8, 161, 217, 134, 41, 52, 58, 220, 93, 38, 91, 93, 30, 136, 46, 93, 164, 15, 193, 234, 0, 214, 215, 243, 128, 58, 44, 189, 203, 41, 83, 150, 254, 22, 245, 109, 79, 80, 211, 152, 99, 71, 251, 230, 190, 251, 122, 69, 8, 161, 217, 134, 41, 52, 58, 220, 93, 38, 91, 93, 30, 136, 46, 93, 4, 0];
    pub const BLOCK_34145_PARENT_HASH: &str = "b685610d5006059fdc2275bf3f77e1297791a219d33d99b491c93c7ff8f98f59";
    pub const BLOCK_34145_STATE_ROOT: &str = "2561d86789b1d3bdbd2caa49bec9d2959af7ef15c2fe9b7807a133cd30d49e7b";

    pub const BLOCK_34144_BLOCK_HASH: &str = "b685610d5006059fdc2275bf3f77e1297791a219d33d99b491c93c7ff8f98f59";
    pub const BLOCK_34144_HEADER: [u8; 423] = [28, 143, 123, 39, 202, 16, 145, 22, 60, 171, 195, 203, 140, 199, 14, 233, 224, 234, 135, 69, 163, 4, 116, 20, 221, 55, 245, 211, 243, 91, 95, 42, 130, 21, 2, 0, 22, 33, 40, 114, 27, 215, 204, 116, 5, 121, 49, 175, 82, 233, 210, 196, 40, 53, 188, 61, 129, 86, 139, 20, 10, 110, 248, 194, 46, 151, 252, 68, 139, 41, 37, 4, 102, 231, 64, 15, 41, 59, 208, 17, 6, 88, 67, 92, 254, 135, 233, 151, 226, 73, 184, 94, 200, 116, 191, 9, 227, 60, 26, 162, 8, 6, 66, 65, 66, 69, 181, 1, 3, 5, 0, 0, 0, 106, 227, 6, 5, 0, 0, 0, 0, 102, 249, 112, 116, 222, 4, 36, 72, 163, 149, 186, 193, 133, 75, 45, 225, 81, 145, 213, 155, 233, 117, 37, 180, 150, 136, 38, 30, 128, 228, 220, 125, 22, 150, 110, 136, 216, 173, 137, 10, 195, 78, 110, 90, 48, 73, 116, 164, 133, 109, 185, 4, 201, 9, 58, 158, 147, 247, 4, 249, 212, 32, 20, 4, 58, 153, 74, 70, 58, 243, 20, 47, 209, 250, 43, 241, 83, 64, 254, 130, 3, 29, 83, 139, 218, 117, 72, 156, 215, 243, 95, 220, 118, 65, 211, 0, 5, 66, 65, 66, 69, 1, 1, 36, 179, 29, 85, 68, 143, 179, 101, 97, 70, 81, 77, 134, 204, 205, 190, 178, 155, 67, 151, 87, 19, 223, 67, 70, 200, 18, 225, 86, 220, 112, 118, 161, 251, 74, 84, 154, 94, 86, 176, 151, 65, 39, 245, 47, 5, 138, 176, 109, 33, 104, 125, 46, 75, 235, 133, 227, 28, 45, 87, 177, 145, 2, 128, 0, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 143, 136, 101, 3, 136, 247, 171, 216, 126, 42, 50, 175, 250, 246, 29, 179, 43, 250, 184, 108, 115, 26, 181, 146, 137, 206, 140, 47, 2, 241, 230, 33, 241, 154, 188, 121, 32, 156, 214, 166, 231, 52, 14, 254, 31, 193, 81, 40, 143, 136, 101, 3, 136, 247, 171, 216, 126, 42, 50, 175, 250, 246, 29, 179, 43, 250, 184, 108, 115, 26, 181, 146, 137, 206, 140, 47, 2, 241, 230, 33, 241, 154, 188, 121, 32, 156, 214, 166, 231, 52, 14, 254, 31, 193, 81, 40, 112, 0];
    pub const BLOCK_34144_PARENT_HASH: &str = "1c8f7b27ca1091163cabc3cb8cc70ee9e0ea8745a3047414dd37f5d3f35b5f2a";
    pub const BLOCK_34144_STATE_ROOT: &str = "162128721bd7cc74057931af52e9d2c42835bc3d81568b140a6ef8c22e97fc44";

    pub const BLOCK_34143_BLOCK_HASH: &str = "1c8f7b27ca1091163cabc3cb8cc70ee9e0ea8745a3047414dd37f5d3f35b5f2a";
    pub const BLOCK_34143_HEADER: [u8; 423] = [161, 71, 96, 254, 65, 123, 181, 155, 231, 174, 26, 222, 9, 94, 12, 177, 64, 74, 232, 154, 63, 37, 214, 37, 160, 161, 204, 236, 65, 156, 183, 29, 126, 21, 2, 0, 231, 135, 56, 144, 203, 17, 48, 145, 38, 144, 33, 188, 196, 228, 39, 215, 13, 11, 181, 108, 16, 28, 243, 211, 177, 240, 3, 145, 164, 210, 64, 118, 80, 35, 39, 226, 34, 54, 111, 105, 9, 28, 16, 242, 220, 229, 74, 243, 217, 225, 169, 51, 15, 205, 254, 35, 15, 90, 72, 126, 156, 105, 149, 21, 8, 6, 66, 65, 66, 69, 181, 1, 1, 2, 0, 0, 0, 105, 227, 6, 5, 0, 0, 0, 0, 142, 13, 215, 158, 219, 35, 31, 184, 93, 47, 49, 85, 57, 133, 241, 151, 122, 71, 98, 39, 74, 155, 50, 59, 247, 237, 92, 223, 228, 95, 10, 82, 160, 138, 43, 173, 93, 233, 18, 43, 146, 16, 210, 44, 1, 226, 100, 225, 84, 139, 114, 250, 135, 119, 254, 104, 189, 51, 123, 158, 138, 1, 59, 9, 82, 251, 125, 248, 22, 147, 120, 200, 197, 245, 252, 46, 86, 72, 153, 101, 222, 106, 60, 8, 232, 70, 224, 127, 104, 75, 180, 0, 27, 120, 131, 12, 5, 66, 65, 66, 69, 1, 1, 204, 99, 75, 64, 110, 182, 64, 195, 82, 220, 94, 2, 87, 73, 26, 111, 195, 246, 43, 122, 245, 221, 229, 70, 64, 42, 214, 154, 88, 80, 35, 17, 16, 238, 152, 182, 25, 137, 137, 148, 133, 226, 157, 224, 75, 253, 146, 189, 194, 221, 8, 239, 111, 226, 189, 210, 230, 182, 37, 226, 65, 114, 19, 131, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 149, 243, 216, 244, 10, 238, 45, 134, 236, 135, 106, 73, 34, 3, 80, 187, 188, 90, 40, 217, 232, 233, 25, 243, 116, 234, 13, 34, 108, 240, 246, 28, 90, 229, 99, 169, 121, 142, 55, 32, 46, 6, 13, 195, 128, 173, 242, 2, 149, 243, 216, 244, 10, 238, 45, 134, 236, 135, 106, 73, 34, 3, 80, 187, 188, 90, 40, 217, 232, 233, 25, 243, 116, 234, 13, 34, 108, 240, 246, 28, 90, 229, 99, 169, 121, 142, 55, 32, 46, 6, 13, 195, 128, 173, 242, 2, 4, 0];
    pub const BLOCK_34143_PARENT_HASH: &str = "a14760fe417bb59be7ae1ade095e0cb1404ae89a3f25d625a0a1ccec419cb71d";
    pub const BLOCK_34143_STATE_ROOT: &str = "e7873890cb113091269021bcc4e427d70d0bb56c101cf3d3b1f00391a4d24076";

    pub const BLOCK_34142_BLOCK_HASH: &str = "a14760fe417bb59be7ae1ade095e0cb1404ae89a3f25d625a0a1ccec419cb71d";
    pub const BLOCK_34142_HEADER: [u8; 423] = [101, 46, 28, 255, 211, 65, 112, 199, 252, 156, 239, 211, 214, 180, 149, 203, 182, 200, 92, 150, 104, 50, 225, 32, 205, 12, 154, 224, 76, 73, 208, 63, 122, 21, 2, 0, 149, 145, 76, 194, 196, 255, 235, 191, 27, 143, 51, 131, 112, 38, 235, 61, 138, 220, 87, 97, 139, 115, 236, 185, 161, 142, 100, 144, 123, 175, 235, 45, 76, 91, 235, 88, 228, 56, 163, 126, 55, 178, 1, 199, 56, 185, 136, 185, 151, 248, 185, 177, 27, 224, 66, 249, 16, 67, 94, 205, 160, 172, 165, 222, 8, 6, 66, 65, 66, 69, 181, 1, 3, 6, 0, 0, 0, 104, 227, 6, 5, 0, 0, 0, 0, 186, 6, 137, 91, 201, 157, 74, 6, 126, 220, 111, 27, 106, 136, 223, 190, 231, 237, 165, 252, 159, 234, 160, 160, 205, 17, 191, 170, 123, 128, 4, 91, 118, 243, 4, 234, 136, 22, 191, 49, 57, 46, 12, 252, 42, 24, 158, 41, 179, 51, 10, 48, 129, 66, 182, 128, 114, 130, 130, 52, 153, 125, 11, 15, 38, 236, 126, 10, 40, 53, 192, 16, 247, 237, 118, 220, 238, 233, 13, 254, 201, 14, 214, 251, 208, 55, 220, 242, 74, 149, 76, 118, 107, 194, 126, 0, 5, 66, 65, 66, 69, 1, 1, 102, 75, 222, 222, 205, 219, 250, 19, 182, 130, 14, 195, 57, 31, 184, 151, 116, 52, 91, 197, 101, 125, 72, 162, 63, 203, 140, 205, 179, 0, 227, 92, 169, 107, 124, 192, 18, 133, 49, 108, 178, 9, 74, 227, 164, 17, 52, 52, 217, 239, 37, 76, 121, 161, 195, 208, 169, 98, 54, 154, 74, 181, 160, 142, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 161, 46, 80, 198, 176, 160, 75, 128, 214, 78, 15, 19, 145, 142, 30, 142, 1, 214, 241, 103, 193, 108, 189, 114, 36, 153, 248, 136, 206, 94, 244, 118, 81, 194, 2, 177, 2, 133, 107, 1, 37, 100, 95, 118, 177, 127, 144, 71, 161, 46, 80, 198, 176, 160, 75, 128, 214, 78, 15, 19, 145, 142, 30, 142, 1, 214, 241, 103, 193, 108, 189, 114, 36, 153, 248, 136, 206, 94, 244, 118, 81, 194, 2, 177, 2, 133, 107, 1, 37, 100, 95, 118, 177, 127, 144, 71, 60, 0];
    pub const BLOCK_34142_PARENT_HASH: &str = "652e1cffd34170c7fc9cefd3d6b495cbb6c85c966832e120cd0c9ae04c49d03f";
    pub const BLOCK_34142_STATE_ROOT: &str = "95914cc2c4ffebbf1b8f33837026eb3d8adc57618b73ecb9a18e64907bafeb2d";

    pub const BLOCK_34141_BLOCK_HASH: &str = "652e1cffd34170c7fc9cefd3d6b495cbb6c85c966832e120cd0c9ae04c49d03f";
    pub const BLOCK_34141_HEADER: [u8; 423] = [165, 233, 212, 245, 23, 128, 110, 13, 118, 15, 81, 152, 178, 179, 130, 133, 115, 234, 8, 218, 6, 66, 199, 233, 182, 241, 191, 189, 238, 192, 101, 127, 118, 21, 2, 0, 85, 84, 8, 163, 156, 217, 74, 142, 65, 173, 238, 238, 11, 185, 205, 79, 117, 58, 132, 192, 228, 183, 233, 83, 28, 202, 105, 227, 132, 244, 126, 164, 206, 173, 82, 167, 175, 19, 241, 226, 88, 22, 52, 231, 63, 219, 222, 158, 209, 202, 76, 63, 72, 157, 207, 49, 69, 57, 248, 28, 99, 128, 65, 156, 8, 6, 66, 65, 66, 69, 181, 1, 1, 3, 0, 0, 0, 103, 227, 6, 5, 0, 0, 0, 0, 48, 123, 227, 92, 191, 6, 0, 179, 111, 68, 66, 136, 160, 52, 60, 124, 119, 43, 129, 225, 198, 170, 101, 225, 233, 112, 54, 149, 84, 65, 174, 77, 178, 186, 226, 134, 32, 93, 182, 129, 212, 88, 240, 139, 47, 132, 190, 4, 180, 164, 37, 26, 183, 1, 201, 98, 109, 27, 10, 232, 24, 217, 192, 3, 197, 138, 53, 117, 103, 222, 167, 95, 23, 35, 69, 229, 185, 41, 245, 30, 46, 121, 254, 234, 40, 172, 192, 145, 3, 242, 186, 106, 114, 120, 88, 11, 5, 66, 65, 66, 69, 1, 1, 214, 41, 77, 114, 105, 120, 55, 5, 36, 126, 215, 73, 119, 82, 86, 169, 65, 169, 201, 82, 118, 81, 234, 25, 192, 86, 182, 99, 200, 79, 76, 11, 72, 56, 191, 222, 32, 223, 146, 150, 11, 18, 113, 50, 162, 195, 242, 37, 80, 111, 9, 248, 3, 191, 154, 203, 246, 118, 227, 183, 145, 112, 238, 136, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 138, 147, 92, 191, 5, 142, 30, 20, 108, 149, 14, 245, 161, 130, 69, 14, 71, 38, 239, 54, 23, 107, 182, 185, 179, 91, 9, 221, 90, 15, 151, 147, 96, 254, 245, 125, 61, 67, 208, 41, 232, 6, 180, 20, 154, 133, 28, 124, 138, 147, 92, 191, 5, 142, 30, 20, 108, 149, 14, 245, 161, 130, 69, 14, 71, 38, 239, 54, 23, 107, 182, 185, 179, 91, 9, 221, 90, 15, 151, 147, 96, 254, 245, 125, 61, 67, 208, 41, 232, 6, 180, 20, 154, 133, 28, 124, 4, 0];
    pub const BLOCK_34141_PARENT_HASH: &str = "a5e9d4f517806e0d760f5198b2b3828573ea08da0642c7e9b6f1bfbdeec0657f";
    pub const BLOCK_34141_STATE_ROOT: &str = "555408a39cd94a8e41adeeee0bb9cd4f753a84c0e4b7e9531cca69e384f47ea4";

    pub const BLOCK_34140_BLOCK_HASH: &str = "a5e9d4f517806e0d760f5198b2b3828573ea08da0642c7e9b6f1bfbdeec0657f";
    pub const BLOCK_34140_HEADER: [u8; 423] = [53, 78, 204, 143, 139, 13, 162, 27, 181, 160, 253, 205, 97, 182, 102, 176, 175, 152, 126, 240, 45, 7, 101, 77, 25, 52, 139, 22, 49, 23, 14, 138, 114, 21, 2, 0, 189, 88, 147, 52, 186, 178, 207, 227, 106, 195, 35, 185, 220, 125, 14, 204, 16, 8, 31, 33, 75, 30, 104, 36, 123, 26, 242, 198, 14, 168, 56, 203, 254, 192, 109, 43, 213, 177, 240, 148, 219, 164, 197, 210, 89, 253, 34, 198, 205, 86, 189, 165, 84, 121, 200, 156, 201, 110, 159, 227, 10, 209, 210, 131, 8, 6, 66, 65, 66, 69, 181, 1, 3, 2, 0, 0, 0, 102, 227, 6, 5, 0, 0, 0, 0, 26, 197, 191, 106, 70, 243, 240, 48, 199, 139, 117, 234, 34, 101, 7, 131, 123, 26, 9, 126, 216, 252, 192, 216, 30, 236, 163, 213, 46, 139, 206, 39, 55, 139, 17, 144, 61, 215, 156, 222, 192, 1, 94, 170, 124, 34, 91, 117, 25, 145, 170, 79, 30, 185, 173, 46, 225, 70, 142, 11, 207, 167, 55, 13, 177, 28, 78, 209, 93, 135, 160, 40, 11, 86, 123, 22, 207, 168, 119, 153, 161, 32, 20, 93, 112, 169, 218, 75, 51, 61, 158, 33, 23, 135, 52, 7, 5, 66, 65, 66, 69, 1, 1, 138, 177, 123, 176, 46, 44, 126, 150, 28, 163, 250, 141, 90, 184, 190, 33, 56, 92, 72, 37, 77, 229, 53, 228, 219, 69, 158, 48, 120, 146, 223, 1, 121, 197, 247, 230, 203, 148, 107, 219, 173, 231, 60, 19, 77, 165, 124, 214, 48, 81, 170, 90, 186, 208, 156, 200, 114, 176, 173, 66, 48, 213, 95, 133, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 162, 102, 42, 229, 170, 215, 245, 152, 172, 41, 177, 206, 34, 182, 102, 214, 243, 13, 0, 51, 255, 217, 85, 146, 77, 208, 172, 131, 251, 50, 134, 191, 10, 244, 142, 67, 137, 107, 40, 92, 222, 150, 7, 167, 255, 213, 41, 5, 162, 102, 42, 229, 170, 215, 245, 152, 172, 41, 177, 206, 34, 182, 102, 214, 243, 13, 0, 51, 255, 217, 85, 146, 77, 208, 172, 131, 251, 50, 134, 191, 10, 244, 142, 67, 137, 107, 40, 92, 222, 150, 7, 167, 255, 213, 41, 5, 4, 0];
    pub const BLOCK_34140_PARENT_HASH: &str = "354ecc8f8b0da21bb5a0fdcd61b666b0af987ef02d07654d19348b1631170e8a";
    pub const BLOCK_34140_STATE_ROOT: &str = "bd589334bab2cfe36ac323b9dc7d0ecc10081f214b1e68247b1af2c60ea838cb";

    pub const BLOCK_34139_BLOCK_HASH: &str = "354ecc8f8b0da21bb5a0fdcd61b666b0af987ef02d07654d19348b1631170e8a";
    pub const BLOCK_34139_HEADER: [u8; 423] = [9, 47, 222, 164, 235, 153, 194, 149, 109, 236, 73, 199, 179, 120, 40, 233, 251, 236, 84, 212, 66, 121, 171, 73, 221, 21, 1, 2, 35, 90, 91, 206, 110, 21, 2, 0, 7, 129, 251, 116, 96, 192, 7, 140, 175, 217, 210, 43, 119, 28, 75, 99, 13, 63, 223, 23, 96, 232, 241, 185, 76, 188, 39, 57, 160, 189, 136, 106, 191, 182, 25, 90, 16, 37, 34, 24, 181, 197, 89, 100, 211, 134, 7, 101, 183, 54, 226, 208, 6, 152, 232, 195, 245, 133, 247, 81, 90, 57, 243, 245, 8, 6, 66, 65, 66, 69, 181, 1, 3, 2, 0, 0, 0, 101, 227, 6, 5, 0, 0, 0, 0, 218, 32, 97, 168, 229, 232, 120, 13, 222, 193, 187, 44, 240, 201, 106, 244, 214, 246, 40, 219, 78, 243, 61, 18, 83, 255, 135, 112, 10, 158, 101, 45, 210, 119, 144, 112, 254, 131, 215, 34, 244, 139, 153, 64, 52, 24, 13, 250, 198, 58, 131, 75, 102, 128, 166, 192, 214, 136, 240, 243, 139, 214, 90, 9, 234, 22, 245, 81, 70, 91, 165, 215, 183, 81, 49, 42, 109, 92, 123, 162, 90, 183, 128, 39, 146, 190, 11, 40, 159, 217, 202, 180, 143, 14, 33, 9, 5, 66, 65, 66, 69, 1, 1, 6, 156, 99, 123, 157, 184, 158, 237, 171, 94, 59, 3, 217, 98, 173, 164, 126, 165, 188, 179, 5, 203, 39, 10, 142, 243, 213, 199, 59, 115, 246, 109, 179, 71, 221, 53, 176, 71, 140, 162, 169, 193, 227, 52, 181, 11, 117, 146, 211, 249, 95, 81, 145, 74, 119, 212, 114, 182, 62, 236, 11, 44, 182, 128, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 147, 174, 180, 235, 84, 10, 30, 205, 149, 218, 135, 194, 204, 166, 66, 189, 210, 180, 166, 44, 74, 115, 62, 202, 201, 48, 33, 147, 222, 239, 228, 227, 166, 11, 73, 186, 105, 39, 112, 10, 9, 30, 196, 35, 61, 105, 222, 241, 147, 174, 180, 235, 84, 10, 30, 205, 149, 218, 135, 194, 204, 166, 66, 189, 210, 180, 166, 44, 74, 115, 62, 202, 201, 48, 33, 147, 222, 239, 228, 227, 166, 11, 73, 186, 105, 39, 112, 10, 9, 30, 196, 35, 61, 105, 222, 241, 60, 0];
    pub const BLOCK_34139_PARENT_HASH: &str = "092fdea4eb99c2956dec49c7b37828e9fbec54d44279ab49dd150102235a5bce";
    pub const BLOCK_34139_STATE_ROOT: &str = "0781fb7460c0078cafd9d22b771c4b630d3fdf1760e8f1b94cbc2739a0bd886a";

    pub const BLOCK_34138_BLOCK_HASH: &str = "092fdea4eb99c2956dec49c7b37828e9fbec54d44279ab49dd150102235a5bce";
    pub const BLOCK_34138_HEADER: [u8; 423] = [146, 208, 184, 224, 212, 127, 224, 30, 137, 3, 129, 203, 153, 102, 8, 180, 46, 16, 55, 24, 43, 200, 185, 173, 209, 190, 190, 246, 15, 247, 38, 37, 106, 21, 2, 0, 82, 234, 252, 140, 152, 1, 68, 49, 72, 98, 213, 79, 149, 219, 57, 145, 17, 25, 112, 216, 162, 76, 11, 137, 47, 79, 166, 178, 17, 2, 220, 17, 38, 141, 136, 22, 158, 114, 140, 118, 98, 247, 243, 15, 228, 69, 197, 8, 93, 155, 107, 47, 209, 24, 125, 237, 173, 226, 175, 6, 233, 28, 35, 230, 8, 6, 66, 65, 66, 69, 181, 1, 1, 0, 0, 0, 0, 100, 227, 6, 5, 0, 0, 0, 0, 128, 233, 167, 171, 52, 223, 160, 137, 51, 187, 122, 84, 141, 119, 129, 139, 66, 172, 54, 120, 250, 149, 194, 194, 216, 150, 191, 164, 8, 248, 146, 37, 23, 24, 217, 106, 203, 149, 151, 47, 37, 139, 182, 228, 159, 74, 153, 189, 80, 145, 168, 161, 143, 247, 132, 82, 179, 183, 42, 88, 62, 126, 192, 0, 40, 206, 170, 124, 25, 107, 7, 73, 134, 200, 9, 217, 103, 136, 111, 107, 145, 82, 198, 232, 157, 83, 252, 74, 221, 89, 254, 236, 205, 202, 238, 2, 5, 66, 65, 66, 69, 1, 1, 144, 39, 192, 72, 210, 180, 189, 98, 209, 176, 151, 142, 76, 171, 112, 192, 13, 5, 47, 28, 105, 242, 119, 194, 209, 29, 23, 155, 177, 151, 230, 101, 198, 97, 225, 240, 24, 35, 70, 160, 58, 153, 177, 253, 24, 140, 94, 202, 243, 69, 56, 154, 131, 19, 138, 130, 206, 218, 174, 144, 91, 115, 50, 134, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 179, 177, 200, 135, 1, 216, 131, 229, 53, 18, 232, 191, 226, 82, 240, 81, 132, 161, 209, 36, 147, 246, 108, 172, 214, 203, 38, 222, 25, 30, 172, 170, 241, 1, 16, 80, 202, 158, 13, 100, 204, 239, 236, 69, 89, 222, 10, 179, 179, 177, 200, 135, 1, 216, 131, 229, 53, 18, 232, 191, 226, 82, 240, 81, 132, 161, 209, 36, 147, 246, 108, 172, 214, 203, 38, 222, 25, 30, 172, 170, 241, 1, 16, 80, 202, 158, 13, 100, 204, 239, 236, 69, 89, 222, 10, 179, 60, 0];
    pub const BLOCK_34138_PARENT_HASH: &str = "92d0b8e0d47fe01e890381cb996608b42e1037182bc8b9add1bebef60ff72625";
    pub const BLOCK_34138_STATE_ROOT: &str = "52eafc8c980144314862d54f95db3991111970d8a24c0b892f4fa6b21102dc11";

    pub const BLOCK_34137_BLOCK_HASH: &str = "92d0b8e0d47fe01e890381cb996608b42e1037182bc8b9add1bebef60ff72625";
    pub const BLOCK_34137_HEADER: [u8; 423] = [45, 134, 208, 52, 15, 202, 239, 230, 157, 78, 185, 174, 117, 37, 63, 79, 66, 52, 250, 33, 163, 176, 178, 100, 139, 169, 136, 0, 167, 242, 184, 168, 102, 21, 2, 0, 9, 233, 209, 156, 177, 148, 233, 128, 213, 73, 204, 84, 81, 33, 47, 178, 98, 24, 115, 30, 60, 31, 233, 251, 207, 19, 198, 206, 193, 122, 111, 8, 36, 8, 251, 47, 80, 206, 142, 78, 229, 68, 62, 178, 133, 7, 33, 2, 59, 137, 182, 65, 149, 55, 98, 117, 78, 196, 3, 39, 101, 232, 68, 23, 8, 6, 66, 65, 66, 69, 181, 1, 1, 6, 0, 0, 0, 99, 227, 6, 5, 0, 0, 0, 0, 82, 52, 172, 28, 212, 250, 56, 99, 39, 81, 186, 230, 247, 22, 96, 67, 238, 47, 39, 81, 111, 160, 4, 97, 55, 148, 123, 172, 246, 156, 108, 58, 172, 7, 56, 86, 172, 15, 191, 187, 171, 239, 17, 114, 105, 33, 111, 119, 242, 102, 184, 21, 201, 173, 140, 4, 15, 100, 201, 28, 209, 101, 156, 4, 117, 221, 212, 104, 183, 180, 174, 217, 175, 254, 165, 5, 131, 145, 138, 101, 55, 178, 96, 85, 58, 182, 113, 149, 92, 217, 21, 119, 188, 225, 95, 14, 5, 66, 65, 66, 69, 1, 1, 90, 103, 109, 33, 93, 211, 146, 107, 184, 5, 106, 60, 222, 182, 141, 145, 142, 246, 94, 44, 22, 105, 166, 139, 66, 232, 56, 28, 80, 224, 22, 81, 225, 255, 143, 112, 113, 164, 42, 15, 50, 134, 232, 111, 60, 124, 98, 246, 13, 110, 74, 23, 71, 120, 128, 37, 24, 208, 186, 58, 83, 146, 176, 136, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 141, 168, 108, 109, 86, 174, 119, 222, 17, 8, 156, 62, 26, 198, 95, 187, 77, 67, 209, 77, 166, 81, 169, 63, 221, 205, 116, 247, 143, 109, 158, 159, 251, 83, 44, 11, 234, 195, 153, 216, 234, 165, 161, 238, 51, 98, 63, 212, 141, 168, 108, 109, 86, 174, 119, 222, 17, 8, 156, 62, 26, 198, 95, 187, 77, 67, 209, 77, 166, 81, 169, 63, 221, 205, 116, 247, 143, 109, 158, 159, 251, 83, 44, 11, 234, 195, 153, 216, 234, 165, 161, 238, 51, 98, 63, 212, 4, 0];
    pub const BLOCK_34137_PARENT_HASH: &str = "2d86d0340fcaefe69d4eb9ae75253f4f4234fa21a3b0b2648ba98800a7f2b8a8";
    pub const BLOCK_34137_STATE_ROOT: &str = "09e9d19cb194e980d549cc5451212fb26218731e3c1fe9fbcf13c6cec17a6f08";

    pub const BLOCK_34136_BLOCK_HASH: &str = "2d86d0340fcaefe69d4eb9ae75253f4f4234fa21a3b0b2648ba98800a7f2b8a8";
    pub const BLOCK_34136_HEADER: [u8; 423] = [253, 87, 81, 178, 238, 104, 223, 107, 165, 200, 151, 101, 72, 5, 43, 65, 20, 233, 193, 38, 163, 255, 192, 120, 157, 64, 159, 123, 106, 101, 37, 140, 98, 21, 2, 0, 40, 223, 159, 18, 123, 204, 94, 72, 159, 224, 122, 151, 248, 151, 235, 225, 203, 36, 34, 144, 240, 180, 154, 191, 232, 176, 15, 238, 88, 230, 139, 173, 200, 169, 74, 228, 27, 104, 65, 100, 33, 224, 152, 77, 252, 111, 63, 28, 63, 90, 176, 122, 77, 0, 84, 40, 158, 22, 27, 179, 232, 71, 57, 77, 8, 6, 66, 65, 66, 69, 181, 1, 3, 6, 0, 0, 0, 98, 227, 6, 5, 0, 0, 0, 0, 64, 193, 119, 93, 141, 139, 246, 206, 145, 49, 38, 237, 116, 173, 205, 165, 173, 13, 112, 29, 47, 23, 51, 20, 130, 141, 205, 76, 135, 63, 18, 89, 255, 175, 104, 42, 210, 5, 192, 162, 60, 131, 91, 134, 98, 195, 163, 234, 85, 184, 208, 162, 54, 214, 109, 156, 187, 228, 221, 108, 58, 186, 149, 9, 232, 21, 88, 207, 43, 66, 215, 110, 228, 108, 238, 14, 59, 126, 94, 252, 137, 133, 24, 60, 133, 125, 230, 225, 151, 41, 8, 98, 219, 216, 33, 3, 5, 66, 65, 66, 69, 1, 1, 234, 250, 31, 204, 211, 91, 42, 29, 193, 42, 226, 40, 95, 8, 205, 45, 170, 110, 150, 157, 66, 115, 60, 161, 190, 24, 185, 109, 231, 1, 146, 67, 181, 182, 103, 254, 174, 199, 181, 125, 253, 36, 157, 25, 208, 172, 216, 22, 115, 61, 13, 208, 180, 108, 149, 205, 33, 134, 157, 147, 187, 190, 237, 134, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 164, 68, 39, 95, 52, 14, 233, 229, 252, 103, 64, 191, 255, 33, 46, 249, 139, 151, 131, 71, 158, 170, 231, 171, 166, 22, 124, 9, 56, 87, 20, 100, 144, 13, 234, 53, 127, 39, 59, 163, 180, 63, 214, 39, 66, 251, 117, 180, 164, 68, 39, 95, 52, 14, 233, 229, 252, 103, 64, 191, 255, 33, 46, 249, 139, 151, 131, 71, 158, 170, 231, 171, 166, 22, 124, 9, 56, 87, 20, 100, 144, 13, 234, 53, 127, 39, 59, 163, 180, 63, 214, 39, 66, 251, 117, 180, 4, 0];
    pub const BLOCK_34136_PARENT_HASH: &str = "fd5751b2ee68df6ba5c8976548052b4114e9c126a3ffc0789d409f7b6a65258c";
    pub const BLOCK_34136_STATE_ROOT: &str = "28df9f127bcc5e489fe07a97f897ebe1cb242290f0b49abfe8b00fee58e68bad";

    pub const BLOCK_34135_BLOCK_HASH: &str = "fd5751b2ee68df6ba5c8976548052b4114e9c126a3ffc0789d409f7b6a65258c";
    pub const BLOCK_34135_HEADER: [u8; 423] = [182, 33, 47, 254, 17, 200, 176, 184, 63, 118, 248, 131, 186, 244, 7, 225, 113, 82, 28, 19, 82, 195, 62, 111, 74, 239, 170, 113, 215, 92, 210, 245, 94, 21, 2, 0, 18, 128, 55, 173, 238, 181, 32, 198, 81, 207, 189, 233, 70, 144, 146, 56, 226, 180, 72, 174, 127, 226, 169, 53, 193, 93, 74, 28, 210, 36, 149, 24, 235, 218, 79, 107, 57, 11, 130, 21, 206, 93, 239, 185, 131, 45, 12, 38, 47, 131, 96, 146, 245, 95, 60, 167, 144, 92, 27, 42, 132, 8, 253, 101, 8, 6, 66, 65, 66, 69, 181, 1, 3, 1, 0, 0, 0, 97, 227, 6, 5, 0, 0, 0, 0, 230, 48, 49, 168, 17, 158, 41, 248, 114, 208, 46, 28, 26, 138, 222, 64, 242, 11, 105, 118, 239, 198, 131, 214, 34, 179, 245, 149, 141, 191, 86, 43, 1, 3, 145, 179, 183, 221, 160, 183, 56, 126, 7, 144, 166, 115, 11, 146, 16, 208, 162, 198, 91, 237, 170, 213, 243, 104, 220, 177, 58, 102, 32, 3, 33, 21, 23, 23, 120, 75, 191, 182, 200, 104, 94, 116, 137, 225, 193, 41, 198, 59, 0, 127, 206, 10, 12, 224, 20, 244, 202, 162, 107, 241, 242, 8, 5, 66, 65, 66, 69, 1, 1, 216, 94, 28, 192, 242, 85, 121, 30, 110, 77, 183, 123, 238, 252, 11, 92, 203, 244, 196, 85, 40, 240, 147, 177, 32, 96, 137, 116, 243, 37, 85, 48, 19, 86, 87, 45, 206, 38, 105, 1, 113, 223, 54, 89, 119, 240, 150, 231, 209, 81, 220, 213, 121, 165, 232, 163, 181, 33, 146, 34, 7, 154, 146, 143, 0, 4, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 183, 123, 138, 99, 203, 4, 34, 193, 118, 132, 112, 142, 173, 29, 109, 250, 0, 221, 228, 159, 215, 253, 191, 79, 156, 22, 3, 238, 183, 34, 122, 215, 116, 208, 239, 116, 104, 33, 122, 195, 253, 248, 217, 11, 194, 87, 221, 103, 183, 123, 138, 99, 203, 4, 34, 193, 118, 132, 112, 142, 173, 29, 109, 250, 0, 221, 228, 159, 215, 253, 191, 79, 156, 22, 3, 238, 183, 34, 122, 215, 116, 208, 239, 116, 104, 33, 122, 195, 253, 248, 217, 11, 194, 87, 221, 103, 60, 0];
    pub const BLOCK_34135_PARENT_HASH: &str = "b6212ffe11c8b0b83f76f883baf407e171521c1352c33e6f4aefaa71d75cd2f5";
    pub const BLOCK_34135_STATE_ROOT: &str = "128037adeeb520c651cfbde946909238e2b448ae7fe2a935c15d4a1cd2249518";

    pub const BLOCK_34134_BLOCK_HASH: &str = "b6212ffe11c8b0b83f76f883baf407e171521c1352c33e6f4aefaa71d75cd2f5";
    pub const BLOCK_34134_HEADER: [u8; 423] = [127, 81, 27, 39, 216, 9, 64, 244, 20, 177, 64, 253, 75, 241, 3, 28, 170, 138, 227, 92, 82, 243, 212, 119, 10, 97, 98, 175, 103, 253, 237, 15, 90, 21, 2, 0, 5, 219, 136, 195, 208, 81, 244, 240, 248, 254, 98, 229, 253, 79, 28, 96, 212, 162, 131, 201, 20, 142, 23, 3, 117, 128, 124, 42, 119, 181, 27, 189, 9, 79, 230, 20, 106, 147, 108, 138, 200, 69, 45, 187, 84, 218, 216, 62, 162, 156, 29, 132, 208, 186, 1, 149, 215, 41, 245, 188, 235, 43, 183, 181, 8, 6, 66, 65, 66, 69, 181, 1, 1, 0, 0, 0, 0, 96, 227, 6, 5, 0, 0, 0, 0, 206, 39, 10, 188, 114, 22, 25, 174, 138, 157, 153, 176, 1, 158, 62, 75, 51, 134, 125, 207, 253, 173, 151, 226, 177, 104, 240, 255, 18, 138, 100, 51, 24, 153, 198, 164, 111, 32, 94, 103, 18, 13, 205, 198, 153, 247, 141, 210, 141, 163, 100, 215, 152, 69, 15, 5, 33, 68, 249, 115, 208, 149, 93, 4, 148, 175, 25, 144, 126, 173, 224, 245, 123, 157, 24, 99, 213, 126, 179, 164, 222, 17, 184, 59, 227, 193, 218, 160, 55, 162, 96, 136, 246, 92, 189, 13, 5, 66, 65, 66, 69, 1, 1, 248, 249, 131, 168, 70, 184, 223, 32, 200, 178, 160, 202, 245, 71, 84, 59, 229, 76, 163, 118, 90, 239, 2, 75, 84, 21, 105, 99, 11, 168, 162, 114, 190, 22, 226, 49, 246, 217, 95, 123, 21, 253, 81, 224, 50, 148, 91, 203, 11, 170, 53, 55, 97, 116, 180, 79, 157, 111, 253, 241, 238, 198, 20, 140, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 1, 152, 179, 41, 254, 15, 243, 205, 72, 204, 0, 103, 23, 58, 29, 113, 142, 208, 247, 68, 232, 219, 254, 74, 172, 50, 212, 84, 250, 234, 207, 238, 141, 129, 62, 213, 204, 138, 62, 149, 145, 30, 214, 72, 161, 87, 7, 53, 235, 152, 179, 41, 254, 15, 243, 205, 72, 204, 0, 103, 23, 58, 29, 113, 142, 208, 247, 68, 232, 219, 254, 74, 172, 50, 212, 84, 250, 234, 207, 238, 141, 129, 62, 213, 204, 138, 62, 149, 145, 30, 214, 72, 161, 87, 7, 53, 235, 4, 0];
    pub const BLOCK_34134_PARENT_HASH: &str = "7f511b27d80940f414b140fd4bf1031caa8ae35c52f3d4770a6162af67fded0f";
    pub const BLOCK_34134_STATE_ROOT: &str = "05db88c3d051f4f0f8fe62e5fd4f1c60d4a283c9148e170375807c2a77b51bbd";


    pub const BLOCK_34153_PRECOMMIT_MESSAGE: [u8; ENCODED_PRECOMMIT_LENGTH] = [
                1,
                26, 60, 146, 158, 196, 71, 156, 121, 17, 200, 172, 174, 180, 241, 64, 237, 20, 73, 156, 250, 73, 231, 114, 12, 104, 111, 96, 143, 48, 147, 74, 31,
                105, 133, 0, 0,
                190, 58, 0, 0, 0, 0, 0, 0,
                31, 0, 0, 0, 0, 0, 0, 0];
    pub const BLOCK_34153_AUTHORITY_SIGS: [&str; QUORUM_SIZE] = [
        "9fded50f5939c42e4fb406fee09b75a75abda2950c8c2cbdec7a8cb196500d60f1964255185c92102c57c06d412205aa8880b342837d4be6d3ef0163675ed606",
        "d45b8a19126e604ff125450f18d94338288b67c2db593ee4139b42e5d22580551615b22433bbe7393eafeb4d519a62d75407e94276db979fdccc5ebfe7fa8f06",
        "c6c86b3c54eaca5bf9bc185201a5eacb54e7713645dffe502ac2599d9fcc266cc8730872c79ccc559c3cbde1a2edf91ea7d8971df6e93b74641555844df55c0c",
        "26cb341b056a4dbc8f1dc90fa623df6937a5e89473b540079dfe78cbbbf3d4dafd2839c2544a6fd7404e183d90e4421792b4c39d2cb4be3391cb2d179d7b8805",
        "a7c89720f4286bd39e185543be2968c8cff18818e84464565cd4d032c23ab33b0e3bc5bd836a0b4792decc1e53df0d357004ac6f6433e29db396f72449c0d201",
    ];
    pub const BLOCK_34153_PUB_KEY_INDICES: [usize; QUORUM_SIZE] = [
        6,
        2,
        4,
        1,
        0,
    ];
    pub const BLOCK_34153_AUTHORITY_SET_ID: u64 = 31;
    pub const BLOCK_34153_AUTHORITY_SET: [&str; NUM_AUTHORITIES_PADDED] = [
        "f9ac6eed6eb911dc43e120c8480e0258a6b33e0b91734cc64f144827053b17ae",
        "f86c72277ed20efe15bab1abcf34656e7d2336e42133fa99331e874b5458b28f",
        "7584413f927bee5a607d36d9eedc451ad5dab66af39d53c548649260e0676014",
        "02f80695f0a4a2308246c88134b2de759e347d527189742dd42e98724bd5a9bc",
        "c7733b942502973f2fa2cdff5d506e77224ff428b0f775fbf07942975b178836",
        "db014218823408cc14f5dfd05024d02bde281aad8242df0f076a4fd484b1abcf",
        "73071024c4dfbc81863e7201db88fc1a6fa6dcc4f6f2f0a8a33ef8ff3ef94473",
        "73071024c4dfbc81863e7201db88fc1a6fa6dcc4f6f2f0a8a33ef8ff3ef94473",  // Can be any valid pubkey
    ];
    pub const BLOCK_34153_AUTHORITY_SET_COMMITMENT: &str = "ab3a33770d5878db622b83b2f1be303f54b9f6629aaceb395e61733675bbfadd";
}
