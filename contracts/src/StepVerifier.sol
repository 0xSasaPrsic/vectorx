
// SPDX-License-Identifier: AML
//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// 2019 OKIMS

pragma solidity ^0.8.0;

library Pairing {

    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    /*
     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.
     */
    function negate(G1Point memory p) internal pure returns (G1Point memory) {

        // The prime q in the base field F_q for G1
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        } else {
            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));
        }
    }

    /*
     * @return The sum of two points of G1
     */
    function plus(
        G1Point memory p1,
        G1Point memory p2
    ) internal view returns (G1Point memory r) {

        uint256[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-add-failed");
    }


    /*
     * Same as plus but accepts raw input instead of struct
     * @return The sum of two points of G1, one is represented as array
     */
    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 {invalid()}
        }

        require(success, "pairing-add-failed");
    }

    /*
     * @return The product of a point on G1 and a scalar, i.e.
     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all
     *         points p.
     */
    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {

        uint256[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }


    /*
     * Same as scalar_mul but accepts raw input instead of struct,
     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times
     */
    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 {invalid()}
        }
        require(success, "pairing-mul-failed");
    }

    /* @return The result of computing the pairing check
     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
     *         For example,
     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
     */
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {

        G1Point[4] memory p1 = [a1, b1, c1, d1];
        G2Point[4] memory p2 = [a2, b2, c2, d2];
        uint256 inputSize = 24;
        uint256[] memory input = new uint256[](inputSize);

        for (uint256 i = 0; i < 4; i++) {
            uint256 j = i * 6;
            input[j + 0] = p1[i].X;
            input[j + 1] = p1[i].Y;
            input[j + 2] = p2[i].X[0];
            input[j + 3] = p2[i].X[1];
            input[j + 4] = p2[i].Y[0];
            input[j + 5] = p2[i].Y[1];
        }

        uint256[1] memory out;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-opcode-failed");

        return out[0] != 0;
    }
}

contract StepVerifier {

    using Pairing for *;

    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        // []G1Point IC (K in gnark) appears directly in verifyProof
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(uint256(2858565099134727828529378202169815117526715908959465669484089330369541081043), uint256(9540810754640185460346354328118036433412836113929819552042804679188669584600));
        vk.beta2 = Pairing.G2Point([uint256(8869495772084540528116875862596002352191788858634706897538027778423526335851), uint256(13535947439317691837330702554774535763117144610935448346242916077605886516794)], [uint256(15045118363928520180808085423012750115933308912014051992539887057580753653955), uint256(16384487226173454460264720890407285355860268979536139619700470424796089381990)]);
        vk.gamma2 = Pairing.G2Point([uint256(3773860761082336065946360335195421628783485105973234688763408842293842584778), uint256(1010215442156832214919097742200511458689317147989721784378186399022185523343)], [uint256(20024854547485140313318040462749924114567918356966352725523038557324953363714), uint256(4984619827709354769111224052095215604377985290639769711824229139954413387780)]);
        vk.delta2 = Pairing.G2Point([uint256(20836972766549346088825176648067383040183512507602232213938854839957711868150), uint256(4853625032287483675624823601395895553030954596207274435117196266210166913958)], [uint256(14191065400532794096759736709563217665950724347950847965032901052774138302806), uint256(20118018270462509581809963069472823804260444895977770460366640830955429049638)]);
    }


    // accumulate scalarMul(mul_input) into q
    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q
    function accumulate(
        uint256[3] memory mul_input,
        Pairing.G1Point memory p,
        uint256[4] memory buffer,
        Pairing.G1Point memory q
    ) internal view {
        // computes p = mul_input[0:2] * mul_input[3]
        Pairing.scalar_mul_raw(mul_input, p);

        // point addition inputs
        buffer[0] = q.X;
        buffer[1] = q.Y;
        buffer[2] = p.X;
        buffer[3] = p.Y;

        // q = p + q
        Pairing.plus_raw(buffer, q);
    }

    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[1350] memory input
    ) public view returns (bool r) {

        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);

        // Make sure that proof.A, B, and C are each less than the prime q
        require(proof.A.X < PRIME_Q, "verifier-aX-gte-prime-q");
        require(proof.A.Y < PRIME_Q, "verifier-aY-gte-prime-q");

        require(proof.B.X[0] < PRIME_Q, "verifier-bX0-gte-prime-q");
        require(proof.B.Y[0] < PRIME_Q, "verifier-bY0-gte-prime-q");

        require(proof.B.X[1] < PRIME_Q, "verifier-bX1-gte-prime-q");
        require(proof.B.Y[1] < PRIME_Q, "verifier-bY1-gte-prime-q");

        require(proof.C.X < PRIME_Q, "verifier-cX-gte-prime-q");
        require(proof.C.Y < PRIME_Q, "verifier-cY-gte-prime-q");

        // Make sure that every input is less than the snark scalar field
        for (uint256 i = 0; i < input.length; i++) {
            require(input[i] < SNARK_SCALAR_FIELD,"verifier-gte-snark-scalar-field");
        }

        VerifyingKey memory vk = verifyingKey();

        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);

        // Buffer reused for addition p1 + p2 to avoid memory allocations
        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y
        uint256[4] memory add_input;

        // Buffer reused for multiplication p1 * s
        // [0:2] -> p1.X, p1.Y ; [3] -> s
        uint256[3] memory mul_input;

        // temporary point to avoid extra allocations in accumulate
        Pairing.G1Point memory q = Pairing.G1Point(0, 0);

        vk_x.X = uint256(7313618801128135988197865272470728595945274929176561674207777535247374211045); // vk.K[0].X
        vk_x.Y = uint256(13675771164237264837430722586461893156901397820205873525493984790414388610946); // vk.K[0].Y
        mul_input[0] = uint256(20712733191615253313766711578713045735908267775796859256989683077861455361835); // vk.K[1].X
        mul_input[1] = uint256(15347654826487231216978938668578444328385549688976723800901002808464306022191); // vk.K[1].Y
        mul_input[2] = input[0];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]
        mul_input[0] = uint256(1618090198613597833318474289645651302057393213366610542101650212021755867013); // vk.K[2].X
        mul_input[1] = uint256(16841149276472687296768128415864922322285456115543566955668918581793547159494); // vk.K[2].Y
        mul_input[2] = input[1];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]
        mul_input[0] = uint256(19278047490983259812108871446262053566536664107950209411421417993988713725935); // vk.K[3].X
        mul_input[1] = uint256(1897843422367577613770199779963139644180077512450074172539652988365067536252); // vk.K[3].Y
        mul_input[2] = input[2];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]
        mul_input[0] = uint256(20391282795870015471619307030489539587864050676630093247333856503308989069906); // vk.K[4].X
        mul_input[1] = uint256(19196530365613662077572450681579873857449545204101952591903165480537453131240); // vk.K[4].Y
        mul_input[2] = input[3];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]
        mul_input[0] = uint256(8383840129428331113534341683546637986242184547953170740009815484511685510886); // vk.K[5].X
        mul_input[1] = uint256(1599450119112307981659497051392967384204908201258628446118487401357704634598); // vk.K[5].Y
        mul_input[2] = input[4];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]
        mul_input[0] = uint256(14003991781666251464989977754325918364071574722536119599687079299194007218782); // vk.K[6].X
        mul_input[1] = uint256(20711297147799313549551886354171043027641491676220315001115780981147624396694); // vk.K[6].Y
        mul_input[2] = input[5];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]
        mul_input[0] = uint256(240492913212486575401931536336852758180609563021307822704281498163160058218); // vk.K[7].X
        mul_input[1] = uint256(7717122857308451094522395466910531598926021207158463445724521249138656292289); // vk.K[7].Y
        mul_input[2] = input[6];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[7] * input[6]
        mul_input[0] = uint256(12478508524568239520157788276175948979475269617183501660554156216356811294051); // vk.K[8].X
        mul_input[1] = uint256(3187514854163854578218612129175304594306848022722011969970365098250006060055); // vk.K[8].Y
        mul_input[2] = input[7];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[8] * input[7]
        mul_input[0] = uint256(6680885096782447423229569210868177754944206730291127927889242343156635167947); // vk.K[9].X
        mul_input[1] = uint256(20776802979266822744357236341312325501628025977192391671754967884652277577550); // vk.K[9].Y
        mul_input[2] = input[8];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[9] * input[8]
        mul_input[0] = uint256(9735636339687789959287718455834467290166538928302468514184436294598675615687); // vk.K[10].X
        mul_input[1] = uint256(4091603466612340647947760119954980268007317513319102045131510554429232860133); // vk.K[10].Y
        mul_input[2] = input[9];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[10] * input[9]
        mul_input[0] = uint256(113766011166010755972934828995899903565474274299517630649014942448927786492); // vk.K[11].X
        mul_input[1] = uint256(7491387930871973847353257249704122348866466549425904114216856182010277165380); // vk.K[11].Y
        mul_input[2] = input[10];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[11] * input[10]
        mul_input[0] = uint256(18377153672303418299486050633331065089306561915512003760229133322110086919543); // vk.K[12].X
        mul_input[1] = uint256(12036733534353010017837905448375715381522833885669748604872392411310786928080); // vk.K[12].Y
        mul_input[2] = input[11];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[12] * input[11]
        mul_input[0] = uint256(17232567777209600038343137018224749113755557382709282053179249635895613146471); // vk.K[13].X
        mul_input[1] = uint256(3649512928515635044890765345633384316889337747073767360494464129483414538653); // vk.K[13].Y
        mul_input[2] = input[12];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[13] * input[12]
        mul_input[0] = uint256(17762410070631360284310449599926756023108216269215781418761865702258371277617); // vk.K[14].X
        mul_input[1] = uint256(1398417828243566289722250831050114820056221087808561870253184840847368526072); // vk.K[14].Y
        mul_input[2] = input[13];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[14] * input[13]
        mul_input[0] = uint256(1878430955538003843846638919413288328265216424908873254657833752953810037144); // vk.K[15].X
        mul_input[1] = uint256(10262909442036004104392420597195354482309395275383004304980174580115642427672); // vk.K[15].Y
        mul_input[2] = input[14];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[15] * input[14]
        mul_input[0] = uint256(4467038784290847793860387566994817134444005861906755511348411369008025927649); // vk.K[16].X
        mul_input[1] = uint256(5555677439080832278229126797125655104987626945696521127276318678413122890425); // vk.K[16].Y
        mul_input[2] = input[15];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[16] * input[15]
        mul_input[0] = uint256(20119288034401297160719603783389235203905382512226172540819308807323209696532); // vk.K[17].X
        mul_input[1] = uint256(16883327619121085982919580513621022722544893508806282705115208460286453680796); // vk.K[17].Y
        mul_input[2] = input[16];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[17] * input[16]
        mul_input[0] = uint256(13796932737585429691563630845005330841728356300313860725766457099334841927626); // vk.K[18].X
        mul_input[1] = uint256(14487784531527406595256114657876812140331866285739372760511258888610782763962); // vk.K[18].Y
        mul_input[2] = input[17];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[18] * input[17]
        mul_input[0] = uint256(12822663871532318705435309045659932754859772173043729917155254000278659880817); // vk.K[19].X
        mul_input[1] = uint256(17931386785046902745006409467326507235175902747835705658150795260888682416912); // vk.K[19].Y
        mul_input[2] = input[18];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[19] * input[18]
        mul_input[0] = uint256(12401025647838969484482142530943441838717640899812078620755601593356407185038); // vk.K[20].X
        mul_input[1] = uint256(10100031561235124618299168525086727437706313322683632898701791629597677836319); // vk.K[20].Y
        mul_input[2] = input[19];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[20] * input[19]
        mul_input[0] = uint256(11727449583085519903795744023551350494896008285932804130409181116955422206828); // vk.K[21].X
        mul_input[1] = uint256(13435023301375610870260285646427031569247528992619842630573782914074634918869); // vk.K[21].Y
        mul_input[2] = input[20];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[21] * input[20]
        mul_input[0] = uint256(15300838271812654986074619220758998044548644191095959725045635127801503143553); // vk.K[22].X
        mul_input[1] = uint256(7139190140133623996721267676244074444687413457058750333497145319693545421101); // vk.K[22].Y
        mul_input[2] = input[21];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[22] * input[21]
        mul_input[0] = uint256(13083437421250928537804777093418216570530075053967197471574059374346414559227); // vk.K[23].X
        mul_input[1] = uint256(2814949636050694811591089325270522578700308868247792306980825940962676027644); // vk.K[23].Y
        mul_input[2] = input[22];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[23] * input[22]
        mul_input[0] = uint256(10259470565619303805794170255863183200726325082780515390207440185901976879246); // vk.K[24].X
        mul_input[1] = uint256(11789942612333180888991257842810477066927333800114136043131167240768204492241); // vk.K[24].Y
        mul_input[2] = input[23];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[24] * input[23]
        mul_input[0] = uint256(2321123857876939672950536031611951087220844006646384848745853670681257044732); // vk.K[25].X
        mul_input[1] = uint256(8152141148573367858565964600589905499759224330582328197201680337413738129577); // vk.K[25].Y
        mul_input[2] = input[24];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[25] * input[24]
        mul_input[0] = uint256(13825901348351472512655122331073975214443569923503443164172638931972424847351); // vk.K[26].X
        mul_input[1] = uint256(6721531018156879942712301678165650617794000557720292917017879356182358822674); // vk.K[26].Y
        mul_input[2] = input[25];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[26] * input[25]
        mul_input[0] = uint256(10888200812064151216435768181554399303962029989606518630223709057397405940241); // vk.K[27].X
        mul_input[1] = uint256(11694290373625443626804713299505138381510581600683168994505145261260496160007); // vk.K[27].Y
        mul_input[2] = input[26];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[27] * input[26]
        mul_input[0] = uint256(746941942049573827147744429159446009991255808061289841198566212729008000497); // vk.K[28].X
        mul_input[1] = uint256(12125933243346736661888002655221064680928495519532264536717537710814007360253); // vk.K[28].Y
        mul_input[2] = input[27];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[28] * input[27]
        mul_input[0] = uint256(16659363046365974915643148812615786656695198076865909572825657823063355480020); // vk.K[29].X
        mul_input[1] = uint256(9479984474033475427582600423952595319795892357019558388108475960575191874586); // vk.K[29].Y
        mul_input[2] = input[28];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[29] * input[28]
        mul_input[0] = uint256(10899264280193958914584556580594853553677001237663057167001513903996460547114); // vk.K[30].X
        mul_input[1] = uint256(79218669983778206105731762369396736403396450460514231808255636464505042715); // vk.K[30].Y
        mul_input[2] = input[29];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[30] * input[29]
        mul_input[0] = uint256(6203340909906023519829167640031681119069950491353782211680096001054214604740); // vk.K[31].X
        mul_input[1] = uint256(7505375617749289661098107909185931821197949223352475103715800258155534975388); // vk.K[31].Y
        mul_input[2] = input[30];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[31] * input[30]
        mul_input[0] = uint256(13767598674634027286032119707354199100854292173723600443898325134232700253678); // vk.K[32].X
        mul_input[1] = uint256(12978695376456663273147002295322525123813289916965995160588693047992601112326); // vk.K[32].Y
        mul_input[2] = input[31];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[32] * input[31]
        mul_input[0] = uint256(21507432927388506636595433793825984080420288269406184434893596975782450794022); // vk.K[33].X
        mul_input[1] = uint256(10248659853537151058196306012815467508135568517592466965245941342160776878090); // vk.K[33].Y
        mul_input[2] = input[32];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[33] * input[32]
        mul_input[0] = uint256(17420401241163466755439098623584101082688348428393284542197855334460420738442); // vk.K[34].X
        mul_input[1] = uint256(12953575148666343595934623866366340221896260260945841816978436735031815612592); // vk.K[34].Y
        mul_input[2] = input[33];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[34] * input[33]
        mul_input[0] = uint256(20473617297689871414162543007262844076430857568949310169675098950164578617602); // vk.K[35].X
        mul_input[1] = uint256(7086605573483342916017966478543314294059648861284011033445157055134488594497); // vk.K[35].Y
        mul_input[2] = input[34];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[35] * input[34]
        mul_input[0] = uint256(9943397897766827802055868477866967736685079777859168867446869772131245207485); // vk.K[36].X
        mul_input[1] = uint256(18433924738011903396095379938241696402698979217343018135022840104962071453139); // vk.K[36].Y
        mul_input[2] = input[35];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[36] * input[35]
        mul_input[0] = uint256(6854745387022873240949459935297113356770955902359080338224951793172722605309); // vk.K[37].X
        mul_input[1] = uint256(15627904014966459416057589926780212309939896424518230984293996328134318664885); // vk.K[37].Y
        mul_input[2] = input[36];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[37] * input[36]
        mul_input[0] = uint256(19119238036811123021107232401968599917783753423890660627875121707599177576486); // vk.K[38].X
        mul_input[1] = uint256(2249060382425703528274454562460292385818836453387643957450589940008344325159); // vk.K[38].Y
        mul_input[2] = input[37];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[38] * input[37]
        mul_input[0] = uint256(15817056463687726504343649098666807578205346586172003149814867815462963469884); // vk.K[39].X
        mul_input[1] = uint256(9861159396335842237568787068938508252528038481192625920576384406714899922942); // vk.K[39].Y
        mul_input[2] = input[38];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[39] * input[38]
        mul_input[0] = uint256(18090838403328129819035158508257465642502898575439471701214151986245091954523); // vk.K[40].X
        mul_input[1] = uint256(21346158591031760906587733876757479786559760988793188296105737809494886579425); // vk.K[40].Y
        mul_input[2] = input[39];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[40] * input[39]
        mul_input[0] = uint256(15192561503913364894370661409633811796550207434432634990291158088652342436360); // vk.K[41].X
        mul_input[1] = uint256(257919270926705721974800840769636780361125599343939805878414503181068693667); // vk.K[41].Y
        mul_input[2] = input[40];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[41] * input[40]
        mul_input[0] = uint256(21324000757122267120259747278364737125285934932492102102452234149270667734983); // vk.K[42].X
        mul_input[1] = uint256(17635593160592808396784651939297432734174623769267227103319582848366491940008); // vk.K[42].Y
        mul_input[2] = input[41];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[42] * input[41]
        mul_input[0] = uint256(20147240614850703685294907493965950472230788151627398125905534927566652708846); // vk.K[43].X
        mul_input[1] = uint256(20147858645657305426598296786574988867449896582574768137951505038811081169881); // vk.K[43].Y
        mul_input[2] = input[42];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[43] * input[42]
        mul_input[0] = uint256(5760678003213359801303340357706668365905105437220373636433950360035890367592); // vk.K[44].X
        mul_input[1] = uint256(8834524291857913461031328026941048995150145504257262491036928934506858158139); // vk.K[44].Y
        mul_input[2] = input[43];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[44] * input[43]
        mul_input[0] = uint256(21661372579009959345959785058309224443029599439813341945587915907150920627347); // vk.K[45].X
        mul_input[1] = uint256(6780459971350495122122628252763778837290435548266287047517833357195371881215); // vk.K[45].Y
        mul_input[2] = input[44];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[45] * input[44]
        mul_input[0] = uint256(15133217277173347206367204642009125588822534606365171766644161087286122463160); // vk.K[46].X
        mul_input[1] = uint256(5247480043636454001188357798116993289510411006751551069404040957853300684679); // vk.K[46].Y
        mul_input[2] = input[45];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[46] * input[45]
        mul_input[0] = uint256(10729339577582980356598280782525449505317216234910112514467240796250869946978); // vk.K[47].X
        mul_input[1] = uint256(16386492828005950636573164211013690227436141819979927361219716909388316456406); // vk.K[47].Y
        mul_input[2] = input[46];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[47] * input[46]
        mul_input[0] = uint256(19254295624552449769795734932596908405084976706293564098229061730366722983600); // vk.K[48].X
        mul_input[1] = uint256(20925384869485066872354980391266175655655804975297361816074173982287750842773); // vk.K[48].Y
        mul_input[2] = input[47];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[48] * input[47]
        mul_input[0] = uint256(5048259954187742154773496112558177187883986088383565073810588391722306280349); // vk.K[49].X
        mul_input[1] = uint256(7046218967059491798273066555642068897902409174786174760215302156046443652520); // vk.K[49].Y
        mul_input[2] = input[48];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[49] * input[48]
        mul_input[0] = uint256(17798563163244895183741729616843570222617447174075364198666690578937716128101); // vk.K[50].X
        mul_input[1] = uint256(9571789120618980536294434823950466023247485511872124149874026929125708190230); // vk.K[50].Y
        mul_input[2] = input[49];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[50] * input[49]
        mul_input[0] = uint256(13106791034098356937940125878701808021229416897903922133933776865376138764824); // vk.K[51].X
        mul_input[1] = uint256(8519957165873092969755016233134079755142248010176106836762072126464403394513); // vk.K[51].Y
        mul_input[2] = input[50];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[51] * input[50]
        mul_input[0] = uint256(18043011940598780563303103464948051073601706706518064045570661358066125982649); // vk.K[52].X
        mul_input[1] = uint256(13632748479301734822891668630437634387412415800005834636272501495826771470348); // vk.K[52].Y
        mul_input[2] = input[51];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[52] * input[51]
        mul_input[0] = uint256(9398452320154461718656198724638016473696837565453153048562669439658357600712); // vk.K[53].X
        mul_input[1] = uint256(11129655938772424914196640201223927345956783249879319523029034715179624641387); // vk.K[53].Y
        mul_input[2] = input[52];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[53] * input[52]
        mul_input[0] = uint256(4513147335209576934425429198309881626622652268489732169363126451722948737860); // vk.K[54].X
        mul_input[1] = uint256(5914644137790831070299899259961883669415881544260039634116892125658869338286); // vk.K[54].Y
        mul_input[2] = input[53];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[54] * input[53]
        mul_input[0] = uint256(3795437258553724615817966825989359940948520997029678136677084374465878519461); // vk.K[55].X
        mul_input[1] = uint256(21178244674752756533260199927632706108041742447691316723903271648620803527840); // vk.K[55].Y
        mul_input[2] = input[54];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[55] * input[54]
        mul_input[0] = uint256(15493234935381511540185353564159255821294787251078778688628188017039389945349); // vk.K[56].X
        mul_input[1] = uint256(20058175029280158003250832353590439551437012826129651587537157777372808776796); // vk.K[56].Y
        mul_input[2] = input[55];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[56] * input[55]
        mul_input[0] = uint256(14853772982429494344986769988026707537862566018861932562681627821884817183022); // vk.K[57].X
        mul_input[1] = uint256(5034273280913540870087253633816882140683403274891213850932896458265000993903); // vk.K[57].Y
        mul_input[2] = input[56];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[57] * input[56]
        mul_input[0] = uint256(4521956823619537867516989113025748019798770361256666398638143787166453789640); // vk.K[58].X
        mul_input[1] = uint256(7464422976442090307102949288443358413259735361981151740579346148301859057193); // vk.K[58].Y
        mul_input[2] = input[57];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[58] * input[57]
        mul_input[0] = uint256(12294883895136318008783137966083546977828913513863141136148658628603958990183); // vk.K[59].X
        mul_input[1] = uint256(10105382844620047665969148466642723553476019720880502027279305371762004054241); // vk.K[59].Y
        mul_input[2] = input[58];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[59] * input[58]
        mul_input[0] = uint256(19849325471966822123735650951889331027392673999138128305143388692281953302442); // vk.K[60].X
        mul_input[1] = uint256(6216422867913217340610715444155630612622997765431428313076855449913212844161); // vk.K[60].Y
        mul_input[2] = input[59];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[60] * input[59]
        mul_input[0] = uint256(11240277519814752261630516693421421572759109649054260340776898407173423907524); // vk.K[61].X
        mul_input[1] = uint256(3344694275077086432898891964066949225739981525307506880153977622042681844956); // vk.K[61].Y
        mul_input[2] = input[60];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[61] * input[60]
        mul_input[0] = uint256(12811197519049837914567942260225400933990603378488225115781763997163216365296); // vk.K[62].X
        mul_input[1] = uint256(17267845983245958246052504825417950359940846843114538483607870836096503607786); // vk.K[62].Y
        mul_input[2] = input[61];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[62] * input[61]
        mul_input[0] = uint256(19104868347433027631385484980077040112638675347298552001686916131897745236647); // vk.K[63].X
        mul_input[1] = uint256(9182456427041211124232258502022424856725493566385361769315906036356970583956); // vk.K[63].Y
        mul_input[2] = input[62];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[63] * input[62]
        mul_input[0] = uint256(5325918446713740158731375435899588331826299667170215676860200087424956744927); // vk.K[64].X
        mul_input[1] = uint256(4178258758262450065094799059212496080014269552905398875240729584565924825412); // vk.K[64].Y
        mul_input[2] = input[63];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[64] * input[63]
        mul_input[0] = uint256(21514772413346914955174905512761882959321397158566939192602938046104798748754); // vk.K[65].X
        mul_input[1] = uint256(8980623239142447047241740853195737792559100498207912919595087775982376215785); // vk.K[65].Y
        mul_input[2] = input[64];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[65] * input[64]
        mul_input[0] = uint256(10876504556666837019467003572300194730643875732458986993466064606632373142259); // vk.K[66].X
        mul_input[1] = uint256(14338289527394977157290438034094568142763316810188640744967760085583144459002); // vk.K[66].Y
        mul_input[2] = input[65];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[66] * input[65]
        mul_input[0] = uint256(12463019205156017409239511222739879908530068291936477272105721687669576785822); // vk.K[67].X
        mul_input[1] = uint256(18317226055226760894599239750815237362965836486132077749421666286438475108745); // vk.K[67].Y
        mul_input[2] = input[66];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[67] * input[66]
        mul_input[0] = uint256(8010021718413189312426052831863758494922571613094315976078996281776852188157); // vk.K[68].X
        mul_input[1] = uint256(8695657780704253057400622533863383775352751043626762253471083443991070174931); // vk.K[68].Y
        mul_input[2] = input[67];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[68] * input[67]
        mul_input[0] = uint256(912781101795023165374749827092371556062218108533247866278758355020969820217); // vk.K[69].X
        mul_input[1] = uint256(20199005015117441979892395367682362228222927875955584141353653919271944481220); // vk.K[69].Y
        mul_input[2] = input[68];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[69] * input[68]
        mul_input[0] = uint256(16892851030723292845477999696784749606787362682657503923701926734737420970746); // vk.K[70].X
        mul_input[1] = uint256(20836930316367052570939600304263223321765535116609020473893643556721028987766); // vk.K[70].Y
        mul_input[2] = input[69];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[70] * input[69]
        mul_input[0] = uint256(18239259139887933152787768058318528138168307128195434331845374069536162186072); // vk.K[71].X
        mul_input[1] = uint256(8608502587637198712523178974233632767571942669996698983971279897807334671911); // vk.K[71].Y
        mul_input[2] = input[70];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[71] * input[70]
        mul_input[0] = uint256(15540175838543404380313702641944252240964082556596739605374190844643307895510); // vk.K[72].X
        mul_input[1] = uint256(13951918005769527593425418328804773301873756727310227746511137175848098154107); // vk.K[72].Y
        mul_input[2] = input[71];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[72] * input[71]
        mul_input[0] = uint256(13327391890311746380096446469037195402145232490342733513612554772239555473901); // vk.K[73].X
        mul_input[1] = uint256(7264356980669652249491184414348156293234940555631427960795407653766533003417); // vk.K[73].Y
        mul_input[2] = input[72];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[73] * input[72]
        mul_input[0] = uint256(7413308040644179714773748084970614707914846377954839020475853145603473161026); // vk.K[74].X
        mul_input[1] = uint256(17593614951671196988174401376036148758600189906303963832089756360880821942865); // vk.K[74].Y
        mul_input[2] = input[73];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[74] * input[73]
        mul_input[0] = uint256(13538546630906378523638158309011930014217239463640659865641400215679303693240); // vk.K[75].X
        mul_input[1] = uint256(16208525397685440882198367642977795694096005057121295860573485843116517693107); // vk.K[75].Y
        mul_input[2] = input[74];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[75] * input[74]
        mul_input[0] = uint256(9794998646943415355137173881885430953598456766860574718121056711134232432548); // vk.K[76].X
        mul_input[1] = uint256(4069289672326038970901923431770437888822295225025591008643579740012137999538); // vk.K[76].Y
        mul_input[2] = input[75];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[76] * input[75]
        mul_input[0] = uint256(2985250308826353797920272816081002234701648329102361229745004323862260442054); // vk.K[77].X
        mul_input[1] = uint256(11018950797448273990740836336443821674060398634738917265005878012124115718900); // vk.K[77].Y
        mul_input[2] = input[76];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[77] * input[76]
        mul_input[0] = uint256(18468068826040618443064001807395920091707862390688011130389184408285900020863); // vk.K[78].X
        mul_input[1] = uint256(5147065180835180439035926423762938074781532469764675333122681372901768351180); // vk.K[78].Y
        mul_input[2] = input[77];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[78] * input[77]
        mul_input[0] = uint256(12003682258914849827313575519136978348057864949547708341133767719997506704414); // vk.K[79].X
        mul_input[1] = uint256(19948183150116420448465192063928880291734851962336655864247919809042243674317); // vk.K[79].Y
        mul_input[2] = input[78];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[79] * input[78]
        mul_input[0] = uint256(13763749469541681608785820177920800944715377408750998062890507991842115280819); // vk.K[80].X
        mul_input[1] = uint256(19006329102733133064480620388943760048404511190374879310068063553253114795861); // vk.K[80].Y
        mul_input[2] = input[79];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[80] * input[79]
        mul_input[0] = uint256(2232131456683089759909846785744021619463122678327520548130911508456753804881); // vk.K[81].X
        mul_input[1] = uint256(7214936061869557676772602205083250747211867489276159132959422510940415226795); // vk.K[81].Y
        mul_input[2] = input[80];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[81] * input[80]
        mul_input[0] = uint256(1831106796254488240658443275853738953794103322280701766359210362032313599969); // vk.K[82].X
        mul_input[1] = uint256(21451561307759492770467862525793559067345491193194385205701250029769074026441); // vk.K[82].Y
        mul_input[2] = input[81];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[82] * input[81]
        mul_input[0] = uint256(14068158354290008327875558308697333784213896326615306874243384545759907977852); // vk.K[83].X
        mul_input[1] = uint256(10440715401728299636467350211737686951013902056494021101848059140263319570800); // vk.K[83].Y
        mul_input[2] = input[82];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[83] * input[82]
        mul_input[0] = uint256(6058351030921748832375894026406415084520576613458083502838288413469110334105); // vk.K[84].X
        mul_input[1] = uint256(7891606810148411086748083322805228845476074780974973945299016160700424756910); // vk.K[84].Y
        mul_input[2] = input[83];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[84] * input[83]
        mul_input[0] = uint256(10697998227117841148876263247167111087948940487241075460868308691325812671184); // vk.K[85].X
        mul_input[1] = uint256(11060982260174033111331834552188385529651912795812261870018258397764281161303); // vk.K[85].Y
        mul_input[2] = input[84];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[85] * input[84]
        mul_input[0] = uint256(1930416056153136539326238801252366683709223440798797819609720856676220142699); // vk.K[86].X
        mul_input[1] = uint256(6134247446887637919445351767362648774330349294137906522693503506708937287144); // vk.K[86].Y
        mul_input[2] = input[85];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[86] * input[85]
        mul_input[0] = uint256(2449908109198757498285269797093929046639872040990873967505252643540369818470); // vk.K[87].X
        mul_input[1] = uint256(8933475003754801217095307682203780663918472347543000060520565973561952126228); // vk.K[87].Y
        mul_input[2] = input[86];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[87] * input[86]
        mul_input[0] = uint256(20316448979843198328527659150017677393621153162540237031001716817140264005878); // vk.K[88].X
        mul_input[1] = uint256(412467311863116505233091487303095401720156899543837450610013100383431889491); // vk.K[88].Y
        mul_input[2] = input[87];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[88] * input[87]
        mul_input[0] = uint256(6747509453626590910528626563292584395092691323201229582549588237075855379757); // vk.K[89].X
        mul_input[1] = uint256(11064855196771698859806432570645431279722565802654834867826931678145616659639); // vk.K[89].Y
        mul_input[2] = input[88];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[89] * input[88]
        mul_input[0] = uint256(20907369954704722292753043499607227452677968753131465551341025752053628493788); // vk.K[90].X
        mul_input[1] = uint256(17916569744017444627883594127290836636930933869907216065886915257548835548719); // vk.K[90].Y
        mul_input[2] = input[89];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[90] * input[89]
        mul_input[0] = uint256(14606196844661524063087550340318170019397085041368922951333758531635732096848); // vk.K[91].X
        mul_input[1] = uint256(12483411193714452770221801253404334184479824202581117124911990325714811840623); // vk.K[91].Y
        mul_input[2] = input[90];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[91] * input[90]
        mul_input[0] = uint256(16623082355905594366690307238569395664451563759270956587221028414777821195594); // vk.K[92].X
        mul_input[1] = uint256(6058532041271348525333090249363606504935827664004069554196105162131635535639); // vk.K[92].Y
        mul_input[2] = input[91];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[92] * input[91]
        mul_input[0] = uint256(15597747971004378859514683876841434237776190853994252150813767577390916198503); // vk.K[93].X
        mul_input[1] = uint256(1325691881108666047532676702865004256317129652417776907461302574506086923067); // vk.K[93].Y
        mul_input[2] = input[92];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[93] * input[92]
        mul_input[0] = uint256(15718353179669293108718032488121865007629367577731425703871558833734124469278); // vk.K[94].X
        mul_input[1] = uint256(346732532881244341068337072443722135214586291394423619859570892944236558495); // vk.K[94].Y
        mul_input[2] = input[93];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[94] * input[93]
        mul_input[0] = uint256(12437413460556303173705315354181386880724003714275369721432818543171199416159); // vk.K[95].X
        mul_input[1] = uint256(7014817884829613528035118236080212801467605108663785105444531176119496710249); // vk.K[95].Y
        mul_input[2] = input[94];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[95] * input[94]
        mul_input[0] = uint256(674835004611023127472513926860982475094694755874784292188483881141518278114); // vk.K[96].X
        mul_input[1] = uint256(3164416412188715543429406531070328581626333158850789244791863383946851504834); // vk.K[96].Y
        mul_input[2] = input[95];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[96] * input[95]
        mul_input[0] = uint256(6461131520585017065767001245799791610017112269523112401927248874377225331115); // vk.K[97].X
        mul_input[1] = uint256(21334489039088924362160138100373406916858100758957770204409276234120590919229); // vk.K[97].Y
        mul_input[2] = input[96];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[97] * input[96]
        mul_input[0] = uint256(10653235250158369678793388222225363497055069815678101988539865134695849191922); // vk.K[98].X
        mul_input[1] = uint256(14364804389149956959527759490998945606195887970068795919020271778941655820361); // vk.K[98].Y
        mul_input[2] = input[97];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[98] * input[97]
        mul_input[0] = uint256(18661799568103505949053670052543988576127100314206884749998600981430678487409); // vk.K[99].X
        mul_input[1] = uint256(7594833720737346065232522485313011994117794162082990384405704423142943151153); // vk.K[99].Y
        mul_input[2] = input[98];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[99] * input[98]
        mul_input[0] = uint256(9327436593813498870624814422010327816476765690623434489416653076601874011848); // vk.K[100].X
        mul_input[1] = uint256(4167367717458195605509686494201580095505799082834831029790785588742428921640); // vk.K[100].Y
        mul_input[2] = input[99];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[100] * input[99]
        mul_input[0] = uint256(19915485219593302047166489366670293799571030363999475382572058757735250974229); // vk.K[101].X
        mul_input[1] = uint256(20437938313421634227991677341959370820023320387666923039429500181205640400642); // vk.K[101].Y
        mul_input[2] = input[100];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[101] * input[100]
        mul_input[0] = uint256(20807641523551594348255099196699767148281129235482115188685354148456204706876); // vk.K[102].X
        mul_input[1] = uint256(4543154594520288737202684659216687186451305883894295915788111076913660947530); // vk.K[102].Y
        mul_input[2] = input[101];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[102] * input[101]
        mul_input[0] = uint256(6582154745881821531174293020490356520820544943700423941592266426849372799861); // vk.K[103].X
        mul_input[1] = uint256(12125889841992428120608674434534838630783395911767544975913667879463934333658); // vk.K[103].Y
        mul_input[2] = input[102];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[103] * input[102]
        mul_input[0] = uint256(11612350885564325616323178383622754894466537093817693265910312083790035807225); // vk.K[104].X
        mul_input[1] = uint256(20421086527804669620773167796208038421926548075340163210078538398911089723474); // vk.K[104].Y
        mul_input[2] = input[103];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[104] * input[103]
        mul_input[0] = uint256(3837992847096170019577899920591551764479987278103701015983159905719195067393); // vk.K[105].X
        mul_input[1] = uint256(637768717551564302075812550292254495052549305338262301545337562406852442001); // vk.K[105].Y
        mul_input[2] = input[104];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[105] * input[104]
        mul_input[0] = uint256(12629354129527047930059080864239262622058736871311533746938986715017484496524); // vk.K[106].X
        mul_input[1] = uint256(7183521813857365860318983704490150042903616474083618335776678014128170326626); // vk.K[106].Y
        mul_input[2] = input[105];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[106] * input[105]
        mul_input[0] = uint256(2684128111299410569192744904911202807014959871813951131233102292143839268026); // vk.K[107].X
        mul_input[1] = uint256(2383120980010332941291091691238952734613686507216788434551571269989023117092); // vk.K[107].Y
        mul_input[2] = input[106];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[107] * input[106]
        mul_input[0] = uint256(20241578258414479442592936125837045270903079289107020616166138575287555518681); // vk.K[108].X
        mul_input[1] = uint256(8249130777231488891644686999464961414648543824868947257285795506748911678676); // vk.K[108].Y
        mul_input[2] = input[107];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[108] * input[107]
        mul_input[0] = uint256(10411838164558425126681537874206657523912316071435747344042305970549792051810); // vk.K[109].X
        mul_input[1] = uint256(19148690721786615375162308244443538178656188204865605106622225992696161981001); // vk.K[109].Y
        mul_input[2] = input[108];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[109] * input[108]
        mul_input[0] = uint256(15678298838784897507086825986804933286349909256600536116695251298632978460742); // vk.K[110].X
        mul_input[1] = uint256(1746993431943117562952925434662603933213810368499480583986586146973937710175); // vk.K[110].Y
        mul_input[2] = input[109];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[110] * input[109]
        mul_input[0] = uint256(1363814884575141243799259382376403905664063189784695440415634813270627074390); // vk.K[111].X
        mul_input[1] = uint256(15660323142524079245522362626782983480145357897770517665298065435637870507824); // vk.K[111].Y
        mul_input[2] = input[110];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[111] * input[110]
        mul_input[0] = uint256(9012017530370280649559217262134466721269750564270452638273526694455300749412); // vk.K[112].X
        mul_input[1] = uint256(763090672981505089865108393842616248431291428941040450206161642128653839127); // vk.K[112].Y
        mul_input[2] = input[111];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[112] * input[111]
        mul_input[0] = uint256(8828728120985817856780034121086067072147944823460854737800038214233341758516); // vk.K[113].X
        mul_input[1] = uint256(19252333852624408529266943355184812240090703539271553311255052960387028831638); // vk.K[113].Y
        mul_input[2] = input[112];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[113] * input[112]
        mul_input[0] = uint256(17997271530929167589634866726397216097655992852450750643534593043855274724430); // vk.K[114].X
        mul_input[1] = uint256(14595297159191785615519641900593725475499211193169266966404172211777613850491); // vk.K[114].Y
        mul_input[2] = input[113];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[114] * input[113]
        mul_input[0] = uint256(13826463175164048649363930570687402293055149590040807818315856234439763235704); // vk.K[115].X
        mul_input[1] = uint256(20533480801372857017886192944802011093989043788851659707500559598467880011852); // vk.K[115].Y
        mul_input[2] = input[114];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[115] * input[114]
        mul_input[0] = uint256(16516230353794871807336743838643084899444369897338051472947456090072129603457); // vk.K[116].X
        mul_input[1] = uint256(15175487957078686820705790776187225942699760395859769791909373347190460870866); // vk.K[116].Y
        mul_input[2] = input[115];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[116] * input[115]
        mul_input[0] = uint256(11776665326937461578505061333291245730204010709505139367539851840489659880343); // vk.K[117].X
        mul_input[1] = uint256(15759805065142503538444191629819261952704394685076962788802689821504976753449); // vk.K[117].Y
        mul_input[2] = input[116];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[117] * input[116]
        mul_input[0] = uint256(6965929945243996954143620026333099869858962516794526411328719408613087838569); // vk.K[118].X
        mul_input[1] = uint256(9431313734181121792854972603328905477866444106896632631286870602874983804939); // vk.K[118].Y
        mul_input[2] = input[117];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[118] * input[117]
        mul_input[0] = uint256(12406964871073369334897421212461135540074662496492911029396972100042348315723); // vk.K[119].X
        mul_input[1] = uint256(1572865525382453059069375246583057688654675270374051460985741638940220131021); // vk.K[119].Y
        mul_input[2] = input[118];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[119] * input[118]
        mul_input[0] = uint256(12539408724102904165274103526901045719002104839187895049391295858354820348637); // vk.K[120].X
        mul_input[1] = uint256(312575880573707758874697626495350453043223484895040747958716425968530655988); // vk.K[120].Y
        mul_input[2] = input[119];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[120] * input[119]
        mul_input[0] = uint256(10779883591394749045543891654239831526037823745774111694744681372569983401170); // vk.K[121].X
        mul_input[1] = uint256(478459323639844738179699893364391846398089460108953592090201264323134948937); // vk.K[121].Y
        mul_input[2] = input[120];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[121] * input[120]
        mul_input[0] = uint256(10048909478833148031556561624850826428405088399334612790575787246631065640185); // vk.K[122].X
        mul_input[1] = uint256(11276596549601076678088711003201020237374350824634425679935334717660845911415); // vk.K[122].Y
        mul_input[2] = input[121];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[122] * input[121]
        mul_input[0] = uint256(8108030589537772298674163699783679164652161803872066813737127623447936617447); // vk.K[123].X
        mul_input[1] = uint256(6526265418971250294775999580111090803511701318289912500632408798475139757320); // vk.K[123].Y
        mul_input[2] = input[122];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[123] * input[122]
        mul_input[0] = uint256(18035616458421208448518329174514318102428803744521319248650440394198475687052); // vk.K[124].X
        mul_input[1] = uint256(9215755514905372940758886304589813823216147431339620653115136510878025659977); // vk.K[124].Y
        mul_input[2] = input[123];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[124] * input[123]
        mul_input[0] = uint256(13721632673097284992029826051273952282036415130891101929051780692517700630458); // vk.K[125].X
        mul_input[1] = uint256(1267577549285392573404006248926102786694214297243616669950573254414108518918); // vk.K[125].Y
        mul_input[2] = input[124];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[125] * input[124]
        mul_input[0] = uint256(8572466071572998275171511942769741828427728259658340987809866899589920614179); // vk.K[126].X
        mul_input[1] = uint256(6223289818752747145594968497354702376732759704440326082935265809203478256362); // vk.K[126].Y
        mul_input[2] = input[125];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[126] * input[125]
        mul_input[0] = uint256(11704218768166984279140258556876865494837647595424023662216998706337614908542); // vk.K[127].X
        mul_input[1] = uint256(11943435250662689609028123102232278565432108501523519693614448432218862416736); // vk.K[127].Y
        mul_input[2] = input[126];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[127] * input[126]
        mul_input[0] = uint256(17339364378388815148784569028163666671322658097113713789604015453066731793736); // vk.K[128].X
        mul_input[1] = uint256(1245852565897915206552335154561276813214554996559661979735578051066823957421); // vk.K[128].Y
        mul_input[2] = input[127];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[128] * input[127]
        mul_input[0] = uint256(3300462163161069287175465580544926192533063475251873547466908857803296859200); // vk.K[129].X
        mul_input[1] = uint256(15566286748345810921068821819385490539250143768234312100246206384767761389442); // vk.K[129].Y
        mul_input[2] = input[128];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[129] * input[128]
        mul_input[0] = uint256(15591992579548309182840821278506120163530529009302996075499164218573873607937); // vk.K[130].X
        mul_input[1] = uint256(6411210705950719461441120082699623061580896124742976565732561458004099970882); // vk.K[130].Y
        mul_input[2] = input[129];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[130] * input[129]
        mul_input[0] = uint256(2147355061024215288623082110865607858784769558082373069547725566250523469845); // vk.K[131].X
        mul_input[1] = uint256(13021486264680980810008010010189057424812830316885084979240645918030349043669); // vk.K[131].Y
        mul_input[2] = input[130];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[131] * input[130]
        mul_input[0] = uint256(2313572929690728582833605919948566749571911511677009973006071720103876076180); // vk.K[132].X
        mul_input[1] = uint256(28548119267363235738596043888052328028111569432746694540735280795654905697); // vk.K[132].Y
        mul_input[2] = input[131];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[132] * input[131]
        mul_input[0] = uint256(3407649500506102068988917196699094238986675134377790955892722772597726278981); // vk.K[133].X
        mul_input[1] = uint256(2172813165249006660110031895362430893595862218955993962753877999440247271456); // vk.K[133].Y
        mul_input[2] = input[132];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[133] * input[132]
        mul_input[0] = uint256(5775704174932742688525054382619479586338783616004710629975793282053352021389); // vk.K[134].X
        mul_input[1] = uint256(1426901778568429178767116138913666151932037266376854911793902154539169733877); // vk.K[134].Y
        mul_input[2] = input[133];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[134] * input[133]
        mul_input[0] = uint256(2576332308112886100868278137710769924418281844791653682651828638547121021776); // vk.K[135].X
        mul_input[1] = uint256(9129476224434647056772049749687850325674206972291513759420450579287531964518); // vk.K[135].Y
        mul_input[2] = input[134];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[135] * input[134]
        mul_input[0] = uint256(10168195016356443372722528290110262637034145266549698590557678448168225605507); // vk.K[136].X
        mul_input[1] = uint256(15234455409146228015754347663360330067060090968459618180626110431054773344017); // vk.K[136].Y
        mul_input[2] = input[135];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[136] * input[135]
        mul_input[0] = uint256(4307359575008204667566058573417246970617802799859205035627218026564700895820); // vk.K[137].X
        mul_input[1] = uint256(8382275007714280846669334683101461596667488028523640699872734845181881859477); // vk.K[137].Y
        mul_input[2] = input[136];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[137] * input[136]
        mul_input[0] = uint256(6921123704203952040641298257202841523170543569192727508167899691247142286636); // vk.K[138].X
        mul_input[1] = uint256(13440805606805115777751550737427964256390724618256054120457667334653136166857); // vk.K[138].Y
        mul_input[2] = input[137];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[138] * input[137]
        mul_input[0] = uint256(12999946378448712273091464325422673049014868325524807998292143302150823571673); // vk.K[139].X
        mul_input[1] = uint256(10243815503691912579001015356249835583255654181071160132812088373158053599924); // vk.K[139].Y
        mul_input[2] = input[138];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[139] * input[138]
        mul_input[0] = uint256(20718032501120354865323161763218202468384190354492424177874997751543792150436); // vk.K[140].X
        mul_input[1] = uint256(5369044426645073273309309347229316655991530825814712090754402062350567470466); // vk.K[140].Y
        mul_input[2] = input[139];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[140] * input[139]
        mul_input[0] = uint256(16394723333247008537379911216768668024450541469779763691712652086413178432545); // vk.K[141].X
        mul_input[1] = uint256(10753750762370415104866212664582452455742609182682654933462818391813382397356); // vk.K[141].Y
        mul_input[2] = input[140];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[141] * input[140]
        mul_input[0] = uint256(13879403623707987443927845840335523720961588656069304842807006261773499064903); // vk.K[142].X
        mul_input[1] = uint256(570647592838773598749654088946904109361373380368301219667093948077158319279); // vk.K[142].Y
        mul_input[2] = input[141];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[142] * input[141]
        mul_input[0] = uint256(1214999087002071237342768038867384853483683867216694087877212939885099196730); // vk.K[143].X
        mul_input[1] = uint256(13692362163107741588482671959912026107723676877914414241384143156341149482445); // vk.K[143].Y
        mul_input[2] = input[142];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[143] * input[142]
        mul_input[0] = uint256(1596293807708335175640556613785469133912765225096579204589199618048223418140); // vk.K[144].X
        mul_input[1] = uint256(16395582910134653015246999741483017960326429655985455271302547537884779856708); // vk.K[144].Y
        mul_input[2] = input[143];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[144] * input[143]
        mul_input[0] = uint256(11513030466258489231856315698765477691767008701180639514027928875677431445108); // vk.K[145].X
        mul_input[1] = uint256(10045435756981727632741618401311970554203219884549257693628773803845170823608); // vk.K[145].Y
        mul_input[2] = input[144];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[145] * input[144]
        mul_input[0] = uint256(2774702341049878708440079282593747182565777794585461665034892778081098281159); // vk.K[146].X
        mul_input[1] = uint256(10927974932105990737131035343240404873456514281986333569435043040682403013742); // vk.K[146].Y
        mul_input[2] = input[145];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[146] * input[145]
        mul_input[0] = uint256(4506536610119429612077614125510039200296816780959555216015771874977319410204); // vk.K[147].X
        mul_input[1] = uint256(18005619965045710283987159656899790108887006488407680695781349202993120250403); // vk.K[147].Y
        mul_input[2] = input[146];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[147] * input[146]
        mul_input[0] = uint256(6483129382527499614592295740619353000726848251148897121865661700014724290872); // vk.K[148].X
        mul_input[1] = uint256(10665474465194003990815557366099094410011048389591324936364382718849249348675); // vk.K[148].Y
        mul_input[2] = input[147];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[148] * input[147]
        mul_input[0] = uint256(19267716724294529362662630642536966256747860519280058314164109427586878407806); // vk.K[149].X
        mul_input[1] = uint256(12678801328871766286184802409224798125592804630053060491844493771382942915062); // vk.K[149].Y
        mul_input[2] = input[148];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[149] * input[148]
        mul_input[0] = uint256(20252791258328873592928677530107751285660919021904736730753731943420589320579); // vk.K[150].X
        mul_input[1] = uint256(19948602650750723302960420468342359219313507028267443333176459436276332338908); // vk.K[150].Y
        mul_input[2] = input[149];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[150] * input[149]
        mul_input[0] = uint256(14161978954518143283966085808620939589087800303364553487966162725281541337698); // vk.K[151].X
        mul_input[1] = uint256(1491753216689722528427040412247521096265767593449395154549001550936596911553); // vk.K[151].Y
        mul_input[2] = input[150];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[151] * input[150]
        mul_input[0] = uint256(3962469928533089815104591320527919594251611076733092471493112897047828920275); // vk.K[152].X
        mul_input[1] = uint256(12504518448447518756788673957542806977301221401580229454997331582800550448201); // vk.K[152].Y
        mul_input[2] = input[151];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[152] * input[151]
        mul_input[0] = uint256(11533667673391845027017328371755800970788665019751911922074605369130153114346); // vk.K[153].X
        mul_input[1] = uint256(19509135428362574354415266931564774205985332356893263328311223294275101896133); // vk.K[153].Y
        mul_input[2] = input[152];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[153] * input[152]
        mul_input[0] = uint256(16976586009960204466377322447144469035728334402659176157184675328901426952997); // vk.K[154].X
        mul_input[1] = uint256(1789844960066212771068725474918799073296285561659598782020937591012003556032); // vk.K[154].Y
        mul_input[2] = input[153];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[154] * input[153]
        mul_input[0] = uint256(9947731965999123461784953513942314175065756442515224012498637341919650899271); // vk.K[155].X
        mul_input[1] = uint256(2865098669997652167429883755283171129348485890851686897264829938599120516445); // vk.K[155].Y
        mul_input[2] = input[154];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[155] * input[154]
        mul_input[0] = uint256(171795201117809900366525617647228191167251404326150679157972400008830970778); // vk.K[156].X
        mul_input[1] = uint256(16499472225148766579737578941259488928915995180887644167021603185019715821813); // vk.K[156].Y
        mul_input[2] = input[155];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[156] * input[155]
        mul_input[0] = uint256(6106953704568341249806071075990491789751691775023248869247296017193013306218); // vk.K[157].X
        mul_input[1] = uint256(3530190392411864507656918014089907007326679468344447504894604461418847565623); // vk.K[157].Y
        mul_input[2] = input[156];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[157] * input[156]
        mul_input[0] = uint256(13715974297832605832281595494312300333468691446710255839269417158312715056900); // vk.K[158].X
        mul_input[1] = uint256(17032781060651111789333418728396174170519172467025940658510249365778303018987); // vk.K[158].Y
        mul_input[2] = input[157];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[158] * input[157]
        mul_input[0] = uint256(15060169172271074501367436818593384408001905449493519794540925489918397218446); // vk.K[159].X
        mul_input[1] = uint256(18085604244138446832001352565106623304459096919981111114121013843865903303640); // vk.K[159].Y
        mul_input[2] = input[158];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[159] * input[158]
        mul_input[0] = uint256(946221834456843583251871879378798670184453552045098708211821232331261891014); // vk.K[160].X
        mul_input[1] = uint256(5090850217744820923702596307787163430813852645792783334524183455194805140885); // vk.K[160].Y
        mul_input[2] = input[159];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[160] * input[159]
        mul_input[0] = uint256(2804005237853677455309590729354906907093401660127168188452548712193867507681); // vk.K[161].X
        mul_input[1] = uint256(8625005398875797212794705075460715596362048223284363293622853980832578324088); // vk.K[161].Y
        mul_input[2] = input[160];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[161] * input[160]
        mul_input[0] = uint256(2512385282665512157982336375561423054514103190168353046397881600288131173435); // vk.K[162].X
        mul_input[1] = uint256(15159345301839929172038808473083570240529723371204622676593896317136579054286); // vk.K[162].Y
        mul_input[2] = input[161];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[162] * input[161]
        mul_input[0] = uint256(5221214692635129977675723211467897121466574200565759371603631879822595552810); // vk.K[163].X
        mul_input[1] = uint256(198719341780087341071521349168451492368194367949516111630623632079165843474); // vk.K[163].Y
        mul_input[2] = input[162];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[163] * input[162]
        mul_input[0] = uint256(2900163534052171475901650003463868765595132545393080703895644632264268442168); // vk.K[164].X
        mul_input[1] = uint256(11107501418048111976755027572654699212523276876771108285752529368078618973235); // vk.K[164].Y
        mul_input[2] = input[163];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[164] * input[163]
        mul_input[0] = uint256(18749174899949167956436377970302043681396281456109802446264283505394386858102); // vk.K[165].X
        mul_input[1] = uint256(3195900102323801745530100532989988419280463731173066723245831389556287391929); // vk.K[165].Y
        mul_input[2] = input[164];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[165] * input[164]
        mul_input[0] = uint256(8260094948424591355289186511702411570260500852402428072380588052785273904850); // vk.K[166].X
        mul_input[1] = uint256(20964384093058712016300012492394669861892602370215778659549470908949313455558); // vk.K[166].Y
        mul_input[2] = input[165];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[166] * input[165]
        mul_input[0] = uint256(5968193812386078574965081656854048437108466044866833646907814910849646596840); // vk.K[167].X
        mul_input[1] = uint256(3626849436261512568571863139292252179862930447195355988437693458158311908190); // vk.K[167].Y
        mul_input[2] = input[166];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[167] * input[166]
        mul_input[0] = uint256(19692651730342894471311653387730523911743455011611186000421699288664939044543); // vk.K[168].X
        mul_input[1] = uint256(19329409083311438509287663940347906198428276897713488350619951451320050291196); // vk.K[168].Y
        mul_input[2] = input[167];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[168] * input[167]
        mul_input[0] = uint256(19549064672416775641864495364741313670920762809236296769417142439924336811176); // vk.K[169].X
        mul_input[1] = uint256(20317453354275473693056003890501510704363593566710595335753158949566971723870); // vk.K[169].Y
        mul_input[2] = input[168];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[169] * input[168]
        mul_input[0] = uint256(1606883273820917193224059242354937377827806328619174506980696823969236462019); // vk.K[170].X
        mul_input[1] = uint256(2852726865266972760761312460191529792542370361211547551640186149074741688799); // vk.K[170].Y
        mul_input[2] = input[169];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[170] * input[169]
        mul_input[0] = uint256(16499177649653694180793107298273317917280214194780980184210137144760089345787); // vk.K[171].X
        mul_input[1] = uint256(5866295505975856340444499587544666226090314681991291242990950121004451361486); // vk.K[171].Y
        mul_input[2] = input[170];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[171] * input[170]
        mul_input[0] = uint256(15971271658888372330429620482449782804071206258453722177341134717059952298415); // vk.K[172].X
        mul_input[1] = uint256(6057654471608688750284161200091742065143500338347051543193657098839080168647); // vk.K[172].Y
        mul_input[2] = input[171];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[172] * input[171]
        mul_input[0] = uint256(7053966012416665125828571540490101756074176407918936005387945213850406315209); // vk.K[173].X
        mul_input[1] = uint256(18215068047388368196035852865429757147728789513307677957212542331096336448788); // vk.K[173].Y
        mul_input[2] = input[172];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[173] * input[172]
        mul_input[0] = uint256(17223031255458116199212642014155260344330921208277576132192449308260546136074); // vk.K[174].X
        mul_input[1] = uint256(13452960642601394323841549086512124536121781173893062510244704932185728130130); // vk.K[174].Y
        mul_input[2] = input[173];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[174] * input[173]
        mul_input[0] = uint256(5315148611646341850145878984534909639073781760392750983825651018286350811975); // vk.K[175].X
        mul_input[1] = uint256(15145123622582981648471738639586316698186095240385995941206937131935180080609); // vk.K[175].Y
        mul_input[2] = input[174];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[175] * input[174]
        mul_input[0] = uint256(20454360906121992444174045368332684631636551565143196329846066087791841285734); // vk.K[176].X
        mul_input[1] = uint256(16502468884716089539179426917375860167053927077467994772469743363990376902005); // vk.K[176].Y
        mul_input[2] = input[175];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[176] * input[175]
        mul_input[0] = uint256(2658530616090800206537011669573518741241943606230411003168197287834064579797); // vk.K[177].X
        mul_input[1] = uint256(4699690962086053850525883419937277304633412171423549965343914537920290336396); // vk.K[177].Y
        mul_input[2] = input[176];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[177] * input[176]
        mul_input[0] = uint256(1783758183092572181285554284110121610370875607343920607855202278854323357432); // vk.K[178].X
        mul_input[1] = uint256(446498147731513377571988510147813037858765414564482733517128788728278592775); // vk.K[178].Y
        mul_input[2] = input[177];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[178] * input[177]
        mul_input[0] = uint256(1162365443577655469688898096101275255219922817980465050369263995009767997054); // vk.K[179].X
        mul_input[1] = uint256(14415924454683225539477165131272253903731932876016482135273645028865726334078); // vk.K[179].Y
        mul_input[2] = input[178];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[179] * input[178]
        mul_input[0] = uint256(15539413364516154189581633916917640574601062771852271255129001763253916203625); // vk.K[180].X
        mul_input[1] = uint256(3051827635882507126532493260064895298931096554323686941146978031563692328097); // vk.K[180].Y
        mul_input[2] = input[179];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[180] * input[179]
        mul_input[0] = uint256(11130577765131065302485025551553879722463201706462468679590759191916142919085); // vk.K[181].X
        mul_input[1] = uint256(18514043979071939699132212293107880101983844620943308709709645508594991062419); // vk.K[181].Y
        mul_input[2] = input[180];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[181] * input[180]
        mul_input[0] = uint256(15654140108720074230729629015530307002076681255783893818297715052792271134852); // vk.K[182].X
        mul_input[1] = uint256(8308696899333267193585542406800625465597217595002663055107574415915165347310); // vk.K[182].Y
        mul_input[2] = input[181];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[182] * input[181]
        mul_input[0] = uint256(13422667084087929064913706725468130792524741548992321276777995162866541287155); // vk.K[183].X
        mul_input[1] = uint256(2581841691497665454385669755523649382831379999895877661825985781270472246103); // vk.K[183].Y
        mul_input[2] = input[182];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[183] * input[182]
        mul_input[0] = uint256(8292671593252478449612219005744675787630040785303976488265486480810513816909); // vk.K[184].X
        mul_input[1] = uint256(10708089304577881719820163671080913863132329820695832708149696903465150362641); // vk.K[184].Y
        mul_input[2] = input[183];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[184] * input[183]
        mul_input[0] = uint256(20690974079459660265728935921255639703488151939824019127595594618136578658211); // vk.K[185].X
        mul_input[1] = uint256(3555832952491948828983040309204102292453031281435623121666648404448888976101); // vk.K[185].Y
        mul_input[2] = input[184];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[185] * input[184]
        mul_input[0] = uint256(6777442646933003200190008430118683589409477115177948131227290301666000453110); // vk.K[186].X
        mul_input[1] = uint256(11665420422486944782591566271237238286774631772162092657389171141725572093971); // vk.K[186].Y
        mul_input[2] = input[185];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[186] * input[185]
        mul_input[0] = uint256(14700263340336038572323132817324857257080908659287215524990824207109398492785); // vk.K[187].X
        mul_input[1] = uint256(2472197097297427308316466351201704337804689311417417057982729233413593029206); // vk.K[187].Y
        mul_input[2] = input[186];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[187] * input[186]
        mul_input[0] = uint256(13988687730860248098343544073323432759498092999514002585950402644915896674468); // vk.K[188].X
        mul_input[1] = uint256(16884267747161200792191589167815832377104296792306196955236362256579716376884); // vk.K[188].Y
        mul_input[2] = input[187];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[188] * input[187]
        mul_input[0] = uint256(16617998333265557222764947884511713010098303120793497009120564587512660346122); // vk.K[189].X
        mul_input[1] = uint256(17109370025957795465225592315287016561863586243307101334982063393346406774435); // vk.K[189].Y
        mul_input[2] = input[188];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[189] * input[188]
        mul_input[0] = uint256(16249882425327704615569783719249480141405096646614923476619735276758121256510); // vk.K[190].X
        mul_input[1] = uint256(11848391053964812617357533092790160172647296426315466145200673222640840657594); // vk.K[190].Y
        mul_input[2] = input[189];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[190] * input[189]
        mul_input[0] = uint256(3329998583827468350110271384363686521503938535096252935679437718960588744714); // vk.K[191].X
        mul_input[1] = uint256(14709536479437685265317141438511810263975233926996608197021227116847145305394); // vk.K[191].Y
        mul_input[2] = input[190];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[191] * input[190]
        mul_input[0] = uint256(14288625859636835630668899130824640150858707792771854522120078443617005236399); // vk.K[192].X
        mul_input[1] = uint256(18640371519417627539052003091136460360174977317966929506948668823820097429385); // vk.K[192].Y
        mul_input[2] = input[191];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[192] * input[191]
        mul_input[0] = uint256(13376147441042613218775401944009341377428657062907162961678937019834609749013); // vk.K[193].X
        mul_input[1] = uint256(5485715702752026533499486163267614274587048094492932473643968201498015431734); // vk.K[193].Y
        mul_input[2] = input[192];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[193] * input[192]
        mul_input[0] = uint256(6958605345706647421911845420275295328429373763696177122399641005381072309246); // vk.K[194].X
        mul_input[1] = uint256(2040872413013406453323256596491375066890192773743225002490278551719001332733); // vk.K[194].Y
        mul_input[2] = input[193];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[194] * input[193]
        mul_input[0] = uint256(3647821485343211757251139366601015103829941603696696505557428167739438660557); // vk.K[195].X
        mul_input[1] = uint256(11987187586455519984696843023350262124398743504781121152098088772544641973546); // vk.K[195].Y
        mul_input[2] = input[194];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[195] * input[194]
        mul_input[0] = uint256(8745279591635435413090341689790629152235989544937592951500635744725952778234); // vk.K[196].X
        mul_input[1] = uint256(4078088429662858310144550869175528656928298958930437588140287975718201159158); // vk.K[196].Y
        mul_input[2] = input[195];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[196] * input[195]
        mul_input[0] = uint256(10124914341278777932581782443249566418833082621082946197655830453861104621204); // vk.K[197].X
        mul_input[1] = uint256(12326696161965766905113056492925325158189461598640121256015310240792319112707); // vk.K[197].Y
        mul_input[2] = input[196];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[197] * input[196]
        mul_input[0] = uint256(9486955058910221225063496401703938241446560559610461889533139316658604671078); // vk.K[198].X
        mul_input[1] = uint256(13548700531225903097975663664761541099363696567602943534553098986025545177841); // vk.K[198].Y
        mul_input[2] = input[197];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[198] * input[197]
        mul_input[0] = uint256(10609977993689726062087340277726631690508235674153095179626726817279137365538); // vk.K[199].X
        mul_input[1] = uint256(21031238349806607386951711832175679626510204026324481301037645024975207996886); // vk.K[199].Y
        mul_input[2] = input[198];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[199] * input[198]
        mul_input[0] = uint256(20513607372543931572340603834440375084541934845300208790958985737900112049555); // vk.K[200].X
        mul_input[1] = uint256(6490866621544568822625341640613629490314331128768291677679896186087094558312); // vk.K[200].Y
        mul_input[2] = input[199];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[200] * input[199]
        mul_input[0] = uint256(15969565477185542803018531884601940389250238821844070170184681649130248300404); // vk.K[201].X
        mul_input[1] = uint256(12689419748818368770509386833179207227401195514380689403319944839892059255997); // vk.K[201].Y
        mul_input[2] = input[200];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[201] * input[200]
        mul_input[0] = uint256(2590607569307743709875648053087745071689379187985587862236176619271581900287); // vk.K[202].X
        mul_input[1] = uint256(9506463753413463238016719820570665130114499496233858428076535056340138053024); // vk.K[202].Y
        mul_input[2] = input[201];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[202] * input[201]
        mul_input[0] = uint256(19678279889631746981806589653205560433008113997326914750563978918231863071849); // vk.K[203].X
        mul_input[1] = uint256(13899685880599743160126341462719421520291958706389721513915873292138410002710); // vk.K[203].Y
        mul_input[2] = input[202];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[203] * input[202]
        mul_input[0] = uint256(6952518857777845169273504102303126885044292830596769750202236155453285267928); // vk.K[204].X
        mul_input[1] = uint256(3825933906265273158526530874498128619068165386732108700225487942471673365541); // vk.K[204].Y
        mul_input[2] = input[203];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[204] * input[203]
        mul_input[0] = uint256(3108023524891862184852554068761149558824731091577770997241164885369537127106); // vk.K[205].X
        mul_input[1] = uint256(13597714481547796423699601540266347892381844477529491955502754445486885240131); // vk.K[205].Y
        mul_input[2] = input[204];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[205] * input[204]
        mul_input[0] = uint256(11821149817547431550115505587681580656071635770797425759432319594190490366757); // vk.K[206].X
        mul_input[1] = uint256(17928046729235289853386222332430879952531131560441064231273595396409483874747); // vk.K[206].Y
        mul_input[2] = input[205];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[206] * input[205]
        mul_input[0] = uint256(17486298370991958459043020719403709382570479929578466706339333331153207682399); // vk.K[207].X
        mul_input[1] = uint256(17253918055826769336423095014228031253311986693466317035372177847099351557869); // vk.K[207].Y
        mul_input[2] = input[206];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[207] * input[206]
        mul_input[0] = uint256(20116368964053163490156289446693561000321927201554166791788834967691572854056); // vk.K[208].X
        mul_input[1] = uint256(3590642103429183338269131418623260538845432970414622997280054579182060224444); // vk.K[208].Y
        mul_input[2] = input[207];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[208] * input[207]
        mul_input[0] = uint256(19834867220248615703852899830539391695735725869600510727062263732245063059350); // vk.K[209].X
        mul_input[1] = uint256(1785427221494714381719722526262484588594373469423675807076043133405925502708); // vk.K[209].Y
        mul_input[2] = input[208];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[209] * input[208]
        mul_input[0] = uint256(15359623009843525224724255988879314294359103964657512910221942554534110258289); // vk.K[210].X
        mul_input[1] = uint256(6471185015218231676673230978114936069519808860469697462532674805523286511781); // vk.K[210].Y
        mul_input[2] = input[209];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[210] * input[209]
        mul_input[0] = uint256(11531075865890588080243881362723679334897214753520287103485436408130305125309); // vk.K[211].X
        mul_input[1] = uint256(21153058117021662343326898520667961988334371320798832094415417818668393332884); // vk.K[211].Y
        mul_input[2] = input[210];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[211] * input[210]
        mul_input[0] = uint256(5832440958347644142899386888705506973120950242849176562509487335278969112935); // vk.K[212].X
        mul_input[1] = uint256(20020460942958550181830070214154758096166146557255071622274024252792596765476); // vk.K[212].Y
        mul_input[2] = input[211];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[212] * input[211]
        mul_input[0] = uint256(5536923902793463458047315615653315538132125398719128242385740925559050281834); // vk.K[213].X
        mul_input[1] = uint256(7168836791888376256972302575950979505901300455521401733382779817251484948251); // vk.K[213].Y
        mul_input[2] = input[212];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[213] * input[212]
        mul_input[0] = uint256(21735244659755124983874054440387284515268379664575013528627973710267435331472); // vk.K[214].X
        mul_input[1] = uint256(17775866037266380996281054617484547113281304241226711289859497951184127865928); // vk.K[214].Y
        mul_input[2] = input[213];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[214] * input[213]
        mul_input[0] = uint256(17479976843656457739133619550938113708172485281743357026823834597645633725241); // vk.K[215].X
        mul_input[1] = uint256(12604315322461793095826955757434709548553097214261797223150973891476834163117); // vk.K[215].Y
        mul_input[2] = input[214];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[215] * input[214]
        mul_input[0] = uint256(1174050019116195307819232495257521089015453109478377511749891898462908426928); // vk.K[216].X
        mul_input[1] = uint256(11096499868614754953230717291111965683350363570151097669808046077137321399164); // vk.K[216].Y
        mul_input[2] = input[215];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[216] * input[215]
        mul_input[0] = uint256(9579538041075015030980134079324895302271712699567903743122961023115277535705); // vk.K[217].X
        mul_input[1] = uint256(5699453878216427966931847513929270771775450663331166538948352659804423141337); // vk.K[217].Y
        mul_input[2] = input[216];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[217] * input[216]
        mul_input[0] = uint256(14297326542897318698548516319931470566031936856981975925639766414749414701911); // vk.K[218].X
        mul_input[1] = uint256(10696901397431749508152489151124986838492241932525263567019461865467736211764); // vk.K[218].Y
        mul_input[2] = input[217];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[218] * input[217]
        mul_input[0] = uint256(2014602031942660344595881365935570999403741978560885009418893040110743017335); // vk.K[219].X
        mul_input[1] = uint256(14364215190872584321311040732659370414235999928772259658246760287775350976082); // vk.K[219].Y
        mul_input[2] = input[218];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[219] * input[218]
        mul_input[0] = uint256(413811557494388472202872594020590868185490665510154979998845966663774265084); // vk.K[220].X
        mul_input[1] = uint256(19590811758646450460810160349588515746179925190850749096500949470644809451104); // vk.K[220].Y
        mul_input[2] = input[219];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[220] * input[219]
        mul_input[0] = uint256(20961873807168711552303599073531008506807868747966528279794829987670995909907); // vk.K[221].X
        mul_input[1] = uint256(446242617609428046899454509637790261435714924403603722533983201308000454022); // vk.K[221].Y
        mul_input[2] = input[220];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[221] * input[220]
        mul_input[0] = uint256(14236919923542943620863605737225413684653691636405890454127591057535979507517); // vk.K[222].X
        mul_input[1] = uint256(8116263186144017120336413985373465104509152691581421152484966837182837185314); // vk.K[222].Y
        mul_input[2] = input[221];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[222] * input[221]
        mul_input[0] = uint256(19993406599471481958128855900227681601013412154884532315119170837883133068480); // vk.K[223].X
        mul_input[1] = uint256(18817632998892989596035830590675280397023936126442169332851191720236048907773); // vk.K[223].Y
        mul_input[2] = input[222];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[223] * input[222]
        mul_input[0] = uint256(13413609430364001926499392692133569422371611022348569770616455322077296427097); // vk.K[224].X
        mul_input[1] = uint256(7341125594451456473728019293527213847138328882829789904190620646010774547744); // vk.K[224].Y
        mul_input[2] = input[223];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[224] * input[223]
        mul_input[0] = uint256(1465375941870176311116801283661435768760545930518931500231633607796820509400); // vk.K[225].X
        mul_input[1] = uint256(4843109540558287207447484827651663217744813496101937042393527201233059979030); // vk.K[225].Y
        mul_input[2] = input[224];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[225] * input[224]
        mul_input[0] = uint256(13210756069130696276390045401442120113085496759560921233203760775657932823645); // vk.K[226].X
        mul_input[1] = uint256(7635320133612206751041299053444288837218271073950933777444777330298585624435); // vk.K[226].Y
        mul_input[2] = input[225];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[226] * input[225]
        mul_input[0] = uint256(2162128074947148020395245674379418625344506350011600910304730228829018680554); // vk.K[227].X
        mul_input[1] = uint256(19921763339573547409462450691796838100720159181863949692813503934343185370057); // vk.K[227].Y
        mul_input[2] = input[226];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[227] * input[226]
        mul_input[0] = uint256(17988926971601201100223581604721097760428624952080378441686660847979797339724); // vk.K[228].X
        mul_input[1] = uint256(18580905735644306955352181981562760586278157038194706273525483237254943960473); // vk.K[228].Y
        mul_input[2] = input[227];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[228] * input[227]
        mul_input[0] = uint256(18454443942789969845579137441615470303710916609921402968211397286648241592341); // vk.K[229].X
        mul_input[1] = uint256(20053537844129985726146236802308582788738758941832442430119932896590714254771); // vk.K[229].Y
        mul_input[2] = input[228];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[229] * input[228]
        mul_input[0] = uint256(11364041584991413634859279764203681377742478989412258453117989801973018667583); // vk.K[230].X
        mul_input[1] = uint256(6615796707646724461267841418150436605366606022422617118369234348118591110241); // vk.K[230].Y
        mul_input[2] = input[229];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[230] * input[229]
        mul_input[0] = uint256(10605098755086940902856215191924103432572246888892781585345032884780616112115); // vk.K[231].X
        mul_input[1] = uint256(10748935204926616403083595656186994957404745634867092363919771132737705977822); // vk.K[231].Y
        mul_input[2] = input[230];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[231] * input[230]
        mul_input[0] = uint256(14182311489334013718035515108373363794997987882096809860502928502235720411301); // vk.K[232].X
        mul_input[1] = uint256(11857750925531794228360383187456843407381768131028641113844019251093557496476); // vk.K[232].Y
        mul_input[2] = input[231];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[232] * input[231]
        mul_input[0] = uint256(15492892281604432810155655767691196129145409186689405899098849075933609873462); // vk.K[233].X
        mul_input[1] = uint256(12486816941136045996353124406419425792835345267258406573256978706719112365827); // vk.K[233].Y
        mul_input[2] = input[232];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[233] * input[232]
        mul_input[0] = uint256(15700244026902912979172410270032432332459023533325584960588420946169174731819); // vk.K[234].X
        mul_input[1] = uint256(3634971469403113446103071334614371625573090650931450430696952511449540324085); // vk.K[234].Y
        mul_input[2] = input[233];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[234] * input[233]
        mul_input[0] = uint256(7259274834751997976592253727788536837211517957988897235939917537191715039064); // vk.K[235].X
        mul_input[1] = uint256(13101606514816147044232576704269310689648266423965398349878573756261360457217); // vk.K[235].Y
        mul_input[2] = input[234];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[235] * input[234]
        mul_input[0] = uint256(11575883458696530971258809154046199152787935375646338439115138906469108298302); // vk.K[236].X
        mul_input[1] = uint256(7526333058670711931509410112970396129477924664056023906041783927667734597325); // vk.K[236].Y
        mul_input[2] = input[235];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[236] * input[235]
        mul_input[0] = uint256(5221729171994784039893672710409228079164823244606479996366478678390260070067); // vk.K[237].X
        mul_input[1] = uint256(7720681704020592861957448525456519433349990918876194571870577662984630035666); // vk.K[237].Y
        mul_input[2] = input[236];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[237] * input[236]
        mul_input[0] = uint256(4652113800270850104850606295245865836329998358843647903497399182451022421582); // vk.K[238].X
        mul_input[1] = uint256(21382079532395090744429252895401012017846447488569428242425998004891385156719); // vk.K[238].Y
        mul_input[2] = input[237];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[238] * input[237]
        mul_input[0] = uint256(1372618398505059545937777468251932523561453723876381343915120438425093120184); // vk.K[239].X
        mul_input[1] = uint256(20572163918612737856944758946700217128861902873810113001524070873876207743646); // vk.K[239].Y
        mul_input[2] = input[238];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[239] * input[238]
        mul_input[0] = uint256(18558081472662182501183060726255945261089517318027657784158422962810579486046); // vk.K[240].X
        mul_input[1] = uint256(15364552686312446017298311940418484952922685375332885829085721678720726986651); // vk.K[240].Y
        mul_input[2] = input[239];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[240] * input[239]
        mul_input[0] = uint256(1810693543076087353463830489620336646692391060262610291650466855788379203886); // vk.K[241].X
        mul_input[1] = uint256(10187549717528707589655833017640691515809439519871500119364176617554546703462); // vk.K[241].Y
        mul_input[2] = input[240];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[241] * input[240]
        mul_input[0] = uint256(5527057225542236112151520357571881576898164759174520860160419788929676029734); // vk.K[242].X
        mul_input[1] = uint256(16186019056947951257834829025983619383333603635017324352553622126961476007918); // vk.K[242].Y
        mul_input[2] = input[241];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[242] * input[241]
        mul_input[0] = uint256(9940524677365408969198206917023575080775795164783088787875882154129771772470); // vk.K[243].X
        mul_input[1] = uint256(15908892662193508756431028774667844358802161676342303941220927019117353411351); // vk.K[243].Y
        mul_input[2] = input[242];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[243] * input[242]
        mul_input[0] = uint256(16302307198682919866094126285204271363236682077778154430325814727227302350579); // vk.K[244].X
        mul_input[1] = uint256(9826998064910107685612132188269480443952009903446067963878379673057341637434); // vk.K[244].Y
        mul_input[2] = input[243];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[244] * input[243]
        mul_input[0] = uint256(19099399950451215778947862972287679065511008653527208192062941108702153962025); // vk.K[245].X
        mul_input[1] = uint256(3303010731842729723137383204862689312660438832033668582442933080392167797876); // vk.K[245].Y
        mul_input[2] = input[244];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[245] * input[244]
        mul_input[0] = uint256(2535098419157419485186754416564302793684185894162676049270588416298180078959); // vk.K[246].X
        mul_input[1] = uint256(8185111161056469952297391890750718046894941548957683916927719444583474186504); // vk.K[246].Y
        mul_input[2] = input[245];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[246] * input[245]
        mul_input[0] = uint256(18840004430909741426230725853448011484031488054209627240827514010613222962674); // vk.K[247].X
        mul_input[1] = uint256(8743469586233450606312221630401301434753250837134739864494578235584667697685); // vk.K[247].Y
        mul_input[2] = input[246];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[247] * input[246]
        mul_input[0] = uint256(16606064181748572325802204621211178790295501126022663151677243387050122623722); // vk.K[248].X
        mul_input[1] = uint256(4055875981780066567484591732656141478081652369960803479228873895371271224342); // vk.K[248].Y
        mul_input[2] = input[247];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[248] * input[247]
        mul_input[0] = uint256(8104310812480736686890497965003632623190873958863668342236294033060304584713); // vk.K[249].X
        mul_input[1] = uint256(8977819606655899845974548662997598579565406533785650565284631247938048318616); // vk.K[249].Y
        mul_input[2] = input[248];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[249] * input[248]
        mul_input[0] = uint256(21250384174791944922085884006229875185294851531913027832191446417661379897947); // vk.K[250].X
        mul_input[1] = uint256(19205045729340282200410293936920299267739547822251423867674064334211349633655); // vk.K[250].Y
        mul_input[2] = input[249];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[250] * input[249]
        mul_input[0] = uint256(15570953129879134150505648942679088318978332712749711600668935632501234926238); // vk.K[251].X
        mul_input[1] = uint256(1806555356731001925305114825151832609278349015696046835699757503603883277063); // vk.K[251].Y
        mul_input[2] = input[250];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[251] * input[250]
        mul_input[0] = uint256(19164614764757717682315682281211047597416858110632869016527707692848478943869); // vk.K[252].X
        mul_input[1] = uint256(19039499732668482532825280626525834357698948698303171562241528184298396949652); // vk.K[252].Y
        mul_input[2] = input[251];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[252] * input[251]
        mul_input[0] = uint256(5201551824525831808208914632350850808051267606480225783422575511304289011319); // vk.K[253].X
        mul_input[1] = uint256(10921153439538662005404111708380714088743482912737187927401567817704788680059); // vk.K[253].Y
        mul_input[2] = input[252];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[253] * input[252]
        mul_input[0] = uint256(19113986946759018487726746603683521264915960638586643773340006314187836221205); // vk.K[254].X
        mul_input[1] = uint256(16410831577719473090119417782054548826392911806105687653504677343994660137646); // vk.K[254].Y
        mul_input[2] = input[253];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[254] * input[253]
        mul_input[0] = uint256(3486909927669644567731894771663260149052960618607530266418918640667651218098); // vk.K[255].X
        mul_input[1] = uint256(1776455768741882103499348211117861827267593385435533121456074627030014637562); // vk.K[255].Y
        mul_input[2] = input[254];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[255] * input[254]
        mul_input[0] = uint256(2622701050612211559259098569253451976160160902950852063601459036939254961140); // vk.K[256].X
        mul_input[1] = uint256(2875350736391837156087939444269298369990100057986345780337939025377354572308); // vk.K[256].Y
        mul_input[2] = input[255];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[256] * input[255]
        mul_input[0] = uint256(18860939039718329727063239699970492810595242628046137151764318939346469870347); // vk.K[257].X
        mul_input[1] = uint256(15675146961294065576996617358055925822162283864668288305711376430511392247984); // vk.K[257].Y
        mul_input[2] = input[256];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[257] * input[256]
        mul_input[0] = uint256(15556573593114202627779324050925525069163130891096194822822219392019936940792); // vk.K[258].X
        mul_input[1] = uint256(6933906349402216125790473820142933261867572843943448965587564839716146200949); // vk.K[258].Y
        mul_input[2] = input[257];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[258] * input[257]
        mul_input[0] = uint256(8283545383403332642355255406928730425590100581150625055800682907758773382982); // vk.K[259].X
        mul_input[1] = uint256(19370651072859896542029083297203602921886608675987912730661280615392654374286); // vk.K[259].Y
        mul_input[2] = input[258];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[259] * input[258]
        mul_input[0] = uint256(19295034382863255197054104996004104386315924812272368519540599495409370291367); // vk.K[260].X
        mul_input[1] = uint256(9996920877405288265270875155036808812402144787673057928918992695439100682665); // vk.K[260].Y
        mul_input[2] = input[259];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[260] * input[259]
        mul_input[0] = uint256(19230728959634841168605572233596186403640820869479683536130360990377480244680); // vk.K[261].X
        mul_input[1] = uint256(9237239280203525320929943564017624716000433981188807888532753128762712844177); // vk.K[261].Y
        mul_input[2] = input[260];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[261] * input[260]
        mul_input[0] = uint256(2418618774593534852502684644838612466548958715500262496949053485126909286342); // vk.K[262].X
        mul_input[1] = uint256(17991535209239975567602718691350716798436088244595816248301967377221113853065); // vk.K[262].Y
        mul_input[2] = input[261];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[262] * input[261]
        mul_input[0] = uint256(13362070741099210977984927642556523994569187389154188151960046421699956431226); // vk.K[263].X
        mul_input[1] = uint256(4179959321721235719936474797757829294370330651630288478697743585850134330139); // vk.K[263].Y
        mul_input[2] = input[262];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[263] * input[262]
        mul_input[0] = uint256(21005398993167099697430094600856380112038960891554829003499545568242490912529); // vk.K[264].X
        mul_input[1] = uint256(8421614811113282088583698262473850184684390748213864860911183229550300548754); // vk.K[264].Y
        mul_input[2] = input[263];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[264] * input[263]
        mul_input[0] = uint256(5431287584115987944405123244941938071427385258736328628766382343729355794855); // vk.K[265].X
        mul_input[1] = uint256(17347638784698353945699020111104034056970863087237110095296974106269506721104); // vk.K[265].Y
        mul_input[2] = input[264];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[265] * input[264]
        mul_input[0] = uint256(20876701559315892963281674930135900357391017813870530759313230149301879198203); // vk.K[266].X
        mul_input[1] = uint256(14381939589036678648130164393493925621837824637728860475696083350030762539514); // vk.K[266].Y
        mul_input[2] = input[265];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[266] * input[265]
        mul_input[0] = uint256(1711641954351137284272693108747988623902129550211556786097809501028520029747); // vk.K[267].X
        mul_input[1] = uint256(12134647576986392530507884076794529491495038311188827394199723920144158651670); // vk.K[267].Y
        mul_input[2] = input[266];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[267] * input[266]
        mul_input[0] = uint256(7681005590894072672266802647824589711118886260717050747235315958075065807763); // vk.K[268].X
        mul_input[1] = uint256(21462784503756426721738511361517537316182334425343772374376627185284899575349); // vk.K[268].Y
        mul_input[2] = input[267];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[268] * input[267]
        mul_input[0] = uint256(16759086763710372392982939432531817960427566028258942667155521181444397760563); // vk.K[269].X
        mul_input[1] = uint256(14409943191206528487370619663894893039762435232786165744300368214833304218995); // vk.K[269].Y
        mul_input[2] = input[268];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[269] * input[268]
        mul_input[0] = uint256(4864351720422268860438083147099630265775493027641395751041593543452579030706); // vk.K[270].X
        mul_input[1] = uint256(8226840683074635038307334597277756397249192538257701009596504916387143130173); // vk.K[270].Y
        mul_input[2] = input[269];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[270] * input[269]
        mul_input[0] = uint256(20453952319984453842865870500024594125203842193075678760290414024820958856803); // vk.K[271].X
        mul_input[1] = uint256(9016683629820643051795965637761667803015791766841531119290742129927050645901); // vk.K[271].Y
        mul_input[2] = input[270];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[271] * input[270]
        mul_input[0] = uint256(15831344381328398213108554379622331983519971648241677822455430173365276970390); // vk.K[272].X
        mul_input[1] = uint256(6986439066562815649973199554799265087485827099354602841674523786519369332374); // vk.K[272].Y
        mul_input[2] = input[271];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[272] * input[271]
        mul_input[0] = uint256(17563353765004553396166108905269392774986372509611476781202847119092646308895); // vk.K[273].X
        mul_input[1] = uint256(17373955288870949119891169661710587775969276040554431811357318445982391183307); // vk.K[273].Y
        mul_input[2] = input[272];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[273] * input[272]
        mul_input[0] = uint256(4489729511873958739097637194331829776435859928400789598755676902336586152856); // vk.K[274].X
        mul_input[1] = uint256(3918145197082818440028851098067896822851370366900358177132579554317055400281); // vk.K[274].Y
        mul_input[2] = input[273];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[274] * input[273]
        mul_input[0] = uint256(11123340669402600520257308458378578290770135505129209069735076595943574913291); // vk.K[275].X
        mul_input[1] = uint256(5110459492430112192299818164806457771849782764224132791752129754405647565667); // vk.K[275].Y
        mul_input[2] = input[274];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[275] * input[274]
        mul_input[0] = uint256(8518351652190184134246086827751483423508884628426955561654821585497513388176); // vk.K[276].X
        mul_input[1] = uint256(11834650215251013776636936659037108759392808065076526280055445501981637742600); // vk.K[276].Y
        mul_input[2] = input[275];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[276] * input[275]
        mul_input[0] = uint256(7852333955903734505187631404398993905473038047473284839524403576312391394289); // vk.K[277].X
        mul_input[1] = uint256(14492703332277791413695471360813758008378128350888302119087673393699175983348); // vk.K[277].Y
        mul_input[2] = input[276];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[277] * input[276]
        mul_input[0] = uint256(6419913613527164122952189045196158459098858712104948199485201184400431617477); // vk.K[278].X
        mul_input[1] = uint256(18897908348750002016554459259586813680665840756073817217351304993584452559278); // vk.K[278].Y
        mul_input[2] = input[277];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[278] * input[277]
        mul_input[0] = uint256(19057267400947824800959842733648902497259424463766396595388543770289447745605); // vk.K[279].X
        mul_input[1] = uint256(17759442451270055592698768767500892744257135309391194306922058037478217048071); // vk.K[279].Y
        mul_input[2] = input[278];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[279] * input[278]
        mul_input[0] = uint256(1179057555826928697343012291509305904570981072336180574025423068757027927696); // vk.K[280].X
        mul_input[1] = uint256(5719543997538960487787839553417019237099260004726783926314024479140759374059); // vk.K[280].Y
        mul_input[2] = input[279];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[280] * input[279]
        mul_input[0] = uint256(14390622820887370958481874304617026887222179698818102587899819456652196638130); // vk.K[281].X
        mul_input[1] = uint256(9260918793946230972559274086310525363915639671756635412733756625793103069042); // vk.K[281].Y
        mul_input[2] = input[280];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[281] * input[280]
        mul_input[0] = uint256(11324693218802335714334654461167137776643548413261593992303532054799704537473); // vk.K[282].X
        mul_input[1] = uint256(5641725003073264530967466002388343857657214435679600429914217663400173212645); // vk.K[282].Y
        mul_input[2] = input[281];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[282] * input[281]
        mul_input[0] = uint256(7728107491538895922181785721408629789960591875782713446650262322063254554209); // vk.K[283].X
        mul_input[1] = uint256(3134872123943117837663018122696715502286184047614762206239542645955147398466); // vk.K[283].Y
        mul_input[2] = input[282];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[283] * input[282]
        mul_input[0] = uint256(11288621458865051171113317923028638426938917087294412197461123053558769616361); // vk.K[284].X
        mul_input[1] = uint256(7275525406000719959410116015595791903467870406435462954682524749886438097427); // vk.K[284].Y
        mul_input[2] = input[283];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[284] * input[283]
        mul_input[0] = uint256(16808534464418827677512427279808974403554499219965707563805222392936092200695); // vk.K[285].X
        mul_input[1] = uint256(17289934125615731072712155731531401407994334035408631891816181561001053200696); // vk.K[285].Y
        mul_input[2] = input[284];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[285] * input[284]
        mul_input[0] = uint256(16245050291469009520041292135003145878356603491110187518958998036954160323559); // vk.K[286].X
        mul_input[1] = uint256(19867159134161514067534884009216588476632323947373803793259199435081209365639); // vk.K[286].Y
        mul_input[2] = input[285];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[286] * input[285]
        mul_input[0] = uint256(7193479823351584367312192021792622986394270710735026259689915687337844985426); // vk.K[287].X
        mul_input[1] = uint256(6215432976900901857573235140028786670254867141047931058103633548056805780853); // vk.K[287].Y
        mul_input[2] = input[286];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[287] * input[286]
        mul_input[0] = uint256(15412415697774296998592361593781458390117322661789413175125438418615978858563); // vk.K[288].X
        mul_input[1] = uint256(14146313301084037721179481160720939212536759377288391894737461800536973323922); // vk.K[288].Y
        mul_input[2] = input[287];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[288] * input[287]
        mul_input[0] = uint256(12766426578654718597973974020949960529593861430799138015158284179198102458648); // vk.K[289].X
        mul_input[1] = uint256(1234841719965491591648128193675943675905002988519844481047085967870596642998); // vk.K[289].Y
        mul_input[2] = input[288];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[289] * input[288]
        mul_input[0] = uint256(18469963201485482375555732773037459007595874954727361496795931756715807439379); // vk.K[290].X
        mul_input[1] = uint256(87232453283682875917535431267610394405864409749673045206806857870019625251); // vk.K[290].Y
        mul_input[2] = input[289];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[290] * input[289]
        mul_input[0] = uint256(21073152515668961616495173172533206177593797143747732514279302915874846878919); // vk.K[291].X
        mul_input[1] = uint256(12685556451556729321412492259894713490911358371473203186711850146619670788199); // vk.K[291].Y
        mul_input[2] = input[290];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[291] * input[290]
        mul_input[0] = uint256(13407442971132886027177027774495754466008105296361329383234044510217379103520); // vk.K[292].X
        mul_input[1] = uint256(14832164293204864787410862633795275058550329597559927649856259354990535984158); // vk.K[292].Y
        mul_input[2] = input[291];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[292] * input[291]
        mul_input[0] = uint256(21205788788398963507850787166109791526654215417167624902738668890566177987808); // vk.K[293].X
        mul_input[1] = uint256(1833732902889605822555162649347413257626061947073016426450325879417152588313); // vk.K[293].Y
        mul_input[2] = input[292];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[293] * input[292]
        mul_input[0] = uint256(2698898259338748904293768127286739686779817566080509937325675510072267250137); // vk.K[294].X
        mul_input[1] = uint256(957033192861856153001823785178967270224914177005072900420641322239213353771); // vk.K[294].Y
        mul_input[2] = input[293];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[294] * input[293]
        mul_input[0] = uint256(7510860267615713645407216693892105070423974190918261940487499078979127679744); // vk.K[295].X
        mul_input[1] = uint256(8077637504385168145577387375616375131891045075463712410157439513164918925286); // vk.K[295].Y
        mul_input[2] = input[294];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[295] * input[294]
        mul_input[0] = uint256(15343001792478475592055032392527786358696918503014194616611645576933335471931); // vk.K[296].X
        mul_input[1] = uint256(6587984716626666741366027493102695952938352676015463001748497244157649164201); // vk.K[296].Y
        mul_input[2] = input[295];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[296] * input[295]
        mul_input[0] = uint256(14451649480898653969893353961772884309793928743850101910295058653840196956024); // vk.K[297].X
        mul_input[1] = uint256(15297022341901261754026831529275796170333535946519281245139467466497017829580); // vk.K[297].Y
        mul_input[2] = input[296];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[297] * input[296]
        mul_input[0] = uint256(16707133725463439790496966045752678476367666284783407649598074516461485448305); // vk.K[298].X
        mul_input[1] = uint256(14313484338730985329356501429006911827444327418350031111248996088620426218056); // vk.K[298].Y
        mul_input[2] = input[297];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[298] * input[297]
        mul_input[0] = uint256(3232433535974325752908834702684300397327791516458727225383907932327883667264); // vk.K[299].X
        mul_input[1] = uint256(8198758793129506896971431086420792457729086968206409702444991549405192467385); // vk.K[299].Y
        mul_input[2] = input[298];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[299] * input[298]
        mul_input[0] = uint256(1972799181231657537826866445907253076279508963279196408723875772761972138104); // vk.K[300].X
        mul_input[1] = uint256(3672927908682705365653751776818547806592619670480879226234948371387247542041); // vk.K[300].Y
        mul_input[2] = input[299];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[300] * input[299]
        mul_input[0] = uint256(8293027130284671248170851152942593707277812950948039088103471618562512411568); // vk.K[301].X
        mul_input[1] = uint256(16155714634581861266232490250810388927396378940698403419225379371152170601992); // vk.K[301].Y
        mul_input[2] = input[300];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[301] * input[300]
        mul_input[0] = uint256(1258701453513611307153292154266898171139129377871798587527689533667633175168); // vk.K[302].X
        mul_input[1] = uint256(11959709748605868196221648411510657027055114607919810334314889799988900731975); // vk.K[302].Y
        mul_input[2] = input[301];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[302] * input[301]
        mul_input[0] = uint256(1773434762514146957981425963953494483820483362902154054619841138403844950673); // vk.K[303].X
        mul_input[1] = uint256(4857081217037271515145895109955081317648301589427522198395101561580067829220); // vk.K[303].Y
        mul_input[2] = input[302];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[303] * input[302]
        mul_input[0] = uint256(17255725916294531305119331602601665754033129487157520731138154504341141654353); // vk.K[304].X
        mul_input[1] = uint256(12696470964743041436000947764226664423380484591339075640896113579745306048444); // vk.K[304].Y
        mul_input[2] = input[303];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[304] * input[303]
        mul_input[0] = uint256(2967790789756459935920770818415490693026206062378638560885080659826099191148); // vk.K[305].X
        mul_input[1] = uint256(19241700382465597905843778712453401606216978760542328685856857398486842284803); // vk.K[305].Y
        mul_input[2] = input[304];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[305] * input[304]
        mul_input[0] = uint256(5171239692838861386030687043892380353515703885813798680800542940815676577924); // vk.K[306].X
        mul_input[1] = uint256(10472905082150437168150272966138691566674456557945013387745914139592432956125); // vk.K[306].Y
        mul_input[2] = input[305];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[306] * input[305]
        mul_input[0] = uint256(19845772507683512267059123025336820533220958673570530942671395389231126588059); // vk.K[307].X
        mul_input[1] = uint256(6555854417407954740265938655756680108477126211771790940145282294808237601235); // vk.K[307].Y
        mul_input[2] = input[306];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[307] * input[306]
        mul_input[0] = uint256(10044625176662499207114521101475342538719102595375803743486002202519280277155); // vk.K[308].X
        mul_input[1] = uint256(3582703603922846998404050723383062644443886415644154535876019340957882951914); // vk.K[308].Y
        mul_input[2] = input[307];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[308] * input[307]
        mul_input[0] = uint256(11766310850059168944558106521879710414043675611059095192617292159801173647130); // vk.K[309].X
        mul_input[1] = uint256(7759835938515385007156912260137455915855662822816344454281413182041311938234); // vk.K[309].Y
        mul_input[2] = input[308];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[309] * input[308]
        mul_input[0] = uint256(5434130049595363874974173208319559017867292470883661424972530622430181906065); // vk.K[310].X
        mul_input[1] = uint256(6324383738609527115791906337245420011552584727644854143289060750210174960563); // vk.K[310].Y
        mul_input[2] = input[309];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[310] * input[309]
        mul_input[0] = uint256(13261658500507151155719531185168679512384769520334625784946509174212268091077); // vk.K[311].X
        mul_input[1] = uint256(6430480041493276071227804552352690021120652480576934494372590523883527220054); // vk.K[311].Y
        mul_input[2] = input[310];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[311] * input[310]
        mul_input[0] = uint256(1367943772703712215663169861403386697585036350409891831536717856600458683530); // vk.K[312].X
        mul_input[1] = uint256(16010403239431396595761673468668916814522719626388280116034448472224015042609); // vk.K[312].Y
        mul_input[2] = input[311];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[312] * input[311]
        mul_input[0] = uint256(16105015065110712367277973153875827969591007448963818472198400751483543355901); // vk.K[313].X
        mul_input[1] = uint256(9545997601395487020145901376875149046988769986810623977981419353092396500483); // vk.K[313].Y
        mul_input[2] = input[312];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[313] * input[312]
        mul_input[0] = uint256(6327398520155599958426735865806840502086424569522723024093367256260758078010); // vk.K[314].X
        mul_input[1] = uint256(15212470103898056044899448205807204036418450371528005773359225204943075378918); // vk.K[314].Y
        mul_input[2] = input[313];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[314] * input[313]
        mul_input[0] = uint256(11936953144877208349183677206181500631927825004348995889643271400962985136317); // vk.K[315].X
        mul_input[1] = uint256(13627014088018891563551278220723802170385593134250088208100977705582192273868); // vk.K[315].Y
        mul_input[2] = input[314];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[315] * input[314]
        mul_input[0] = uint256(4547293580660502051913612985154777811849465243830018571218006794219960294625); // vk.K[316].X
        mul_input[1] = uint256(2211801140627907205046678652283563358706148685668813117778407208317338999250); // vk.K[316].Y
        mul_input[2] = input[315];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[316] * input[315]
        mul_input[0] = uint256(4656504279797122407262689323749441861365396114044518421270140575557342338951); // vk.K[317].X
        mul_input[1] = uint256(21115742531878098052795793797059577046606456006361562273871918479375474095845); // vk.K[317].Y
        mul_input[2] = input[316];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[317] * input[316]
        mul_input[0] = uint256(3347602702712813942755129873426975083603591034969440679529823017208338493374); // vk.K[318].X
        mul_input[1] = uint256(21438284673096094968510525109053530621755167035673274577072219186426209758609); // vk.K[318].Y
        mul_input[2] = input[317];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[318] * input[317]
        mul_input[0] = uint256(10979950777873719748894599676250822209559839656970810551643124934218737768965); // vk.K[319].X
        mul_input[1] = uint256(4361228882252505877072434343538287641670588189903353466912861757955727270829); // vk.K[319].Y
        mul_input[2] = input[318];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[319] * input[318]
        mul_input[0] = uint256(18428052406897204633077290615306096850481193026145074995445932027856443720757); // vk.K[320].X
        mul_input[1] = uint256(18383546826920810464614484814108565667606364701582637336735064915220584874130); // vk.K[320].Y
        mul_input[2] = input[319];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[320] * input[319]
        mul_input[0] = uint256(13487503400340626529866116268728186628064253222882507247539085047712093129728); // vk.K[321].X
        mul_input[1] = uint256(4818682479641919635781609556979768754889102144854419674895535447662610149348); // vk.K[321].Y
        mul_input[2] = input[320];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[321] * input[320]
        mul_input[0] = uint256(1768966585680956217728863934053543122317471965382137590309649320548369298534); // vk.K[322].X
        mul_input[1] = uint256(13091743273471047497385975612351701346930527550484289084735144984969317691883); // vk.K[322].Y
        mul_input[2] = input[321];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[322] * input[321]
        mul_input[0] = uint256(7359745866003210483884815142296770766138337049650881323594507936563217019865); // vk.K[323].X
        mul_input[1] = uint256(1726836326542126389421503674426959715285674961207523180008740892900431935771); // vk.K[323].Y
        mul_input[2] = input[322];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[323] * input[322]
        mul_input[0] = uint256(14347506121049288316544606578937787614956584782128726333568496214790624384193); // vk.K[324].X
        mul_input[1] = uint256(12901759827148632893143084662983695932643432001337789314060035622798826744970); // vk.K[324].Y
        mul_input[2] = input[323];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[324] * input[323]
        mul_input[0] = uint256(724403240953806212498735529980221808418126275209686571661129996542205122394); // vk.K[325].X
        mul_input[1] = uint256(18735219760533936602678103299072381852244477846087643712866354539730230010559); // vk.K[325].Y
        mul_input[2] = input[324];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[325] * input[324]
        mul_input[0] = uint256(14625570720351581410540530096207412807853707630715247295864000597083990204770); // vk.K[326].X
        mul_input[1] = uint256(12868406765110893451090410542668907932811404747217460983326164017351805432652); // vk.K[326].Y
        mul_input[2] = input[325];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[326] * input[325]
        mul_input[0] = uint256(9351594246916985606336855052615869636158316221439890958533394882079513717989); // vk.K[327].X
        mul_input[1] = uint256(6581930212584087617418575234657119863250076736456060244039172501306609792409); // vk.K[327].Y
        mul_input[2] = input[326];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[327] * input[326]
        mul_input[0] = uint256(1014537782871669995936216363961939200541603570956446687977671956983127336472); // vk.K[328].X
        mul_input[1] = uint256(21842182767023069263462457707694669752849163446404590690441903133012727818591); // vk.K[328].Y
        mul_input[2] = input[327];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[328] * input[327]
        mul_input[0] = uint256(6012016585736777460804212115931716239714529969611106345064614576578585392127); // vk.K[329].X
        mul_input[1] = uint256(19524252113811102279020036400882213579196091732097380102281230186817000078290); // vk.K[329].Y
        mul_input[2] = input[328];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[329] * input[328]
        mul_input[0] = uint256(17460950740258429014349845003964196771035645232716944590184780275798236392262); // vk.K[330].X
        mul_input[1] = uint256(18218948536994030414243823631398539126956207023535404657345900371499697707016); // vk.K[330].Y
        mul_input[2] = input[329];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[330] * input[329]
        mul_input[0] = uint256(9626264761801721634557048025835061733553520785578946714214493089925747225041); // vk.K[331].X
        mul_input[1] = uint256(18330702853145942325003503458348891232768187499015924485551742170776078501738); // vk.K[331].Y
        mul_input[2] = input[330];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[331] * input[330]
        mul_input[0] = uint256(10478928849909331627961764049644375220726157058493955822620125977042814829870); // vk.K[332].X
        mul_input[1] = uint256(21670830378665157421772323295775689370165419607266207749422271810953107529516); // vk.K[332].Y
        mul_input[2] = input[331];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[332] * input[331]
        mul_input[0] = uint256(11248402950551015535457832147593858417237627341952701001489719066673593994284); // vk.K[333].X
        mul_input[1] = uint256(4093087734926341045987500935536953234304175021541043927283643311075741178130); // vk.K[333].Y
        mul_input[2] = input[332];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[333] * input[332]
        mul_input[0] = uint256(5867622529411370430895897704282839640206725383766869901552001004980203280653); // vk.K[334].X
        mul_input[1] = uint256(7870580322704918766744803313398813080298900047442149497081900242151886768517); // vk.K[334].Y
        mul_input[2] = input[333];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[334] * input[333]
        mul_input[0] = uint256(1620956598130324667044699249430252606085998430227965862249019411740252717764); // vk.K[335].X
        mul_input[1] = uint256(10833819936209485750978313716945813806960502169546265295547804083880975808586); // vk.K[335].Y
        mul_input[2] = input[334];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[335] * input[334]
        mul_input[0] = uint256(17640445788917582145074115246946255558792907340180916616467267027496283086138); // vk.K[336].X
        mul_input[1] = uint256(12027228486309715375001576528235050537444141970333918142112207119038136412144); // vk.K[336].Y
        mul_input[2] = input[335];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[336] * input[335]
        mul_input[0] = uint256(5024643357298019624536323123607636488220334992192343225404656473333209575298); // vk.K[337].X
        mul_input[1] = uint256(11344673070471298693100463616840250956466157257449823942400361756381728935345); // vk.K[337].Y
        mul_input[2] = input[336];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[337] * input[336]
        mul_input[0] = uint256(15684547239148314736464898798553060260814676511712699368948152086234924835426); // vk.K[338].X
        mul_input[1] = uint256(2156505656486233602943264875839982874374991924626932156253979761156957541152); // vk.K[338].Y
        mul_input[2] = input[337];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[338] * input[337]
        mul_input[0] = uint256(1643088630978399452665496348985625073209555322575243754517369808542436321141); // vk.K[339].X
        mul_input[1] = uint256(4579264903306629071870606551360103049519976551389162597919718175047951172272); // vk.K[339].Y
        mul_input[2] = input[338];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[339] * input[338]
        mul_input[0] = uint256(1324942669299849865300379416789820429061596229378419720351856659847121958476); // vk.K[340].X
        mul_input[1] = uint256(21051251407912896494761671258365941825577904092335079804423587344056257736561); // vk.K[340].Y
        mul_input[2] = input[339];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[340] * input[339]
        mul_input[0] = uint256(16222492707755805001469041702465556472207847070144886219515006430735505920501); // vk.K[341].X
        mul_input[1] = uint256(1667361888565132894220797723076971226134482813674414426236796250720287708052); // vk.K[341].Y
        mul_input[2] = input[340];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[341] * input[340]
        mul_input[0] = uint256(7495026821242372342898260889956780688744502923258073585400044191152626589216); // vk.K[342].X
        mul_input[1] = uint256(6946241017934910598549827817285658689396714233939473971399591901667954431026); // vk.K[342].Y
        mul_input[2] = input[341];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[342] * input[341]
        mul_input[0] = uint256(7861361132575490026155818654801635407441311719641934543786535210375029656055); // vk.K[343].X
        mul_input[1] = uint256(21215560206471852422886012625402868684838845572704832707666818833799971753252); // vk.K[343].Y
        mul_input[2] = input[342];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[343] * input[342]
        mul_input[0] = uint256(3423778570824648925216008225866483826920014123928580795525191806328680449963); // vk.K[344].X
        mul_input[1] = uint256(19773699433069414829024575709150886495718938035261715503401516102985365911265); // vk.K[344].Y
        mul_input[2] = input[343];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[344] * input[343]
        mul_input[0] = uint256(7263668429973987061734115024005592716941791887177844961664273588607199474857); // vk.K[345].X
        mul_input[1] = uint256(18773178269276236093424906146042564776495154288330951137490370542703951793684); // vk.K[345].Y
        mul_input[2] = input[344];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[345] * input[344]
        mul_input[0] = uint256(924561493713026258283973791717506566622673005969970106829255938493422625693); // vk.K[346].X
        mul_input[1] = uint256(1282434427089759379850645648216051911327464499099204666050502249673658214762); // vk.K[346].Y
        mul_input[2] = input[345];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[346] * input[345]
        mul_input[0] = uint256(14631176715053115283275995176535260987797541298289564143782468734774132319751); // vk.K[347].X
        mul_input[1] = uint256(1000910160504726566455715690804799690721215839846174567148648924728293147786); // vk.K[347].Y
        mul_input[2] = input[346];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[347] * input[346]
        mul_input[0] = uint256(1126735150415926250170098767962454658052426578105784149946218826455786386428); // vk.K[348].X
        mul_input[1] = uint256(1800516035461001155017841989386505895656785509651910084033725258617983114026); // vk.K[348].Y
        mul_input[2] = input[347];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[348] * input[347]
        mul_input[0] = uint256(18762848389474128441272872705331438023928540339105101736398157464136972862930); // vk.K[349].X
        mul_input[1] = uint256(3732530636240965213381264508136978495593395087477216969129308347656798234338); // vk.K[349].Y
        mul_input[2] = input[348];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[349] * input[348]
        mul_input[0] = uint256(19942319796991231458390027299257892414952891373604839507974712794983795566900); // vk.K[350].X
        mul_input[1] = uint256(10586105688301097726762209788299504046484831818197460417867185257698850915999); // vk.K[350].Y
        mul_input[2] = input[349];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[350] * input[349]
        mul_input[0] = uint256(3325204462542793868050530637677938848187278651355107852136581257353991385808); // vk.K[351].X
        mul_input[1] = uint256(245668687343520870053645953370136290845950437515412386737633644061487061513); // vk.K[351].Y
        mul_input[2] = input[350];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[351] * input[350]
        mul_input[0] = uint256(5260297120556836206545955861416448030920535902041937024933208089601478632821); // vk.K[352].X
        mul_input[1] = uint256(5437453243184308131546253085987434385150583361107135076411427355222674947644); // vk.K[352].Y
        mul_input[2] = input[351];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[352] * input[351]
        mul_input[0] = uint256(8581955904728741594791814430405561584593180054111988181012354675980101488535); // vk.K[353].X
        mul_input[1] = uint256(13083744728588860478840898982384028785845334167914622847850144874478558072859); // vk.K[353].Y
        mul_input[2] = input[352];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[353] * input[352]
        mul_input[0] = uint256(15928550964640258833138626111699462511196319624187887233378798585189036293914); // vk.K[354].X
        mul_input[1] = uint256(2535254601271656829406767280478264945589570936636575416441619875806282858894); // vk.K[354].Y
        mul_input[2] = input[353];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[354] * input[353]
        mul_input[0] = uint256(5159151224729714819378855397042517237739664812468427636669895113901651931396); // vk.K[355].X
        mul_input[1] = uint256(5890133306384330289364841584227754062278420919644342249450486276059919417721); // vk.K[355].Y
        mul_input[2] = input[354];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[355] * input[354]
        mul_input[0] = uint256(6718901535248277449173486159695668709402861888967762828428729659657189282827); // vk.K[356].X
        mul_input[1] = uint256(4416050717100908782664910784201256546224739605138546206603027388994541136293); // vk.K[356].Y
        mul_input[2] = input[355];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[356] * input[355]
        mul_input[0] = uint256(14414451533771350327427921820912382838526000278153043692337329950528651474981); // vk.K[357].X
        mul_input[1] = uint256(1857486452922323606869344125545475747363275520811797594967870899532085208931); // vk.K[357].Y
        mul_input[2] = input[356];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[357] * input[356]
        mul_input[0] = uint256(18130486750343769400899094873142487624855544593991558342822388123189961995524); // vk.K[358].X
        mul_input[1] = uint256(19869865667172190774501914470041242242255591375462176468562091062662552148826); // vk.K[358].Y
        mul_input[2] = input[357];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[358] * input[357]
        mul_input[0] = uint256(12685906671508714192611221901857625836560219513609940841060288557893006446243); // vk.K[359].X
        mul_input[1] = uint256(11925264539021969591780741943073973563595980214581209155176418385086349901429); // vk.K[359].Y
        mul_input[2] = input[358];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[359] * input[358]
        mul_input[0] = uint256(6142783800051740821825649748888455803416303178277923702164736881796208705552); // vk.K[360].X
        mul_input[1] = uint256(6772788820282527491468722697979988707451221511585825523307060752897823537577); // vk.K[360].Y
        mul_input[2] = input[359];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[360] * input[359]
        mul_input[0] = uint256(14778940091028961955334944808566795670029256520305258901677055130165416390800); // vk.K[361].X
        mul_input[1] = uint256(13970204475539292215388221093093754520830213797606184382162482951436290063102); // vk.K[361].Y
        mul_input[2] = input[360];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[361] * input[360]
        mul_input[0] = uint256(16587013353266310968274860289236373672563171325204457222372789421273666571022); // vk.K[362].X
        mul_input[1] = uint256(6119812279513850546945467944896186397518094242194306501710925818887641810847); // vk.K[362].Y
        mul_input[2] = input[361];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[362] * input[361]
        mul_input[0] = uint256(13310060521874706359376934575029005043699707510613477642407929534461145579922); // vk.K[363].X
        mul_input[1] = uint256(6891330296589943072159392555930644030813434939602709716935297584750709182291); // vk.K[363].Y
        mul_input[2] = input[362];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[363] * input[362]
        mul_input[0] = uint256(10840160528969903346250967513599429517011036373665201189374181800830860734404); // vk.K[364].X
        mul_input[1] = uint256(14832298225465314009219573442511568022768115075597531707335141446441700778210); // vk.K[364].Y
        mul_input[2] = input[363];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[364] * input[363]
        mul_input[0] = uint256(2591136576092780767113419033595550015649502373828542700514681052515721984233); // vk.K[365].X
        mul_input[1] = uint256(9537264293238992472208602320331161000883729840084917909241587541797469028144); // vk.K[365].Y
        mul_input[2] = input[364];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[365] * input[364]
        mul_input[0] = uint256(13456255131722930931372494075532408654207517666894077035675948128799454851383); // vk.K[366].X
        mul_input[1] = uint256(20112840021712503608140994190585442029350290229279740136810833975282263535740); // vk.K[366].Y
        mul_input[2] = input[365];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[366] * input[365]
        mul_input[0] = uint256(12929786626354014457638446802583242337275709693715699670166448355412374568051); // vk.K[367].X
        mul_input[1] = uint256(3403569230364171622813231870338190148265427631242387477650448941053185639320); // vk.K[367].Y
        mul_input[2] = input[366];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[367] * input[366]
        mul_input[0] = uint256(418998171897117770095222222760285671405360921091496195792794076909537255457); // vk.K[368].X
        mul_input[1] = uint256(12250123547545757715489469752437548270147514139527496075469586132809714638925); // vk.K[368].Y
        mul_input[2] = input[367];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[368] * input[367]
        mul_input[0] = uint256(130508027181020326380820833968863475054579739684240780487398648150408823161); // vk.K[369].X
        mul_input[1] = uint256(1209066952027491717137089659600355252357220730395636986229281327079926391703); // vk.K[369].Y
        mul_input[2] = input[368];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[369] * input[368]
        mul_input[0] = uint256(18109097672533893442959278614638824889144541504401631563332863709876251358077); // vk.K[370].X
        mul_input[1] = uint256(13298046599346943787427906184317797766531016153138360835940333273787134016797); // vk.K[370].Y
        mul_input[2] = input[369];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[370] * input[369]
        mul_input[0] = uint256(7605498455527369684358962277792518209988524631990482463533088977717401934115); // vk.K[371].X
        mul_input[1] = uint256(15382988788754469998936912745781224160235246800845553772665470816667783537281); // vk.K[371].Y
        mul_input[2] = input[370];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[371] * input[370]
        mul_input[0] = uint256(20179275462284135613633847364573252411796857975026764636916140218832901960494); // vk.K[372].X
        mul_input[1] = uint256(19764565578183350851742353159290514154793455036833875499306025895244187403341); // vk.K[372].Y
        mul_input[2] = input[371];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[372] * input[371]
        mul_input[0] = uint256(12284187377029416916618835936506959716269106818989980902265250341010619569275); // vk.K[373].X
        mul_input[1] = uint256(9527637957253174158433515226447462326125075698214230045868505836062241924951); // vk.K[373].Y
        mul_input[2] = input[372];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[373] * input[372]
        mul_input[0] = uint256(11571826962417552280849933004694757365480697947015352758077526795083782638956); // vk.K[374].X
        mul_input[1] = uint256(16530345802249711310522204491929525173472077926551025166136100769962460229052); // vk.K[374].Y
        mul_input[2] = input[373];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[374] * input[373]
        mul_input[0] = uint256(20478522697155064256728781593397649611402869183430192795740978161194201556901); // vk.K[375].X
        mul_input[1] = uint256(8898745794893267823678546448731071319522402714216841584586178161006850464403); // vk.K[375].Y
        mul_input[2] = input[374];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[375] * input[374]
        mul_input[0] = uint256(21401495889445646717014530853473269729054466557788507880127498467692271057705); // vk.K[376].X
        mul_input[1] = uint256(19197650192601345938038061693466542538416413721708716121747837307011272306392); // vk.K[376].Y
        mul_input[2] = input[375];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[376] * input[375]
        mul_input[0] = uint256(4317278960836020037385975184360473167530854992472676383793009799127364085203); // vk.K[377].X
        mul_input[1] = uint256(20992298216577562851615044058347517031122852897719356633226616756487020881675); // vk.K[377].Y
        mul_input[2] = input[376];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[377] * input[376]
        mul_input[0] = uint256(19878411204875269614826439015287165996640480564171642832307683667465233939958); // vk.K[378].X
        mul_input[1] = uint256(18144657320797259567475806289167707741823793972233289722966561510407902723996); // vk.K[378].Y
        mul_input[2] = input[377];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[378] * input[377]
        mul_input[0] = uint256(3304919474067427173752480478167412209688126111864954543539555369332297815602); // vk.K[379].X
        mul_input[1] = uint256(21160740348147202517436234785195530234640731780954985000496130588733049530401); // vk.K[379].Y
        mul_input[2] = input[378];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[379] * input[378]
        mul_input[0] = uint256(14907369285239767992749055501903104823218330650823103846774883911288314119582); // vk.K[380].X
        mul_input[1] = uint256(3707979227944845693064503779338759101502686839681857883742090545495255691993); // vk.K[380].Y
        mul_input[2] = input[379];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[380] * input[379]
        mul_input[0] = uint256(16272377214530821792526794618173180567229145144179289502538528115611173282036); // vk.K[381].X
        mul_input[1] = uint256(9190255598913916066413656156300346572343079860600796654850709243320012937008); // vk.K[381].Y
        mul_input[2] = input[380];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[381] * input[380]
        mul_input[0] = uint256(7525008452294240177308931199580972708827365324803751016949651431676276164); // vk.K[382].X
        mul_input[1] = uint256(2194076766678299095822408153407548761881064570514539610249504408469214701091); // vk.K[382].Y
        mul_input[2] = input[381];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[382] * input[381]
        mul_input[0] = uint256(8194533770223782686970638397670946705087159329961809281440980613362675809409); // vk.K[383].X
        mul_input[1] = uint256(2076953277743139992044237393594016450248545465414905581308096394963211569256); // vk.K[383].Y
        mul_input[2] = input[382];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[383] * input[382]
        mul_input[0] = uint256(6478460175534939060470194368560194075019282100223925114236672123927686727914); // vk.K[384].X
        mul_input[1] = uint256(18216477957730323932944955908173771586012177421568035033230733889068124255186); // vk.K[384].Y
        mul_input[2] = input[383];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[384] * input[383]
        mul_input[0] = uint256(16851189402008316672892381601411707676771003359716541836215477144085249106034); // vk.K[385].X
        mul_input[1] = uint256(18918321176111578184801994642156924910962403502250687418873900801450394617930); // vk.K[385].Y
        mul_input[2] = input[384];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[385] * input[384]
        mul_input[0] = uint256(12206081714016059611684664999486850018651812754763096939831467807400413837949); // vk.K[386].X
        mul_input[1] = uint256(10033143641670494583728319443188257916319184934054604615140471978647398333174); // vk.K[386].Y
        mul_input[2] = input[385];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[386] * input[385]
        mul_input[0] = uint256(19146946735639937187352196134811288207026491408418406103147879222678031186998); // vk.K[387].X
        mul_input[1] = uint256(1400438309539949641130486020522545788216245049226828483527399069446387367025); // vk.K[387].Y
        mul_input[2] = input[386];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[387] * input[386]
        mul_input[0] = uint256(3278819158365392881562728818000255548868298617321335734680815270225294317922); // vk.K[388].X
        mul_input[1] = uint256(21207479650695508013067011106020152342787551810649742572982155846540471907435); // vk.K[388].Y
        mul_input[2] = input[387];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[388] * input[387]
        mul_input[0] = uint256(2225802026484892129679380350785536979478941646575983743099708944257468720788); // vk.K[389].X
        mul_input[1] = uint256(9870819295033535932925853804845298916175316452671118012659033044434384135924); // vk.K[389].Y
        mul_input[2] = input[388];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[389] * input[388]
        mul_input[0] = uint256(13884923952726865285843932556882748483191931025017856309866238482229156879290); // vk.K[390].X
        mul_input[1] = uint256(15076269050386096112225574275806581973959128811295230960762960534558059455142); // vk.K[390].Y
        mul_input[2] = input[389];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[390] * input[389]
        mul_input[0] = uint256(6279775900887150765433169529790455584625599611827641244280374454774782774719); // vk.K[391].X
        mul_input[1] = uint256(7991246288202278170918908586090225792578203185489733114512510855848914433567); // vk.K[391].Y
        mul_input[2] = input[390];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[391] * input[390]
        mul_input[0] = uint256(18342094357164710938579173311955913429825648884402702818662751652498379477890); // vk.K[392].X
        mul_input[1] = uint256(19611580184719109276798403234201149430748089267308491385366683956423020157286); // vk.K[392].Y
        mul_input[2] = input[391];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[392] * input[391]
        mul_input[0] = uint256(14156658233722353043388860685186571987756849046151427461676751009427982142316); // vk.K[393].X
        mul_input[1] = uint256(16879688369789727296589855312680279621401548808052161264083875828555133615774); // vk.K[393].Y
        mul_input[2] = input[392];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[393] * input[392]
        mul_input[0] = uint256(21069031615780808111524938245248194948074722854940187491249639211812066333289); // vk.K[394].X
        mul_input[1] = uint256(11851788708104165642427636673654564664976544749540627745801303894167525797530); // vk.K[394].Y
        mul_input[2] = input[393];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[394] * input[393]
        mul_input[0] = uint256(2455303279144277735456943259255253578005764292971117765006972371324997845683); // vk.K[395].X
        mul_input[1] = uint256(20020870464208158640521419017876852156355534343455989525312273422851619349471); // vk.K[395].Y
        mul_input[2] = input[394];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[395] * input[394]
        mul_input[0] = uint256(16948998060599610563605080717417103091648751897122754569644571814629236455153); // vk.K[396].X
        mul_input[1] = uint256(9376308018254795679339864362038445110085851565712489726969024402455583577391); // vk.K[396].Y
        mul_input[2] = input[395];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[396] * input[395]
        mul_input[0] = uint256(21654134413209848344005980838930857413173847408655286186983068816537099427261); // vk.K[397].X
        mul_input[1] = uint256(10238300165081650229468924191462755393476500588128286814275538807969666612831); // vk.K[397].Y
        mul_input[2] = input[396];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[397] * input[396]
        mul_input[0] = uint256(8383045536239774542888872573212741990902367961903103022461394268943011252511); // vk.K[398].X
        mul_input[1] = uint256(19327700813626409816730776225933521500520385464950333719599994356480048970992); // vk.K[398].Y
        mul_input[2] = input[397];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[398] * input[397]
        mul_input[0] = uint256(2477616592001015116287780642396725164993820641738575156586148923873926132456); // vk.K[399].X
        mul_input[1] = uint256(21712209682305322784149062528110706767603754145613382797220965398320948898700); // vk.K[399].Y
        mul_input[2] = input[398];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[399] * input[398]
        mul_input[0] = uint256(12758852886114036447476132629457619728047535142271160429692847777399922983751); // vk.K[400].X
        mul_input[1] = uint256(3834567658623356151816859286464272711456908991036534472849548601015428298934); // vk.K[400].Y
        mul_input[2] = input[399];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[400] * input[399]
        mul_input[0] = uint256(13908307005238623577279924476302167622328341340058243033791701750507846101262); // vk.K[401].X
        mul_input[1] = uint256(10380913213113905270576373048444940866259580503477012523004869182011586323541); // vk.K[401].Y
        mul_input[2] = input[400];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[401] * input[400]
        mul_input[0] = uint256(13027600532567176304148047122576848343048870197110124626975405165518747292990); // vk.K[402].X
        mul_input[1] = uint256(14670524401393232371484134300856685981329327974703122155089314107347511237914); // vk.K[402].Y
        mul_input[2] = input[401];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[402] * input[401]
        mul_input[0] = uint256(16360626477744285131182426108003321938360915956074574490480716343733175019870); // vk.K[403].X
        mul_input[1] = uint256(9134288878552238263087673071844626333314971292098888190890201884923007792275); // vk.K[403].Y
        mul_input[2] = input[402];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[403] * input[402]
        mul_input[0] = uint256(16639651914699727523123938300651810706667594152626348418565539078746879117363); // vk.K[404].X
        mul_input[1] = uint256(16018101708053621427845760859912962120864903037927501982763281930137291885890); // vk.K[404].Y
        mul_input[2] = input[403];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[404] * input[403]
        mul_input[0] = uint256(14516626822565430425305790422952895745777497220770285980116569163673315065908); // vk.K[405].X
        mul_input[1] = uint256(4665381458729837985155210691322140192786071354876095255120843478830490133265); // vk.K[405].Y
        mul_input[2] = input[404];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[405] * input[404]
        mul_input[0] = uint256(5118780832391879778319277691871775979732600814843021951777104408357529398427); // vk.K[406].X
        mul_input[1] = uint256(14381787277732526025959241924059209737875661141935739766787832850851200208714); // vk.K[406].Y
        mul_input[2] = input[405];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[406] * input[405]
        mul_input[0] = uint256(18064394224571869057481191252912470985652838672028425773540014781929905363752); // vk.K[407].X
        mul_input[1] = uint256(14140039729555085119537004658061455408603474207913361605185266043407611246020); // vk.K[407].Y
        mul_input[2] = input[406];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[407] * input[406]
        mul_input[0] = uint256(7395028822374330433308721220541164144531017957411970743318024186676476059765); // vk.K[408].X
        mul_input[1] = uint256(13790118379982649860567245332550719886280028138560153938952203961366843354561); // vk.K[408].Y
        mul_input[2] = input[407];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[408] * input[407]
        mul_input[0] = uint256(1519161905653976834615783498546402122281349158154794098894842661847667563652); // vk.K[409].X
        mul_input[1] = uint256(11124516534758438747579431250481900834191406867770565311993153741922670934175); // vk.K[409].Y
        mul_input[2] = input[408];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[409] * input[408]
        mul_input[0] = uint256(7363199638372293838916082450721959167784113295949667204631918486424066984655); // vk.K[410].X
        mul_input[1] = uint256(5317924787817758192200435830524743926834725340010327886723338929553449977942); // vk.K[410].Y
        mul_input[2] = input[409];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[410] * input[409]
        mul_input[0] = uint256(2297402087580837917313070009447747418905305968707467897729995440490937186036); // vk.K[411].X
        mul_input[1] = uint256(8961822378501777572821036849763954953702616868913875564726576382448014038326); // vk.K[411].Y
        mul_input[2] = input[410];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[411] * input[410]
        mul_input[0] = uint256(347662958408141657222207612048855401826105458131112020706102347758499046690); // vk.K[412].X
        mul_input[1] = uint256(20941377446422773765928031109801582040093741743880310549231011400611150283184); // vk.K[412].Y
        mul_input[2] = input[411];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[412] * input[411]
        mul_input[0] = uint256(11763700109724462998008329645942179197333875799858753909166652760990615465425); // vk.K[413].X
        mul_input[1] = uint256(15244942550050597968591287393427248045642690310041097123793315035982134836754); // vk.K[413].Y
        mul_input[2] = input[412];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[413] * input[412]
        mul_input[0] = uint256(13840586868224433057867626424113462608899834854898511421665813607387439635635); // vk.K[414].X
        mul_input[1] = uint256(9876081096897682701415019355719186727502033944431184176741046702285343870463); // vk.K[414].Y
        mul_input[2] = input[413];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[414] * input[413]
        mul_input[0] = uint256(9688196672056921679687590139077199427903606757537503384481972838299554845504); // vk.K[415].X
        mul_input[1] = uint256(3327530691221965984169293505687692696454739097661976560934095390549403790502); // vk.K[415].Y
        mul_input[2] = input[414];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[415] * input[414]
        mul_input[0] = uint256(14254228090941407931969249577625517098508234085868148140983052700670476779061); // vk.K[416].X
        mul_input[1] = uint256(307214896010595734434532313675311998044351836424949250246029404928382146428); // vk.K[416].Y
        mul_input[2] = input[415];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[416] * input[415]
        mul_input[0] = uint256(9740124281020007527593071806234318810907061840057495699188748960662905078496); // vk.K[417].X
        mul_input[1] = uint256(4761702645571421546061256479060133580800568443977217509840176521323846098152); // vk.K[417].Y
        mul_input[2] = input[416];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[417] * input[416]
        mul_input[0] = uint256(17765276733711607242045820925016435728439288264311597318559974504420442767927); // vk.K[418].X
        mul_input[1] = uint256(2418136137306753497716948756748383699434480587014258790543778040542839136624); // vk.K[418].Y
        mul_input[2] = input[417];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[418] * input[417]
        mul_input[0] = uint256(7999601886138419241102194515897094423641430058803887182934244433997783904905); // vk.K[419].X
        mul_input[1] = uint256(20734161293390056369936558710404777662859848823832301143418459893694970257162); // vk.K[419].Y
        mul_input[2] = input[418];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[419] * input[418]
        mul_input[0] = uint256(12086516068447612716558202711861353748867102872919715709673581934339811877497); // vk.K[420].X
        mul_input[1] = uint256(15807874924878042188955357984521843254270180167382434504641894541942459538849); // vk.K[420].Y
        mul_input[2] = input[419];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[420] * input[419]
        mul_input[0] = uint256(8543709949365849145947901496717333184361813596496878241990328419318029686979); // vk.K[421].X
        mul_input[1] = uint256(11258348942194576726169048436224174599541722282690991964263072395401737082916); // vk.K[421].Y
        mul_input[2] = input[420];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[421] * input[420]
        mul_input[0] = uint256(13076464764578988480113689551927654172146705566965035183831749705432674270099); // vk.K[422].X
        mul_input[1] = uint256(21740184172854550776253775749544554895329201934311617759137562498215940410514); // vk.K[422].Y
        mul_input[2] = input[421];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[422] * input[421]
        mul_input[0] = uint256(13204595319027432478188506595670314997738318737706610210579235800806231514443); // vk.K[423].X
        mul_input[1] = uint256(12460169606055465348372292148668608939464798947432203898544664148855579959530); // vk.K[423].Y
        mul_input[2] = input[422];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[423] * input[422]
        mul_input[0] = uint256(19971197936432463643803547134126081879659496002187868578869143905649262001888); // vk.K[424].X
        mul_input[1] = uint256(10475971903262568682159790030767363352591722182569404883277601915896808085278); // vk.K[424].Y
        mul_input[2] = input[423];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[424] * input[423]
        mul_input[0] = uint256(19463988416691584292028539230909189756263274776315020840100179840041981206506); // vk.K[425].X
        mul_input[1] = uint256(10627344787895098011361327835450810054193374690166209758950645376886513616134); // vk.K[425].Y
        mul_input[2] = input[424];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[425] * input[424]
        mul_input[0] = uint256(107621182765753508815064114851888934490254145959003348946734091101826002620); // vk.K[426].X
        mul_input[1] = uint256(15615176119263133769629951156500227333025222251273394766425704788606138842310); // vk.K[426].Y
        mul_input[2] = input[425];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[426] * input[425]
        mul_input[0] = uint256(4906496162629050269973856005815592477720165573589066113698892369285637375597); // vk.K[427].X
        mul_input[1] = uint256(3060839506463274326927657925370942426071455019711525078117513942896648054901); // vk.K[427].Y
        mul_input[2] = input[426];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[427] * input[426]
        mul_input[0] = uint256(5878667770144575810809505912723878273248169870273802365438876216307295119041); // vk.K[428].X
        mul_input[1] = uint256(7892846586438182461039497270242120256123614928182510430354673019839341362839); // vk.K[428].Y
        mul_input[2] = input[427];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[428] * input[427]
        mul_input[0] = uint256(8581162142584986029020592045398651423206026748216680131101834958239349502013); // vk.K[429].X
        mul_input[1] = uint256(15675344452286882644262598158492694117487083429941658000762371300378907155931); // vk.K[429].Y
        mul_input[2] = input[428];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[429] * input[428]
        mul_input[0] = uint256(18541112785817350541101442093120409274757590004757771137832488548229443615708); // vk.K[430].X
        mul_input[1] = uint256(16879762318912298069958818795439921122886350146871357544270629852545338185334); // vk.K[430].Y
        mul_input[2] = input[429];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[430] * input[429]
        mul_input[0] = uint256(6638821354799387413669561451865834354460090528807554176907424149736133535336); // vk.K[431].X
        mul_input[1] = uint256(18240632669004283258181080545078991803873940620330313367922396319295771129482); // vk.K[431].Y
        mul_input[2] = input[430];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[431] * input[430]
        mul_input[0] = uint256(8897309365381083223231336411920627512301394045030920988403151069782220773456); // vk.K[432].X
        mul_input[1] = uint256(1722736877377128436956421406941948722274193436225727136517114287547207177619); // vk.K[432].Y
        mul_input[2] = input[431];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[432] * input[431]
        mul_input[0] = uint256(9113360106699839336455889619742656918930900429079137400929751478301982109557); // vk.K[433].X
        mul_input[1] = uint256(12040217129484668593864048842291028304561813600441974120616149159075921898050); // vk.K[433].Y
        mul_input[2] = input[432];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[433] * input[432]
        mul_input[0] = uint256(8056666038353733502184575338326361207796325679624056109366231379488725668582); // vk.K[434].X
        mul_input[1] = uint256(3840437849226106987965932606889030472513952127989432961643669782337675384055); // vk.K[434].Y
        mul_input[2] = input[433];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[434] * input[433]
        mul_input[0] = uint256(16023353893080327683508301230863089021511778767799500641358569951739644367230); // vk.K[435].X
        mul_input[1] = uint256(5106732096596920124505922623285265059656446322503172531085181956060275440046); // vk.K[435].Y
        mul_input[2] = input[434];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[435] * input[434]
        mul_input[0] = uint256(16701408665744487170895613619512364474391615244661059579296271254049078095931); // vk.K[436].X
        mul_input[1] = uint256(19969738361758807437910889421318567876664000480417310966923492830156705467091); // vk.K[436].Y
        mul_input[2] = input[435];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[436] * input[435]
        mul_input[0] = uint256(16997097857497566808468289485849768288422227147679361792516739982395335100885); // vk.K[437].X
        mul_input[1] = uint256(3110039037006892896778036229507029315343289006690952350560133508766756641843); // vk.K[437].Y
        mul_input[2] = input[436];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[437] * input[436]
        mul_input[0] = uint256(17779356667051775939079127532742570674191407732303130144379525043454424034524); // vk.K[438].X
        mul_input[1] = uint256(18897116801104354950409825936653206294398885346659189175265842931583426912381); // vk.K[438].Y
        mul_input[2] = input[437];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[438] * input[437]
        mul_input[0] = uint256(3986601717617435699366523313860356302408540223598393674599949169662426073859); // vk.K[439].X
        mul_input[1] = uint256(17578701779508158154933927435327446795596177907740722034522680575119186953565); // vk.K[439].Y
        mul_input[2] = input[438];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[439] * input[438]
        mul_input[0] = uint256(9164633057753463287750410503828333715141257201512183955276905284176834925427); // vk.K[440].X
        mul_input[1] = uint256(12458890422030152149860355778952467578706232849294110025969655408894699101751); // vk.K[440].Y
        mul_input[2] = input[439];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[440] * input[439]
        mul_input[0] = uint256(5194619652313959482480016453362651185834650450121762700805175057011788432280); // vk.K[441].X
        mul_input[1] = uint256(19103587424311754422920476658903718026029730830961416029781561651143862048735); // vk.K[441].Y
        mul_input[2] = input[440];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[441] * input[440]
        mul_input[0] = uint256(10241677907608563050194151567541394764281002028750909090510970036642678833251); // vk.K[442].X
        mul_input[1] = uint256(9022746066698191444606810393616355342412384755467785483218932607223929334906); // vk.K[442].Y
        mul_input[2] = input[441];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[442] * input[441]
        mul_input[0] = uint256(13742921517551842260669285609140656751809265803700126495769989394264393953852); // vk.K[443].X
        mul_input[1] = uint256(5470000744318726313802231007020655805869085155118962333783566838456885768824); // vk.K[443].Y
        mul_input[2] = input[442];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[443] * input[442]
        mul_input[0] = uint256(1711458594010326860150540328528134925063950942380032263033793537926825245673); // vk.K[444].X
        mul_input[1] = uint256(20569929791402230497620235465877812915137503034827352491608491658177075719697); // vk.K[444].Y
        mul_input[2] = input[443];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[444] * input[443]
        mul_input[0] = uint256(19261408704357975500496421971221458820951668768011058017493795631094325202262); // vk.K[445].X
        mul_input[1] = uint256(2626998208500796491271816211762959815780392017032550509760965769697832264648); // vk.K[445].Y
        mul_input[2] = input[444];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[445] * input[444]
        mul_input[0] = uint256(8996976485044262105438213989854024750475137633405460534826815071837779146676); // vk.K[446].X
        mul_input[1] = uint256(20712481988273136906451476075124575903782898056280016619779131828934464478325); // vk.K[446].Y
        mul_input[2] = input[445];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[446] * input[445]
        mul_input[0] = uint256(6202915512696023346205046972876697705759417970699957151006878736152944162690); // vk.K[447].X
        mul_input[1] = uint256(3421895433407519776744815678395391381198722180155529638192605005899306075406); // vk.K[447].Y
        mul_input[2] = input[446];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[447] * input[446]
        mul_input[0] = uint256(12282351084206433752608279020029320688446390465997452885248089791553541582354); // vk.K[448].X
        mul_input[1] = uint256(20097256959096631740265873834432434727622156177396285647660566744733374808996); // vk.K[448].Y
        mul_input[2] = input[447];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[448] * input[447]
        mul_input[0] = uint256(17823787924298938362847141989864470640704666105621203772354328346072994910828); // vk.K[449].X
        mul_input[1] = uint256(6172515174076863172387982112129273165628079167671707007948128621150938017360); // vk.K[449].Y
        mul_input[2] = input[448];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[449] * input[448]
        mul_input[0] = uint256(806100364102721537754436541617557104459114847513082445846920693722112715353); // vk.K[450].X
        mul_input[1] = uint256(5960905146120351317139374643168931594660069899361108748528307704794475008518); // vk.K[450].Y
        mul_input[2] = input[449];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[450] * input[449]
        mul_input[0] = uint256(11525526407833150987627931192692537271669316953175548737454376603264535156232); // vk.K[451].X
        mul_input[1] = uint256(2732048065821727517336239148320585214579444126790794359172200557039911252136); // vk.K[451].Y
        mul_input[2] = input[450];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[451] * input[450]
        mul_input[0] = uint256(20652883638358213497633820256236046032708079270379258032439426794798997980863); // vk.K[452].X
        mul_input[1] = uint256(10997417372671686029154200663658715942654086437033050260426812234898697342480); // vk.K[452].Y
        mul_input[2] = input[451];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[452] * input[451]
        mul_input[0] = uint256(1416705722219128530957572480825504739299551892324154591841978986477040201674); // vk.K[453].X
        mul_input[1] = uint256(5966211659620431607987770150811354197910515064457232805020001707215362669602); // vk.K[453].Y
        mul_input[2] = input[452];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[453] * input[452]
        mul_input[0] = uint256(15546468795009357211372396453083823252336569015665530447562473726035304752952); // vk.K[454].X
        mul_input[1] = uint256(15373297383879557538063431233517848718239965443141968667961692850063399894143); // vk.K[454].Y
        mul_input[2] = input[453];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[454] * input[453]
        mul_input[0] = uint256(14439702263812017408480189096026148564628162483615563289346833169315450919123); // vk.K[455].X
        mul_input[1] = uint256(15841104563336411125923527636386991600398676500467940454826841369371887361846); // vk.K[455].Y
        mul_input[2] = input[454];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[455] * input[454]
        mul_input[0] = uint256(8111042791012719980072347782113867289895221436551092831826896175842864715616); // vk.K[456].X
        mul_input[1] = uint256(1065003671680357289390515042129506082521554889046607662172584009938885784746); // vk.K[456].Y
        mul_input[2] = input[455];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[456] * input[455]
        mul_input[0] = uint256(20495973558707771419357487154207401658911864595285918069655075803060562858221); // vk.K[457].X
        mul_input[1] = uint256(8411453293179779677310405687634161498693626345442601724318560571315711414982); // vk.K[457].Y
        mul_input[2] = input[456];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[457] * input[456]
        mul_input[0] = uint256(7720595323481628252703742828503553108437000796025757848405204683176875047096); // vk.K[458].X
        mul_input[1] = uint256(9140019331366216067694383791264497155324453700325393074647672917976422645377); // vk.K[458].Y
        mul_input[2] = input[457];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[458] * input[457]
        mul_input[0] = uint256(16312760158811277542774658348018926089824729597636754364392525346729050847113); // vk.K[459].X
        mul_input[1] = uint256(12895131794958210318803653651110849909899750699536760075709444683903505233035); // vk.K[459].Y
        mul_input[2] = input[458];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[459] * input[458]
        mul_input[0] = uint256(15441454487408281608384491897613433090090802742993087989543985691104854065199); // vk.K[460].X
        mul_input[1] = uint256(5897677545335012793961963065883146289823192478437965395750753783921553971567); // vk.K[460].Y
        mul_input[2] = input[459];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[460] * input[459]
        mul_input[0] = uint256(8236901096484822283924365638181040057109978878105203958961574651851403484850); // vk.K[461].X
        mul_input[1] = uint256(15000474459025896874113587383350207580097022127476484134468920949618399949698); // vk.K[461].Y
        mul_input[2] = input[460];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[461] * input[460]
        mul_input[0] = uint256(21550108570153944882102256111718474263470941952885461344584556838521506881778); // vk.K[462].X
        mul_input[1] = uint256(21016692383222257835530661368729874263501506286819667707206418163255578568099); // vk.K[462].Y
        mul_input[2] = input[461];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[462] * input[461]
        mul_input[0] = uint256(3588460768403607874950317549773560435023784948712895388304153305908420296157); // vk.K[463].X
        mul_input[1] = uint256(11031827384986007394490317218292818276460396272039627410428712863777915527261); // vk.K[463].Y
        mul_input[2] = input[462];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[463] * input[462]
        mul_input[0] = uint256(13084555115954424534623467603777131349299946505735465898593565337449349321323); // vk.K[464].X
        mul_input[1] = uint256(2595710887666040147215755712481666645743043291174789262931778278742166562622); // vk.K[464].Y
        mul_input[2] = input[463];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[464] * input[463]
        mul_input[0] = uint256(21023615005991483494384722239188772887890819271872294978088953994404817068271); // vk.K[465].X
        mul_input[1] = uint256(21681001842392966193033826909762286108538550393022049498752211337491668545196); // vk.K[465].Y
        mul_input[2] = input[464];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[465] * input[464]
        mul_input[0] = uint256(8421447527260637002166610649784044176162260311821066858808889994817920004630); // vk.K[466].X
        mul_input[1] = uint256(8888539475330320609787212299731490480979330583286084721299987574894501919832); // vk.K[466].Y
        mul_input[2] = input[465];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[466] * input[465]
        mul_input[0] = uint256(14511755848720011637626829248502783881529196543218831212215683983582017430232); // vk.K[467].X
        mul_input[1] = uint256(6276204739799008061403519190247747740780820116128857217367826477544063268986); // vk.K[467].Y
        mul_input[2] = input[466];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[467] * input[466]
        mul_input[0] = uint256(6641609742426136299372245326507260697020404201953091178733627760085735965518); // vk.K[468].X
        mul_input[1] = uint256(21412191485355480921634302337326490620185322880094052731384915988728038504156); // vk.K[468].Y
        mul_input[2] = input[467];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[468] * input[467]
        mul_input[0] = uint256(13988415128136009744394946220663911358850119356863982798180378926808023977993); // vk.K[469].X
        mul_input[1] = uint256(6536395565717899864630386421020893519737391817397318594175479136538238621785); // vk.K[469].Y
        mul_input[2] = input[468];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[469] * input[468]
        mul_input[0] = uint256(17202215611341892883164989547968233835222188875836016264851723055054786856175); // vk.K[470].X
        mul_input[1] = uint256(18580029932383501591785560553776429158224709039785654994249129866423734649697); // vk.K[470].Y
        mul_input[2] = input[469];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[470] * input[469]
        mul_input[0] = uint256(20519697035601380304043348972053118044792134897881733071008888539763643784681); // vk.K[471].X
        mul_input[1] = uint256(18833410215624001896745014172064864789524436251849688952960594565332732391027); // vk.K[471].Y
        mul_input[2] = input[470];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[471] * input[470]
        mul_input[0] = uint256(6676428038989313296136657420717953577855477757048765292179383755951276717260); // vk.K[472].X
        mul_input[1] = uint256(2571069373243607495699100367230228809422816385001221823627293668483534967163); // vk.K[472].Y
        mul_input[2] = input[471];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[472] * input[471]
        mul_input[0] = uint256(12885252966637778101651999442455359955058827340105786215566197978974546566701); // vk.K[473].X
        mul_input[1] = uint256(17591521804516336199738145854361627484061563694700075122870465515734122150287); // vk.K[473].Y
        mul_input[2] = input[472];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[473] * input[472]
        mul_input[0] = uint256(1475967711183195951225309768775694016938938149556796667927174820724573344663); // vk.K[474].X
        mul_input[1] = uint256(15537549154949866885692540123230473753295210112160016693079962403719514172616); // vk.K[474].Y
        mul_input[2] = input[473];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[474] * input[473]
        mul_input[0] = uint256(1094678451638261758036865259888728283722124580944050233998293434693231131206); // vk.K[475].X
        mul_input[1] = uint256(21493363741162117337331625941925717338446181173150079119661914987400829173777); // vk.K[475].Y
        mul_input[2] = input[474];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[475] * input[474]
        mul_input[0] = uint256(20260931369539305408293435965719872287710022915205418076083671177090946616752); // vk.K[476].X
        mul_input[1] = uint256(3483430658087888414886678409893376495217708933183246128810627058647537468170); // vk.K[476].Y
        mul_input[2] = input[475];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[476] * input[475]
        mul_input[0] = uint256(5530423781441392883402949505797160729321137162965575940285649600848516654280); // vk.K[477].X
        mul_input[1] = uint256(20216284637853237665684538986929229747775758331231923899162425649363912036101); // vk.K[477].Y
        mul_input[2] = input[476];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[477] * input[476]
        mul_input[0] = uint256(6828943727334246323829015551623394473360085576955698617261818236806570421440); // vk.K[478].X
        mul_input[1] = uint256(975429965619943264126385953265278660888269097990065769880339977615072579938); // vk.K[478].Y
        mul_input[2] = input[477];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[478] * input[477]
        mul_input[0] = uint256(9017846636603565577275313618548843644293704821497003467412213281093119228871); // vk.K[479].X
        mul_input[1] = uint256(15539369984733089339496716291440413990239426079752002533962349534024236138263); // vk.K[479].Y
        mul_input[2] = input[478];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[479] * input[478]
        mul_input[0] = uint256(11211896259237633593234176518494172141299555355319166615112550416012577829503); // vk.K[480].X
        mul_input[1] = uint256(7028835921433982721023925756809031934369311372752889937053752374888217089937); // vk.K[480].Y
        mul_input[2] = input[479];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[480] * input[479]
        mul_input[0] = uint256(10016488422140385354690717188758482852622936669922975634518108674742844766509); // vk.K[481].X
        mul_input[1] = uint256(8059974340673359026877606737047372244596045515118798772330906249232916861962); // vk.K[481].Y
        mul_input[2] = input[480];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[481] * input[480]
        mul_input[0] = uint256(20611974622753078129783547291143725955767979905073594173016096607843002634153); // vk.K[482].X
        mul_input[1] = uint256(6606181626027802955972322597967368643220902999054789033112172728610314452424); // vk.K[482].Y
        mul_input[2] = input[481];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[482] * input[481]
        mul_input[0] = uint256(16683057077126351291947035693783138877828969348571387743738242982234333478213); // vk.K[483].X
        mul_input[1] = uint256(14279807697196457588216457423046082085495709129434092203992359794119730341670); // vk.K[483].Y
        mul_input[2] = input[482];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[483] * input[482]
        mul_input[0] = uint256(500655011177557559345581990978976158543568511565502221413242592637238588114); // vk.K[484].X
        mul_input[1] = uint256(5648981339846311905203647582714659495596206093684982005227774671460241129636); // vk.K[484].Y
        mul_input[2] = input[483];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[484] * input[483]
        mul_input[0] = uint256(6060100680373407037880926046504704099747149281962851008413535861055344335991); // vk.K[485].X
        mul_input[1] = uint256(12547922188849275357916266938209064672057588191718660944462999917149090035256); // vk.K[485].Y
        mul_input[2] = input[484];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[485] * input[484]
        mul_input[0] = uint256(78606767073641235613702250842850503777967996946488876486609471047344398292); // vk.K[486].X
        mul_input[1] = uint256(19121323154289873282760895648407512416117245344526248745968396871769288110319); // vk.K[486].Y
        mul_input[2] = input[485];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[486] * input[485]
        mul_input[0] = uint256(11485461124989825374953789492729809521994765145132110993305551211478074002364); // vk.K[487].X
        mul_input[1] = uint256(19883955842185223769237579791388399817604721414923653495029628908526316835342); // vk.K[487].Y
        mul_input[2] = input[486];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[487] * input[486]
        mul_input[0] = uint256(21733555470002542980865327666759896759449348828325276419134597253468288839428); // vk.K[488].X
        mul_input[1] = uint256(10679699877527564084630539783170208232385793646105819677949327257533777878284); // vk.K[488].Y
        mul_input[2] = input[487];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[488] * input[487]
        mul_input[0] = uint256(6009090551683966203492705971174540894851522059844651663394796366421200824260); // vk.K[489].X
        mul_input[1] = uint256(2647401421338497167895262242561757237891902933588862475649258667092001925628); // vk.K[489].Y
        mul_input[2] = input[488];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[489] * input[488]
        mul_input[0] = uint256(560491966741390185819416629261617713642052582297062696122905069075392603969); // vk.K[490].X
        mul_input[1] = uint256(13156291497015424196783193273580156223650647402504195473053195722893231390941); // vk.K[490].Y
        mul_input[2] = input[489];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[490] * input[489]
        mul_input[0] = uint256(14975380932205091269246234248178413075523582781918004199141751744294179336792); // vk.K[491].X
        mul_input[1] = uint256(3915123346200267559253094566801767504905528152086069004124595311351962058877); // vk.K[491].Y
        mul_input[2] = input[490];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[491] * input[490]
        mul_input[0] = uint256(13063825791882227077729669313518512141939759232894720526770756565949866201691); // vk.K[492].X
        mul_input[1] = uint256(2260208492569972059472303461613461327089769290391728439763535348148984411726); // vk.K[492].Y
        mul_input[2] = input[491];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[492] * input[491]
        mul_input[0] = uint256(10760000953432173740341690582783542801086089916810574001392508999588704559247); // vk.K[493].X
        mul_input[1] = uint256(11897783075136941693421681948141409787051153466610970458227615672525979946063); // vk.K[493].Y
        mul_input[2] = input[492];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[493] * input[492]
        mul_input[0] = uint256(10613339394322228346045531700830217260868937934104343680326108627403755652382); // vk.K[494].X
        mul_input[1] = uint256(17841417648020733318416818246935901583345621085485430193648048319966801543798); // vk.K[494].Y
        mul_input[2] = input[493];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[494] * input[493]
        mul_input[0] = uint256(12625266092708815093140579799450841897451340523713069294891737532425572929104); // vk.K[495].X
        mul_input[1] = uint256(18725940195556854016512499596725094566915225384611342134283291270363306255025); // vk.K[495].Y
        mul_input[2] = input[494];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[495] * input[494]
        mul_input[0] = uint256(15840491683281555934326501241970282442265183638056974272124312728814410043751); // vk.K[496].X
        mul_input[1] = uint256(3357201422933905128996863701681812704731213798614082008220730931162681411529); // vk.K[496].Y
        mul_input[2] = input[495];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[496] * input[495]
        mul_input[0] = uint256(17240831183108918700441669848984887223145561035824186438511780413066282333244); // vk.K[497].X
        mul_input[1] = uint256(20399836861038795143825311250010897934607014721599031548976040227309232181536); // vk.K[497].Y
        mul_input[2] = input[496];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[497] * input[496]
        mul_input[0] = uint256(2768460825002624630765922669912349724398030189594571175951777452384659025006); // vk.K[498].X
        mul_input[1] = uint256(10466303493832350970250459345588405137338421686269407317619798495420080231460); // vk.K[498].Y
        mul_input[2] = input[497];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[498] * input[497]
        mul_input[0] = uint256(1582123282167956924306090669512478685437351913055400602624493055882891888774); // vk.K[499].X
        mul_input[1] = uint256(11002913083895029002402496724655369508824504880154629621593024560739284162805); // vk.K[499].Y
        mul_input[2] = input[498];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[499] * input[498]
        mul_input[0] = uint256(21748266938236741050365769691921753257869898614975457994241073190900536178731); // vk.K[500].X
        mul_input[1] = uint256(9500590604476850832364593511546743273570314572150524698109429650265615705724); // vk.K[500].Y
        mul_input[2] = input[499];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[500] * input[499]
        mul_input[0] = uint256(20617088920386015374385455882078380556829819761769810590518315252845643931148); // vk.K[501].X
        mul_input[1] = uint256(19909365306600700616525355633215717176012448860184793563899440039056124576425); // vk.K[501].Y
        mul_input[2] = input[500];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[501] * input[500]
        mul_input[0] = uint256(21029040000042540592031946447940647229074770793962424803756359291718957880718); // vk.K[502].X
        mul_input[1] = uint256(12689858796815432148038679034446645123896414002925259378796356323634651682759); // vk.K[502].Y
        mul_input[2] = input[501];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[502] * input[501]
        mul_input[0] = uint256(2228897257618903466735517110943749885941634266270675888907662054554602040752); // vk.K[503].X
        mul_input[1] = uint256(4212796357343963485573987653655057896867165534216462930446610640601217509201); // vk.K[503].Y
        mul_input[2] = input[502];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[503] * input[502]
        mul_input[0] = uint256(20690469607762421362084146039841342528433189924122080665585735715799871478742); // vk.K[504].X
        mul_input[1] = uint256(8466344536082122810870066329792287715084425958689401569076493664735908781023); // vk.K[504].Y
        mul_input[2] = input[503];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[504] * input[503]
        mul_input[0] = uint256(4367857465291525485952073843774274969771998597653124470414723679809649462177); // vk.K[505].X
        mul_input[1] = uint256(19408554211859943688177598400623191958888931258412308227228763106948388703908); // vk.K[505].Y
        mul_input[2] = input[504];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[505] * input[504]
        mul_input[0] = uint256(19540392041796465350896651537989850312464560693445624357586062833755218295186); // vk.K[506].X
        mul_input[1] = uint256(822729537872370838976569476504126952268875807700019624143744899496203972899); // vk.K[506].Y
        mul_input[2] = input[505];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[506] * input[505]
        mul_input[0] = uint256(21199167813110027079890875872742115117458413668723742689071301264101729723701); // vk.K[507].X
        mul_input[1] = uint256(7194095309896094463849900226962437327702558795880405525714528964496550723786); // vk.K[507].Y
        mul_input[2] = input[506];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[507] * input[506]
        mul_input[0] = uint256(854359275686649006170994326332586978649526446063611330031604493782887320769); // vk.K[508].X
        mul_input[1] = uint256(14465555874442490013302404439794697853710046012440710756701733148770975429377); // vk.K[508].Y
        mul_input[2] = input[507];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[508] * input[507]
        mul_input[0] = uint256(15951539499458979932092245577479939991391703064941343300838826147873525027795); // vk.K[509].X
        mul_input[1] = uint256(21565055275475838040013569643355460203375376333271756766082671009105744883134); // vk.K[509].Y
        mul_input[2] = input[508];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[509] * input[508]
        mul_input[0] = uint256(17084395347577404237486729954397749182635410992399500768563821678100758071196); // vk.K[510].X
        mul_input[1] = uint256(13490215270071606332686139317202409649173275931812943671680201824603884088432); // vk.K[510].Y
        mul_input[2] = input[509];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[510] * input[509]
        mul_input[0] = uint256(2127861120060402293027664956398720999303171904865248084819344371534288062655); // vk.K[511].X
        mul_input[1] = uint256(6156976717648204397187567619990320935203732283283054101485963833305324212918); // vk.K[511].Y
        mul_input[2] = input[510];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[511] * input[510]
        mul_input[0] = uint256(21527983990895425769149278609487205654910421911482577261617669549046017846203); // vk.K[512].X
        mul_input[1] = uint256(6893377860835010127670584883844231465416301551358567881679386958092978431821); // vk.K[512].Y
        mul_input[2] = input[511];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[512] * input[511]
        mul_input[0] = uint256(16502925521350934734537622747104450460714111251184720899735235768955776788340); // vk.K[513].X
        mul_input[1] = uint256(10009623212099506003276439100623083449947019084481694209364569937065190855964); // vk.K[513].Y
        mul_input[2] = input[512];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[513] * input[512]
        mul_input[0] = uint256(481750253391373868859712112320991952684439481148415331472853399550166356989); // vk.K[514].X
        mul_input[1] = uint256(19225526395285291141731195075141483744365215452244847994011887024192390187387); // vk.K[514].Y
        mul_input[2] = input[513];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[514] * input[513]
        mul_input[0] = uint256(19198951899427005396084385736869782329243542754970039113251101572994041302680); // vk.K[515].X
        mul_input[1] = uint256(14695142934116785584760730054779160113948669557337738269674560500347836555341); // vk.K[515].Y
        mul_input[2] = input[514];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[515] * input[514]
        mul_input[0] = uint256(10921229875273208422067877478813909481500081300977124352523959988897360531035); // vk.K[516].X
        mul_input[1] = uint256(2194066553242278745091878181744374656514550074931022544716949599883294401210); // vk.K[516].Y
        mul_input[2] = input[515];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[516] * input[515]
        mul_input[0] = uint256(21405610450593785159065488847433555558533349002477460334718234250672899073730); // vk.K[517].X
        mul_input[1] = uint256(14174192356330609859290376908396622581018957489769824973792207574262392042181); // vk.K[517].Y
        mul_input[2] = input[516];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[517] * input[516]
        mul_input[0] = uint256(7202813743943887206502389890920265898400284406611305069044411844590646390127); // vk.K[518].X
        mul_input[1] = uint256(3155212756299440760933649604873687500218771935925851380549991568250670730525); // vk.K[518].Y
        mul_input[2] = input[517];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[518] * input[517]
        mul_input[0] = uint256(18372605668741903686168557046628235168452199156293186360932241869523729560710); // vk.K[519].X
        mul_input[1] = uint256(9367409648715469438447346458195590375038572688527041201177704750377797131575); // vk.K[519].Y
        mul_input[2] = input[518];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[519] * input[518]
        mul_input[0] = uint256(14781602256208104921315665479274704419609244231646059151093700420547307355726); // vk.K[520].X
        mul_input[1] = uint256(5773846235251511084600935911293087750248629307547366219655749350322880882908); // vk.K[520].Y
        mul_input[2] = input[519];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[520] * input[519]
        mul_input[0] = uint256(4435967924555676549822585202534435378599783976490606575775874298757603640597); // vk.K[521].X
        mul_input[1] = uint256(8364284827219012230156089254367462761546876042119823628365611522979606647722); // vk.K[521].Y
        mul_input[2] = input[520];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[521] * input[520]
        mul_input[0] = uint256(8094533422712100464170101559545343050894958870012857463632592695384747573730); // vk.K[522].X
        mul_input[1] = uint256(3649240117657263757965269667739767949732922257632710731338571711388468832931); // vk.K[522].Y
        mul_input[2] = input[521];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[522] * input[521]
        mul_input[0] = uint256(19153476185082387195656992708099054827878685777673132316132589325053455975289); // vk.K[523].X
        mul_input[1] = uint256(7825020960156301385446714859832891401411281821893993061704368443610230884342); // vk.K[523].Y
        mul_input[2] = input[522];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[523] * input[522]
        mul_input[0] = uint256(9826323208025531713968971296805526005362457075227664609853273892361168089508); // vk.K[524].X
        mul_input[1] = uint256(17770907507972634459435383517217973140297780704588874038668518611995820064565); // vk.K[524].Y
        mul_input[2] = input[523];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[524] * input[523]
        mul_input[0] = uint256(1927914012572982556541041068825197692349797441260653764413562526116338562169); // vk.K[525].X
        mul_input[1] = uint256(14362380204091639159241104997886996127558433909049997033702540304472102802178); // vk.K[525].Y
        mul_input[2] = input[524];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[525] * input[524]
        mul_input[0] = uint256(1559963753522762081419335048576581611841189885976719586523057897308407524800); // vk.K[526].X
        mul_input[1] = uint256(10534786080317743199520954833162423322230178270273575465283849611669911531697); // vk.K[526].Y
        mul_input[2] = input[525];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[526] * input[525]
        mul_input[0] = uint256(21206286056934070817879531811043899702125798178123002664755342890194855730822); // vk.K[527].X
        mul_input[1] = uint256(1696649241066679485786225542039726269976244148531969443622520629629708475706); // vk.K[527].Y
        mul_input[2] = input[526];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[527] * input[526]
        mul_input[0] = uint256(20541010076178980384242389317064975983110921024185496150227603597852696840300); // vk.K[528].X
        mul_input[1] = uint256(9874463381308038261186534547586519855966424636596108906327793587748221433133); // vk.K[528].Y
        mul_input[2] = input[527];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[528] * input[527]
        mul_input[0] = uint256(18427148313979647914983974812953589931876807860787481929855827611932292216125); // vk.K[529].X
        mul_input[1] = uint256(10434768955881558066713982616461408425758321002538167402635066228418619682874); // vk.K[529].Y
        mul_input[2] = input[528];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[529] * input[528]
        mul_input[0] = uint256(13574720171178916151263214371536017692976049313022107324942071735265414475778); // vk.K[530].X
        mul_input[1] = uint256(18408799528572030687239469883513054045939510549193399722600758391594148534761); // vk.K[530].Y
        mul_input[2] = input[529];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[530] * input[529]
        mul_input[0] = uint256(5268810653862083789526180398121110187066828035802878064356053608548325461114); // vk.K[531].X
        mul_input[1] = uint256(21518840383081563545920606215236943037879945883798194095687661243472153186356); // vk.K[531].Y
        mul_input[2] = input[530];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[531] * input[530]
        mul_input[0] = uint256(16715717991922797777957803413457216835600417411936150848871066739356428797816); // vk.K[532].X
        mul_input[1] = uint256(8020319144747299927519622178438074775161676534974163201370298208916698189835); // vk.K[532].Y
        mul_input[2] = input[531];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[532] * input[531]
        mul_input[0] = uint256(16465203887988441844098991112476926791944122153338535092688830257404184837656); // vk.K[533].X
        mul_input[1] = uint256(6404678850851643783773469216376697041096231428550074003650284806810714906312); // vk.K[533].Y
        mul_input[2] = input[532];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[533] * input[532]
        mul_input[0] = uint256(17092029412398643138322932503283260054822246009214451173415022089724626270118); // vk.K[534].X
        mul_input[1] = uint256(15298106008665376820197632081933477607046391665043247444005302205014575858603); // vk.K[534].Y
        mul_input[2] = input[533];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[534] * input[533]
        mul_input[0] = uint256(3568835692793923808127670849822778446828790340759989043480929214895496231078); // vk.K[535].X
        mul_input[1] = uint256(5515242030475801894625118790378747533270261776200834295887145192327285745924); // vk.K[535].Y
        mul_input[2] = input[534];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[535] * input[534]
        mul_input[0] = uint256(18622785064656734361836373332569622264505230919627578184743144739337311773598); // vk.K[536].X
        mul_input[1] = uint256(12963096706445580295963446558202233994983496211292412306137400587167544980938); // vk.K[536].Y
        mul_input[2] = input[535];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[536] * input[535]
        mul_input[0] = uint256(18435329801465962890869871973941764769315135265884434421706147458756271295848); // vk.K[537].X
        mul_input[1] = uint256(16133978085698262083843497294459217807211148769246079264094685140719097323924); // vk.K[537].Y
        mul_input[2] = input[536];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[537] * input[536]
        mul_input[0] = uint256(19844528477214895298451443161579694339776671221376328061648543815578345065690); // vk.K[538].X
        mul_input[1] = uint256(15764476615781576448892543006441954998328084781831689882335420910895038985757); // vk.K[538].Y
        mul_input[2] = input[537];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[538] * input[537]
        mul_input[0] = uint256(9214634585947022522992453743262661927231029169880929674975754468783601384105); // vk.K[539].X
        mul_input[1] = uint256(11233976753996521354369970490842395889092649939465981096631050550555035791742); // vk.K[539].Y
        mul_input[2] = input[538];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[539] * input[538]
        mul_input[0] = uint256(18611731642804084814440089119412970826469232830857367636470984140524944907288); // vk.K[540].X
        mul_input[1] = uint256(883646222341711989917106723112858377373944624498735527015716504962390379655); // vk.K[540].Y
        mul_input[2] = input[539];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[540] * input[539]
        mul_input[0] = uint256(12030528534203766970714597119125470274260976708465664191352021613482657415017); // vk.K[541].X
        mul_input[1] = uint256(2306308937854386318432250742573449876486447525080258362422291750718477820812); // vk.K[541].Y
        mul_input[2] = input[540];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[541] * input[540]
        mul_input[0] = uint256(13524514381267297803071831935676936160155339061614455960810461830093436598718); // vk.K[542].X
        mul_input[1] = uint256(7977248530593878163261262035322880166524460149523320670494436574484979222319); // vk.K[542].Y
        mul_input[2] = input[541];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[542] * input[541]
        mul_input[0] = uint256(16746887735999908955085972850224859755813192957303676456151788291906053342693); // vk.K[543].X
        mul_input[1] = uint256(571344249988041954032949319957930262852700069660392728646962944618158492501); // vk.K[543].Y
        mul_input[2] = input[542];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[543] * input[542]
        mul_input[0] = uint256(14684661204666922654625745275174310127467531863826427348106796542631535792097); // vk.K[544].X
        mul_input[1] = uint256(1339228291822803205204327965427283985778760037966642369817459994508972822503); // vk.K[544].Y
        mul_input[2] = input[543];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[544] * input[543]
        mul_input[0] = uint256(1239115933476807052556329002075109103446131578265462280753856384270043677247); // vk.K[545].X
        mul_input[1] = uint256(94215672984971523141349198697168164737085728678816520912734643860099955158); // vk.K[545].Y
        mul_input[2] = input[544];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[545] * input[544]
        mul_input[0] = uint256(7888239470233861945103992405047964600856794087545961750330385466019578363050); // vk.K[546].X
        mul_input[1] = uint256(7724785201774203150539811651597646925648144080439220547760111023089227105715); // vk.K[546].Y
        mul_input[2] = input[545];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[546] * input[545]
        mul_input[0] = uint256(16539520979886249932288488889804941531391044009263790365754348784686489711075); // vk.K[547].X
        mul_input[1] = uint256(267848439424428719509110054462778060056217960406998391894181647354574143171); // vk.K[547].Y
        mul_input[2] = input[546];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[547] * input[546]
        mul_input[0] = uint256(20868695308755378611606288375101134720799508382798643758283533812592621534630); // vk.K[548].X
        mul_input[1] = uint256(340863504643882983484783716279144367417167810307766661895289242350038899263); // vk.K[548].Y
        mul_input[2] = input[547];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[548] * input[547]
        mul_input[0] = uint256(13383216470129499492528472129980686262296932569076117251546982773373904124374); // vk.K[549].X
        mul_input[1] = uint256(2254894719446540411073059490689944230336260669267430804685715203313425420521); // vk.K[549].Y
        mul_input[2] = input[548];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[549] * input[548]
        mul_input[0] = uint256(15086725181290168013592712070081029093473053241381280703570493666935073337445); // vk.K[550].X
        mul_input[1] = uint256(13009866151878622992673118720335176805447837990136664610097697027678479154211); // vk.K[550].Y
        mul_input[2] = input[549];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[550] * input[549]
        mul_input[0] = uint256(8538434200213384462165451961367313169506572024011005673636132561146926486382); // vk.K[551].X
        mul_input[1] = uint256(10535801811148960219562322600303411403816540360312993117830366913309306581461); // vk.K[551].Y
        mul_input[2] = input[550];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[551] * input[550]
        mul_input[0] = uint256(14289259177772912760025275544368810043089838131162618714941601960591533396513); // vk.K[552].X
        mul_input[1] = uint256(5077551417589219009058018076421918453519358133746182104579596508159094084501); // vk.K[552].Y
        mul_input[2] = input[551];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[552] * input[551]
        mul_input[0] = uint256(3342354247413309235186807775237442619085014801231682789859665450307018290069); // vk.K[553].X
        mul_input[1] = uint256(4336365954043501929357582913771054587155443979476760970258493566765422151900); // vk.K[553].Y
        mul_input[2] = input[552];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[553] * input[552]
        mul_input[0] = uint256(2491265016149984839104924195135700158573280559721282751752238155174245138552); // vk.K[554].X
        mul_input[1] = uint256(7977841673291855008727603808642530006886489826003913910060179671846360046163); // vk.K[554].Y
        mul_input[2] = input[553];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[554] * input[553]
        mul_input[0] = uint256(1487472747608610527983995267702797151139592608714959495208341692005302805575); // vk.K[555].X
        mul_input[1] = uint256(13470570590652353066648897699864962559869504553672363127749556081637504535309); // vk.K[555].Y
        mul_input[2] = input[554];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[555] * input[554]
        mul_input[0] = uint256(20059442823025720683276213438595310890487312367692324378176488716797229614477); // vk.K[556].X
        mul_input[1] = uint256(450429779432879616867754627767061083409544221519217104577749829067325523746); // vk.K[556].Y
        mul_input[2] = input[555];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[556] * input[555]
        mul_input[0] = uint256(8618639762780336255914670420501206384309289790578561004810340722607209059593); // vk.K[557].X
        mul_input[1] = uint256(2279774515275384476595480940800465746571850775584494828723491958061209531667); // vk.K[557].Y
        mul_input[2] = input[556];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[557] * input[556]
        mul_input[0] = uint256(13461823562088641014010683668890429435232563037086018893322690186215426830089); // vk.K[558].X
        mul_input[1] = uint256(8534975943135915534041853311598065214564855030000877958646143768691371132594); // vk.K[558].Y
        mul_input[2] = input[557];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[558] * input[557]
        mul_input[0] = uint256(371648929874828192085725873864742868004523894786345322062527482829602554431); // vk.K[559].X
        mul_input[1] = uint256(6918439485842664364173977665677356620266979847280857005634963097878823934763); // vk.K[559].Y
        mul_input[2] = input[558];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[559] * input[558]
        mul_input[0] = uint256(21869085573372236714356788466130171583596629901945884652383915432720983421299); // vk.K[560].X
        mul_input[1] = uint256(3404014692020755637019823555691455248019417004512710255367731444257885598426); // vk.K[560].Y
        mul_input[2] = input[559];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[560] * input[559]
        mul_input[0] = uint256(16266480132023047623844007469180930290221414234016366165120817263729561699911); // vk.K[561].X
        mul_input[1] = uint256(9341783507512591198075528922440615099880025706139722621837231839076079304276); // vk.K[561].Y
        mul_input[2] = input[560];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[561] * input[560]
        mul_input[0] = uint256(12243498823985123664911696073318516446940964965365642054862723872302623436783); // vk.K[562].X
        mul_input[1] = uint256(8027961043220379021336537900102636397029178041338552820538987889780485893152); // vk.K[562].Y
        mul_input[2] = input[561];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[562] * input[561]
        mul_input[0] = uint256(12998547019341133168058238977418763106076644569123632586160449051645384330907); // vk.K[563].X
        mul_input[1] = uint256(15913590352458622270969071087026591554677170616870670302574466157315092428171); // vk.K[563].Y
        mul_input[2] = input[562];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[563] * input[562]
        mul_input[0] = uint256(13780998821370171942098319417470101291931713198446380655088989154815430271635); // vk.K[564].X
        mul_input[1] = uint256(13291196763215862060337406455247731589382069589229554715023969948028952946969); // vk.K[564].Y
        mul_input[2] = input[563];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[564] * input[563]
        mul_input[0] = uint256(7356603890536675805566040389614510494350684118358120965159739103980122921721); // vk.K[565].X
        mul_input[1] = uint256(5669638733182011766101448598178883404378066259051850457840769200641194265406); // vk.K[565].Y
        mul_input[2] = input[564];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[565] * input[564]
        mul_input[0] = uint256(3106999330520024953768679779057325901062830690074172305801259151092458749032); // vk.K[566].X
        mul_input[1] = uint256(21141809248570062412606237201793731115399634670194675857466911470620838703955); // vk.K[566].Y
        mul_input[2] = input[565];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[566] * input[565]
        mul_input[0] = uint256(3497884263528519793115991655068941979962981051471420409424206933622471273288); // vk.K[567].X
        mul_input[1] = uint256(1717942553491998738318636191514134026159346953112651099885372455444361693144); // vk.K[567].Y
        mul_input[2] = input[566];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[567] * input[566]
        mul_input[0] = uint256(10757197793909794534250239917202737966236104257977587012453250674429906961696); // vk.K[568].X
        mul_input[1] = uint256(7536439343278690834183993824068935602981991310757319193206898975004807287369); // vk.K[568].Y
        mul_input[2] = input[567];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[568] * input[567]
        mul_input[0] = uint256(2980151850416076289347197652578031024813204261690164595252585746593039918483); // vk.K[569].X
        mul_input[1] = uint256(20983840319073531136273419285231189222343106044604165646821354781434587387922); // vk.K[569].Y
        mul_input[2] = input[568];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[569] * input[568]
        mul_input[0] = uint256(9401059853295462177591170210322097133316262197284155438275126636378932783864); // vk.K[570].X
        mul_input[1] = uint256(120443582303945166315184449700288343524431242506981934312903441106352713622); // vk.K[570].Y
        mul_input[2] = input[569];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[570] * input[569]
        mul_input[0] = uint256(12214230911413782536134323157412529496945884052032353192415425861006561976793); // vk.K[571].X
        mul_input[1] = uint256(2068314197493169146440177620096746975301796083690954441900930598052471672497); // vk.K[571].Y
        mul_input[2] = input[570];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[571] * input[570]
        mul_input[0] = uint256(14764343830774144832825020231675063941340284201343405483317721981097889283152); // vk.K[572].X
        mul_input[1] = uint256(10970438575999170237317014910967150880426769472330931257510831818156674904621); // vk.K[572].Y
        mul_input[2] = input[571];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[572] * input[571]
        mul_input[0] = uint256(17373267125261830170439211169162227571851484806643563218121782420192424492273); // vk.K[573].X
        mul_input[1] = uint256(17165302670062213905227094226779053000086672338766505149366938086835567293582); // vk.K[573].Y
        mul_input[2] = input[572];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[573] * input[572]
        mul_input[0] = uint256(12820762894938777203500529763347868292824021659495329239168102402437644048156); // vk.K[574].X
        mul_input[1] = uint256(3887388874515935487647644839625231797062448247462658435346770749842032019646); // vk.K[574].Y
        mul_input[2] = input[573];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[574] * input[573]
        mul_input[0] = uint256(8118848769118335689747738048810110760841182404389038804258795002628754002725); // vk.K[575].X
        mul_input[1] = uint256(14992333132959402299593452842748590975618936686408301726472584159655234988892); // vk.K[575].Y
        mul_input[2] = input[574];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[575] * input[574]
        mul_input[0] = uint256(1349750658877683508765510764798343604922407104036594402415417482609397471339); // vk.K[576].X
        mul_input[1] = uint256(2203424275171174550166375180285134302721392632482672877984516134490065387024); // vk.K[576].Y
        mul_input[2] = input[575];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[576] * input[575]
        mul_input[0] = uint256(5305707941951253628915765011458767626608103722143649317427071574017455314045); // vk.K[577].X
        mul_input[1] = uint256(6604656636033187603062663441502855742825653949948773082404457285721100912587); // vk.K[577].Y
        mul_input[2] = input[576];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[577] * input[576]
        mul_input[0] = uint256(3188411653176647767891137807646843701307619623683606262591085365445193850856); // vk.K[578].X
        mul_input[1] = uint256(1462776156476823971106393966849331426782916977607050184911874608203220363911); // vk.K[578].Y
        mul_input[2] = input[577];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[578] * input[577]
        mul_input[0] = uint256(16455280886690370970714684862522920792037618025973205496592648851313267308215); // vk.K[579].X
        mul_input[1] = uint256(15543364553135569669918243742990306900209455939271313740242492536475158343375); // vk.K[579].Y
        mul_input[2] = input[578];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[579] * input[578]
        mul_input[0] = uint256(17507433956124883171022092671903133343314882234425839462355571572303213506475); // vk.K[580].X
        mul_input[1] = uint256(17360704608701474760509425160220334440541710313469150128944737084574591430107); // vk.K[580].Y
        mul_input[2] = input[579];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[580] * input[579]
        mul_input[0] = uint256(13903537479299140641228702673095598286164989964682622927268540656823864313819); // vk.K[581].X
        mul_input[1] = uint256(19086469484456957971780170098802289986739763983981285093572229892994709325249); // vk.K[581].Y
        mul_input[2] = input[580];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[581] * input[580]
        mul_input[0] = uint256(12339246025721786331773644406932754507084169888605243225740477731776835776400); // vk.K[582].X
        mul_input[1] = uint256(7558614060978632024761554549858132156559280968549355121483985293981887635377); // vk.K[582].Y
        mul_input[2] = input[581];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[582] * input[581]
        mul_input[0] = uint256(9065966087964318311890965682832216918085529368977207399963540796705431923798); // vk.K[583].X
        mul_input[1] = uint256(12984743279344311589382340603960839360598968867830982834645452684520042477995); // vk.K[583].Y
        mul_input[2] = input[582];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[583] * input[582]
        mul_input[0] = uint256(400937271230582060073015163754984082974973819520633791273969441453599060258); // vk.K[584].X
        mul_input[1] = uint256(2664436245641087542666365046550187431567460828092108002333902949147664855178); // vk.K[584].Y
        mul_input[2] = input[583];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[584] * input[583]
        mul_input[0] = uint256(15539371310076217796894601695074444591002804877694567742105484388933570577166); // vk.K[585].X
        mul_input[1] = uint256(12134517660167799937202561054934434520185366525516123631740470574777044375771); // vk.K[585].Y
        mul_input[2] = input[584];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[585] * input[584]
        mul_input[0] = uint256(12457349915425414930643632817387462813766655970036377291987495472153834997046); // vk.K[586].X
        mul_input[1] = uint256(8377675413322413009939969990828855754284657992396525422357500700148578795196); // vk.K[586].Y
        mul_input[2] = input[585];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[586] * input[585]
        mul_input[0] = uint256(8368156794104309278199283991431501192668731266919359367038974647087981784649); // vk.K[587].X
        mul_input[1] = uint256(17604066005403914037784200631388923998216715778301861208404599869062380634803); // vk.K[587].Y
        mul_input[2] = input[586];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[587] * input[586]
        mul_input[0] = uint256(20545767730974136256072625032048854447810938867092294650327472346207118702682); // vk.K[588].X
        mul_input[1] = uint256(8439596446739185585938531442085728990609226330838054449457811151239625043206); // vk.K[588].Y
        mul_input[2] = input[587];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[588] * input[587]
        mul_input[0] = uint256(4182789220960052350553381752550536378731087526296447671370952060727987967602); // vk.K[589].X
        mul_input[1] = uint256(19471610838571013870479533294337577613753981670656217361442300388764287037476); // vk.K[589].Y
        mul_input[2] = input[588];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[589] * input[588]
        mul_input[0] = uint256(1964130481222580270787532126085725898570159256119284826447047055055589942097); // vk.K[590].X
        mul_input[1] = uint256(15294923415855319461779593298307714528210915568836610664121541294861331189685); // vk.K[590].Y
        mul_input[2] = input[589];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[590] * input[589]
        mul_input[0] = uint256(9452283192730712688188227987202319123069979411462708740936876956123546419942); // vk.K[591].X
        mul_input[1] = uint256(14572165213609369697470854918042022158866056886150111674251085509831990140570); // vk.K[591].Y
        mul_input[2] = input[590];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[591] * input[590]
        mul_input[0] = uint256(14533377871806457524061346054990432408836703466838258169186131130327822767760); // vk.K[592].X
        mul_input[1] = uint256(2834336021182145228728882396113703417563970973058344242605307527534040296216); // vk.K[592].Y
        mul_input[2] = input[591];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[592] * input[591]
        mul_input[0] = uint256(12934079050632664727656827411108931773873793798190921272058301941110608504799); // vk.K[593].X
        mul_input[1] = uint256(12396607884323266682378852236054630407247858994961372823139150554574286566539); // vk.K[593].Y
        mul_input[2] = input[592];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[593] * input[592]
        mul_input[0] = uint256(18894869669808173853229828920635169516953555573903022889856196017232039129484); // vk.K[594].X
        mul_input[1] = uint256(18677949023195226094113624541102528477229789103830639190383394497408134172275); // vk.K[594].Y
        mul_input[2] = input[593];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[594] * input[593]
        mul_input[0] = uint256(15646305705578679555349123513780302043637826460530880005042220520341174547297); // vk.K[595].X
        mul_input[1] = uint256(15837228286645171887714248441438607595340282557533589157132570969523567889601); // vk.K[595].Y
        mul_input[2] = input[594];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[595] * input[594]
        mul_input[0] = uint256(11992911572030307977584031492929128156315514221957643936856942388160294397064); // vk.K[596].X
        mul_input[1] = uint256(1552627506111869940020844027517995778452208867002633659179410080092923973637); // vk.K[596].Y
        mul_input[2] = input[595];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[596] * input[595]
        mul_input[0] = uint256(12692402188500902413366533487868719986082271356230767036372041296045671613321); // vk.K[597].X
        mul_input[1] = uint256(16323447567226870984666759171569854249795288436785877557106701616154219590836); // vk.K[597].Y
        mul_input[2] = input[596];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[597] * input[596]
        mul_input[0] = uint256(21334915450522109785534217430655539558366788425781310728416860308465912871027); // vk.K[598].X
        mul_input[1] = uint256(19687600877696189755612064468771209270370443018111472787893624180697545165909); // vk.K[598].Y
        mul_input[2] = input[597];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[598] * input[597]
        mul_input[0] = uint256(13838667637909649609986804623702868435490714482891677718400005862809609370656); // vk.K[599].X
        mul_input[1] = uint256(5697482806217876038580761753734278925367194674705786273331821407732645127201); // vk.K[599].Y
        mul_input[2] = input[598];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[599] * input[598]
        mul_input[0] = uint256(7844224357972908366951630435697573975931534217903870659534812182275396392414); // vk.K[600].X
        mul_input[1] = uint256(19996594535174078781248758315329885576960612517397308086637402035240460100590); // vk.K[600].Y
        mul_input[2] = input[599];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[600] * input[599]
        mul_input[0] = uint256(10414175107225005434534971040709055906601427445262579051208052978580389766209); // vk.K[601].X
        mul_input[1] = uint256(13402257902343662690116596742392739409692022002128909421148144224918293177438); // vk.K[601].Y
        mul_input[2] = input[600];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[601] * input[600]
        mul_input[0] = uint256(4383371992083735768251556405994698444891911629893903622213477748229275377387); // vk.K[602].X
        mul_input[1] = uint256(7584566671641717981599184543230179518005121386197678485907943230013230813056); // vk.K[602].Y
        mul_input[2] = input[601];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[602] * input[601]
        mul_input[0] = uint256(2487659261317842993362903956602177212646243698239033204087844299426414862424); // vk.K[603].X
        mul_input[1] = uint256(15773139198860118071534977479588396444438787927148674175696022877644107942859); // vk.K[603].Y
        mul_input[2] = input[602];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[603] * input[602]
        mul_input[0] = uint256(21586065310384590812128717215000314931910910887765962134332560496718799205822); // vk.K[604].X
        mul_input[1] = uint256(18187182425006946070115152594064004433301575737388420699260258796892543177516); // vk.K[604].Y
        mul_input[2] = input[603];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[604] * input[603]
        mul_input[0] = uint256(7342488962195614965785746473449197264845092871723503892478992403382040825892); // vk.K[605].X
        mul_input[1] = uint256(9092547741936025977705911075303402008336328442768416961191429044505453043353); // vk.K[605].Y
        mul_input[2] = input[604];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[605] * input[604]
        mul_input[0] = uint256(9459577784946138900486272041293876222544173109731711077990795821021546756114); // vk.K[606].X
        mul_input[1] = uint256(3492555487302609113162097419800117027514128175894574136366591316680951020736); // vk.K[606].Y
        mul_input[2] = input[605];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[606] * input[605]
        mul_input[0] = uint256(11694408981126071081606648788525414881880648373884056795501955451818931541443); // vk.K[607].X
        mul_input[1] = uint256(5805556453529856536088266163202336916169248973551535448801299165203148798339); // vk.K[607].Y
        mul_input[2] = input[606];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[607] * input[606]
        mul_input[0] = uint256(627043645786756326365683726007908139186861571144429909609602233492429903274); // vk.K[608].X
        mul_input[1] = uint256(16150545321378562828378775883730540887571598769982756040259922770780426687009); // vk.K[608].Y
        mul_input[2] = input[607];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[608] * input[607]
        mul_input[0] = uint256(7921503630344473126729918398196561498669942535203974326171920880577562298451); // vk.K[609].X
        mul_input[1] = uint256(4167399134943555698673326288400555486350633470473738474598870729898984605248); // vk.K[609].Y
        mul_input[2] = input[608];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[609] * input[608]
        mul_input[0] = uint256(13242760898782395347529874361103968838282385165975059298308022497312301028303); // vk.K[610].X
        mul_input[1] = uint256(20244178095525021243702837910756371158595875601813477642524014917741436883494); // vk.K[610].Y
        mul_input[2] = input[609];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[610] * input[609]
        mul_input[0] = uint256(13354560749023285303352197428564533827982337709618773671797603581018754019722); // vk.K[611].X
        mul_input[1] = uint256(6084632991327042943216677577078118680955969143565593713229044208390730119788); // vk.K[611].Y
        mul_input[2] = input[610];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[611] * input[610]
        mul_input[0] = uint256(1945711868032445823974188107860593919247109802308706252436185230364668901814); // vk.K[612].X
        mul_input[1] = uint256(14143089234710936742699750628829542448118044400896860052039325771123927579457); // vk.K[612].Y
        mul_input[2] = input[611];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[612] * input[611]
        mul_input[0] = uint256(1117190349574725765494748903688873893588878073254240866709320241760781175213); // vk.K[613].X
        mul_input[1] = uint256(10614297768781648256407374377505519301089566968161400241436772602160401211711); // vk.K[613].Y
        mul_input[2] = input[612];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[613] * input[612]
        mul_input[0] = uint256(8190549505038487651929107343212646236730785738530127809051452357351410017841); // vk.K[614].X
        mul_input[1] = uint256(8871384265069701867012474818126600913023615871394645656137758815715353256344); // vk.K[614].Y
        mul_input[2] = input[613];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[614] * input[613]
        mul_input[0] = uint256(19160174135349481277306245167048311181955566428795356618667306902788949703713); // vk.K[615].X
        mul_input[1] = uint256(13901375867479247885887537040695223541830964343468866081236596622561645998324); // vk.K[615].Y
        mul_input[2] = input[614];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[615] * input[614]
        mul_input[0] = uint256(1567561827913231329498666993176527568732957886359304890937840663060661090737); // vk.K[616].X
        mul_input[1] = uint256(8785683220817049099484884132109536090168141166569010017765073478866274074676); // vk.K[616].Y
        mul_input[2] = input[615];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[616] * input[615]
        mul_input[0] = uint256(10493667695562887986805651596785733011574320014375809071116395136882431852741); // vk.K[617].X
        mul_input[1] = uint256(9548586934746711592898379257142121273647391425555902762531135607096801971621); // vk.K[617].Y
        mul_input[2] = input[616];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[617] * input[616]
        mul_input[0] = uint256(9606097668741817694807440946572569068646488058286236083003351951489982192737); // vk.K[618].X
        mul_input[1] = uint256(9824928307689113320156391285454698848171300401458250701459987594357349349061); // vk.K[618].Y
        mul_input[2] = input[617];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[618] * input[617]
        mul_input[0] = uint256(15067138032415089491314745160472327768665588752214665099756344331117555961764); // vk.K[619].X
        mul_input[1] = uint256(4962172323003231294834437520382033600539924147685208005371133943593257763984); // vk.K[619].Y
        mul_input[2] = input[618];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[619] * input[618]
        mul_input[0] = uint256(9337426971463433372915119940787167426274922259599491826915143526601795547593); // vk.K[620].X
        mul_input[1] = uint256(4197839959690644808619544131714515092129098783770969127140448888052448842192); // vk.K[620].Y
        mul_input[2] = input[619];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[620] * input[619]
        mul_input[0] = uint256(19135511988292379603148453603098722830854989950132278062153066681616613222349); // vk.K[621].X
        mul_input[1] = uint256(11043458428996228913769330305738505463120386263683056887058786984571822252983); // vk.K[621].Y
        mul_input[2] = input[620];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[621] * input[620]
        mul_input[0] = uint256(18564048026796173226370100841901669035437915282421767759427224985577253116844); // vk.K[622].X
        mul_input[1] = uint256(8347018396950344118351476284401118362381637753432120048135034765553422897479); // vk.K[622].Y
        mul_input[2] = input[621];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[622] * input[621]
        mul_input[0] = uint256(3524456261176464783309604385350811904625278037771090284799585759747902378030); // vk.K[623].X
        mul_input[1] = uint256(10759344086888230654936165318813283164402392275919586961285104332009453346981); // vk.K[623].Y
        mul_input[2] = input[622];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[623] * input[622]
        mul_input[0] = uint256(14347238469171043528249363607615859548643157727802068181509126679001273649665); // vk.K[624].X
        mul_input[1] = uint256(5256524983773363873766166710547805224267220942455633599579725383211751478372); // vk.K[624].Y
        mul_input[2] = input[623];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[624] * input[623]
        mul_input[0] = uint256(17826662467912642700600197287129993745225436058607309844147512968289986187651); // vk.K[625].X
        mul_input[1] = uint256(16076173023906251700954949972274130853787628128609134918333234408359166650540); // vk.K[625].Y
        mul_input[2] = input[624];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[625] * input[624]
        mul_input[0] = uint256(14314231214681446436721119836909915836490859138632309821026462002354044563756); // vk.K[626].X
        mul_input[1] = uint256(10453323456443455726805902275946374699926342519407900733747873554073958343048); // vk.K[626].Y
        mul_input[2] = input[625];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[626] * input[625]
        mul_input[0] = uint256(7764686560875800819095860594244765307186383631023018355143836228364433179135); // vk.K[627].X
        mul_input[1] = uint256(19615480014729667190576101321109885275217411919027997072985727396624683505233); // vk.K[627].Y
        mul_input[2] = input[626];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[627] * input[626]
        mul_input[0] = uint256(9018934982649879301209848868945280982606747164644890643350326332606310430548); // vk.K[628].X
        mul_input[1] = uint256(16010695355108104146148122894268454337555444607111497976919533199391546650829); // vk.K[628].Y
        mul_input[2] = input[627];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[628] * input[627]
        mul_input[0] = uint256(7202763388315718728822256720481570845968351001804318436873266504282878834534); // vk.K[629].X
        mul_input[1] = uint256(6401115618533725334993623097951616460732194806669713113513515240680392136527); // vk.K[629].Y
        mul_input[2] = input[628];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[629] * input[628]
        mul_input[0] = uint256(16166368579769093526177934328848971374232170137811303540223528528660849012664); // vk.K[630].X
        mul_input[1] = uint256(10240290055726498432372903115498073461068022541288426420247148384309772586618); // vk.K[630].Y
        mul_input[2] = input[629];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[630] * input[629]
        mul_input[0] = uint256(6724552675750171614764983757281033978169531526090111452117949801127820731291); // vk.K[631].X
        mul_input[1] = uint256(17773307815648858921549669301558796407071502187592385919259362857329197365647); // vk.K[631].Y
        mul_input[2] = input[630];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[631] * input[630]
        mul_input[0] = uint256(19749629592351432805787990793226554538005731578507066609672149721686231017657); // vk.K[632].X
        mul_input[1] = uint256(8707922399286575911291706713536140820038640024361593018738128988143008755815); // vk.K[632].Y
        mul_input[2] = input[631];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[632] * input[631]
        mul_input[0] = uint256(16308678247982478865980269483667977806081946783137446722728790111742464335139); // vk.K[633].X
        mul_input[1] = uint256(18210178681871665434821726286361707047853509508395539890842936587627717273709); // vk.K[633].Y
        mul_input[2] = input[632];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[633] * input[632]
        mul_input[0] = uint256(17624946875967841647238138382271080598578640952211461383671119050998033680774); // vk.K[634].X
        mul_input[1] = uint256(11349977299854541611250752084956542687440204454646974073420810163387572195932); // vk.K[634].Y
        mul_input[2] = input[633];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[634] * input[633]
        mul_input[0] = uint256(19232197423993808241525186774507888135322685650097031111669065462111173776774); // vk.K[635].X
        mul_input[1] = uint256(21075491080384086944207645063959759777323530543656504251488289103291159881785); // vk.K[635].Y
        mul_input[2] = input[634];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[635] * input[634]
        mul_input[0] = uint256(10955975274297917996335729191603124573535862180070962546694035381889605469793); // vk.K[636].X
        mul_input[1] = uint256(3320154850900977468881384288542113892354771004099716272813401215351955115392); // vk.K[636].Y
        mul_input[2] = input[635];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[636] * input[635]
        mul_input[0] = uint256(7630405589503186568088673737627230973349633637247719856468408204147921596663); // vk.K[637].X
        mul_input[1] = uint256(10679506317727958842321077850655673996730178802635860632238595127563508416005); // vk.K[637].Y
        mul_input[2] = input[636];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[637] * input[636]
        mul_input[0] = uint256(5778785703442574335191716769408312105781751325902008006463488891191222454698); // vk.K[638].X
        mul_input[1] = uint256(8643052353569385932229896824897951540580978288780988350304266198864986050345); // vk.K[638].Y
        mul_input[2] = input[637];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[638] * input[637]
        mul_input[0] = uint256(9015245800653822388935013028032548037810141074045353180047422534453999762221); // vk.K[639].X
        mul_input[1] = uint256(15872926392510552424591005882790689956280242229520000615015044196954945780377); // vk.K[639].Y
        mul_input[2] = input[638];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[639] * input[638]
        mul_input[0] = uint256(5798756736731241974358087843381888360240686899670536200521287717777683244976); // vk.K[640].X
        mul_input[1] = uint256(14839475937508406271141696449676514330501017673502355025280655649208738150430); // vk.K[640].Y
        mul_input[2] = input[639];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[640] * input[639]
        mul_input[0] = uint256(2745336489587271434741195429572030813508135852861436669977239235528205517664); // vk.K[641].X
        mul_input[1] = uint256(4735313617285258593922551827068241637425438798083796135600725043980735595015); // vk.K[641].Y
        mul_input[2] = input[640];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[641] * input[640]
        mul_input[0] = uint256(2886687732265196320770253894029601021676924390411076501115880535072276258175); // vk.K[642].X
        mul_input[1] = uint256(5340225754258291689649601293951643747241966160761100165627999248753368789474); // vk.K[642].Y
        mul_input[2] = input[641];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[642] * input[641]
        mul_input[0] = uint256(7006726688517394291466443943730461646109515179865632994453324530109489680448); // vk.K[643].X
        mul_input[1] = uint256(3931068912290277450375785381551258823609181174789145659996114508484826107292); // vk.K[643].Y
        mul_input[2] = input[642];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[643] * input[642]
        mul_input[0] = uint256(10171133074927762327060692026062952577328547699686463331579508595325402971499); // vk.K[644].X
        mul_input[1] = uint256(9795306786488880546994122102974898867426787234967089415327489472511482947382); // vk.K[644].Y
        mul_input[2] = input[643];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[644] * input[643]
        mul_input[0] = uint256(20076517191920253783176130860003060676150228977266841439294466955757602761283); // vk.K[645].X
        mul_input[1] = uint256(17345798305902335348791856603820396965367899877894599814054485360676479462184); // vk.K[645].Y
        mul_input[2] = input[644];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[645] * input[644]
        mul_input[0] = uint256(10879537857861289652852551895180122109401889140539830305448486856742088407285); // vk.K[646].X
        mul_input[1] = uint256(12762209410171602772878700546095353990981643611062389624235764804510798415678); // vk.K[646].Y
        mul_input[2] = input[645];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[646] * input[645]
        mul_input[0] = uint256(987174891252911855408610614200413212710662547018798337823558789676158658492); // vk.K[647].X
        mul_input[1] = uint256(10004448108323905772270697499637608492187651203935267719935254764446642814977); // vk.K[647].Y
        mul_input[2] = input[646];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[647] * input[646]
        mul_input[0] = uint256(20114011665368892340998154199744816579850178776755944314926159288949639204019); // vk.K[648].X
        mul_input[1] = uint256(19857171813997861079220978448521171868954081723006049284918243371765639145454); // vk.K[648].Y
        mul_input[2] = input[647];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[648] * input[647]
        mul_input[0] = uint256(2142540294190073420046738262766536444456250571264418043788412824641050037731); // vk.K[649].X
        mul_input[1] = uint256(17515546941820939117629081264373674292858600627811789256300262812639151646942); // vk.K[649].Y
        mul_input[2] = input[648];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[649] * input[648]
        mul_input[0] = uint256(5452305338717267295625766968546480464448912448453403743135282687954060739834); // vk.K[650].X
        mul_input[1] = uint256(3303404943866927689568659975143994441678283356241351944097906483200327262644); // vk.K[650].Y
        mul_input[2] = input[649];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[650] * input[649]
        mul_input[0] = uint256(10520237234256243080084628687589410189283274669411985324002595113727717799647); // vk.K[651].X
        mul_input[1] = uint256(16201277952055328607524701336590222264740743828625831623555460461198903473228); // vk.K[651].Y
        mul_input[2] = input[650];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[651] * input[650]
        mul_input[0] = uint256(17352206312922413984409010743880688631934585389554628908062648697453672399066); // vk.K[652].X
        mul_input[1] = uint256(17577499568750854689168892743291053003073362104289101702595785005282426093329); // vk.K[652].Y
        mul_input[2] = input[651];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[652] * input[651]
        mul_input[0] = uint256(18043551881697280910616806724974812316083009129252942660875403545569653019187); // vk.K[653].X
        mul_input[1] = uint256(2871310067633715378700488670713212944806507459709235308090066024767735643200); // vk.K[653].Y
        mul_input[2] = input[652];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[653] * input[652]
        mul_input[0] = uint256(1212915223764346354826270446249024700004351039557099549871488706624591025551); // vk.K[654].X
        mul_input[1] = uint256(3158662334534381729711636800780687227720496637815766737866998534178554629903); // vk.K[654].Y
        mul_input[2] = input[653];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[654] * input[653]
        mul_input[0] = uint256(1395917461476968808307063799391341524162517867522981675003578638921043552540); // vk.K[655].X
        mul_input[1] = uint256(10235699710638334509420704834673018963976339171906282265456738802417235997446); // vk.K[655].Y
        mul_input[2] = input[654];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[655] * input[654]
        mul_input[0] = uint256(204181636719936137222572161019888056148052357167882854349050155764814952614); // vk.K[656].X
        mul_input[1] = uint256(1699836159136285874562895153277753088301959661195687458947602721122256436749); // vk.K[656].Y
        mul_input[2] = input[655];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[656] * input[655]
        mul_input[0] = uint256(19129646386051592343257808937724764979190429970670603575501723140016987212146); // vk.K[657].X
        mul_input[1] = uint256(17264491161797218356050857159460723193358150335189051687750398921765936338121); // vk.K[657].Y
        mul_input[2] = input[656];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[657] * input[656]
        mul_input[0] = uint256(16183930422651374217566044226213265827799178146897316868665546417936890099230); // vk.K[658].X
        mul_input[1] = uint256(7949100350683108247847396103422668736725338881653238057593842159278077888562); // vk.K[658].Y
        mul_input[2] = input[657];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[658] * input[657]
        mul_input[0] = uint256(3520924869265134244338840622996625710819491794387405119703538668563183246392); // vk.K[659].X
        mul_input[1] = uint256(7374336582235852925005752524911071975332112303207125297314109496184068231521); // vk.K[659].Y
        mul_input[2] = input[658];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[659] * input[658]
        mul_input[0] = uint256(16597698205890996054430478000677201649597038166765224480380650687048827122333); // vk.K[660].X
        mul_input[1] = uint256(9630738205404530124980848181390620078913949964812191671443881698523546043311); // vk.K[660].Y
        mul_input[2] = input[659];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[660] * input[659]
        mul_input[0] = uint256(10034459093762147957010713960176830142120841137828491469233363960016177685075); // vk.K[661].X
        mul_input[1] = uint256(388105496784763327920858422387449682297460401843352488812741603992961503544); // vk.K[661].Y
        mul_input[2] = input[660];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[661] * input[660]
        mul_input[0] = uint256(16830515383388955061708607913666873806021836106982888157135053471665168953237); // vk.K[662].X
        mul_input[1] = uint256(17025186005785252522612494597335963740366815933989482888304377921399177603300); // vk.K[662].Y
        mul_input[2] = input[661];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[662] * input[661]
        mul_input[0] = uint256(16000523553792796857411848644372907902349964588160271475181804937051965031896); // vk.K[663].X
        mul_input[1] = uint256(15553032560693371906173656647130251981460738165951947239416631129476351382881); // vk.K[663].Y
        mul_input[2] = input[662];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[663] * input[662]
        mul_input[0] = uint256(19042755695871433263095952614168844192328698165216987399156140660609950063812); // vk.K[664].X
        mul_input[1] = uint256(19803934910957132685902384529726181037633422194360187263149771683662653741705); // vk.K[664].Y
        mul_input[2] = input[663];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[664] * input[663]
        mul_input[0] = uint256(15462497665269540517259291656587144213914249640288813987192256946103440819633); // vk.K[665].X
        mul_input[1] = uint256(6616251009182519227516356570090736610104878443457442322716482986673213619924); // vk.K[665].Y
        mul_input[2] = input[664];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[665] * input[664]
        mul_input[0] = uint256(7577521995197185748725735562598240986879089288704692711968686634307823248676); // vk.K[666].X
        mul_input[1] = uint256(12007235631310315500512220322189950749016005392166463063287001159933404140921); // vk.K[666].Y
        mul_input[2] = input[665];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[666] * input[665]
        mul_input[0] = uint256(12993320358496866731358947745808190490065672881031935083189680403633642237164); // vk.K[667].X
        mul_input[1] = uint256(7983756042795718886295274978604014149376847491836347672726904910926496254471); // vk.K[667].Y
        mul_input[2] = input[666];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[667] * input[666]
        mul_input[0] = uint256(12690528420993486731468375595471715484758303966151247523783546120189070506266); // vk.K[668].X
        mul_input[1] = uint256(18111345650455736313355497945051930100710558903230502164920786902923736974572); // vk.K[668].Y
        mul_input[2] = input[667];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[668] * input[667]
        mul_input[0] = uint256(214272942504417803447446872126468052093456081515747664000961596828977504494); // vk.K[669].X
        mul_input[1] = uint256(13837544777680323214460547336394284388269174118108484687001980119775151129713); // vk.K[669].Y
        mul_input[2] = input[668];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[669] * input[668]
        mul_input[0] = uint256(9917314988132667529476029270412959771060196877809332693039339379340996063409); // vk.K[670].X
        mul_input[1] = uint256(458646716670821238702992431228274343395134605645425515582572396979147269377); // vk.K[670].Y
        mul_input[2] = input[669];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[670] * input[669]
        mul_input[0] = uint256(16082111420466475893589119242063239959619002239839080482264453481260135980370); // vk.K[671].X
        mul_input[1] = uint256(18490303896523916698167642478017059537602281663258768270092067508655768896843); // vk.K[671].Y
        mul_input[2] = input[670];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[671] * input[670]
        mul_input[0] = uint256(11081695626547775105368185891888902887041416779513259718365193686924235501540); // vk.K[672].X
        mul_input[1] = uint256(2569019652586530453998610648321784593261605362168705464570222834284720397093); // vk.K[672].Y
        mul_input[2] = input[671];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[672] * input[671]
        mul_input[0] = uint256(14038863980868690350424181716477174520984295286737599937011490489486186066029); // vk.K[673].X
        mul_input[1] = uint256(1780681851843829522656186913763035645997953871799897116353994358377051444012); // vk.K[673].Y
        mul_input[2] = input[672];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[673] * input[672]
        mul_input[0] = uint256(13415747020195578299174335814714392290074777894383165349554505741880782914638); // vk.K[674].X
        mul_input[1] = uint256(9010327824798980581354062261310012540949284010368611318538320986206577776883); // vk.K[674].Y
        mul_input[2] = input[673];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[674] * input[673]
        mul_input[0] = uint256(4816478563910842750123217468756389975017432874572653481131225495188132932539); // vk.K[675].X
        mul_input[1] = uint256(123293254358605790837848401190099291504481053500866728249967420654242869562); // vk.K[675].Y
        mul_input[2] = input[674];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[675] * input[674]
        mul_input[0] = uint256(19972705991134410466840013533108755555999879414344234172723857728151497714879); // vk.K[676].X
        mul_input[1] = uint256(1746380215657983842645225042145059679382837690932642828759331560374003083777); // vk.K[676].Y
        mul_input[2] = input[675];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[676] * input[675]
        mul_input[0] = uint256(20591713682849484068342193861927723266544793250631542611594866605234951521557); // vk.K[677].X
        mul_input[1] = uint256(21516385367003238334757043551749760281638064931191890476437657520043971429573); // vk.K[677].Y
        mul_input[2] = input[676];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[677] * input[676]
        mul_input[0] = uint256(765686287906866957281768513160434070461064761258282552624290720407385335829); // vk.K[678].X
        mul_input[1] = uint256(19946154933170438060424791778311263892023240962389723058505389261134328370175); // vk.K[678].Y
        mul_input[2] = input[677];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[678] * input[677]
        mul_input[0] = uint256(1450263922959661612766209136624444630682417251884675277898588321933589049734); // vk.K[679].X
        mul_input[1] = uint256(5247484971772745163230219309251721486383067473074776087807418428213390576); // vk.K[679].Y
        mul_input[2] = input[678];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[679] * input[678]
        mul_input[0] = uint256(14409209025936134933074103409339809295377367442812510840566417102394200208633); // vk.K[680].X
        mul_input[1] = uint256(3498069755060975732834976813343004160601797226093513741999276732730576871913); // vk.K[680].Y
        mul_input[2] = input[679];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[680] * input[679]
        mul_input[0] = uint256(19913038419402690656968589728419515702934099892276398740308133233252685257810); // vk.K[681].X
        mul_input[1] = uint256(18744921654887689365336325269690671893628583967567900513456285385392229919268); // vk.K[681].Y
        mul_input[2] = input[680];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[681] * input[680]
        mul_input[0] = uint256(18638819784476009767224024198050440373255052147832604007885115813626024923467); // vk.K[682].X
        mul_input[1] = uint256(166097771084691069211718125906734804724993035970257010384060453071452422522); // vk.K[682].Y
        mul_input[2] = input[681];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[682] * input[681]
        mul_input[0] = uint256(7263754174601121567456505800092453749546090525530374756146763221057880867209); // vk.K[683].X
        mul_input[1] = uint256(6230088419812086008301117058602596940752064651874538147962412792020792638069); // vk.K[683].Y
        mul_input[2] = input[682];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[683] * input[682]
        mul_input[0] = uint256(3057340228678568734210341803409139980268589974344095848056782071039103830990); // vk.K[684].X
        mul_input[1] = uint256(10521424993916616690010034880445945223255146458803429572833373405925672691076); // vk.K[684].Y
        mul_input[2] = input[683];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[684] * input[683]
        mul_input[0] = uint256(3705497484108191041252635917455059215011641950874646189783073935839949362505); // vk.K[685].X
        mul_input[1] = uint256(12028716044184995861389442565711667260918732691296719528572488587573118134141); // vk.K[685].Y
        mul_input[2] = input[684];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[685] * input[684]
        mul_input[0] = uint256(3123562110581329938239836858016295960362092657943828848515492578434705516761); // vk.K[686].X
        mul_input[1] = uint256(13946099977295199658630751123437239666528327821858967047995766451275189089994); // vk.K[686].Y
        mul_input[2] = input[685];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[686] * input[685]
        mul_input[0] = uint256(18877850610727178550179622933783873376183451817433953285473232078041892694190); // vk.K[687].X
        mul_input[1] = uint256(16562306877032596648274149205972495071308523327385009122081059966534760185918); // vk.K[687].Y
        mul_input[2] = input[686];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[687] * input[686]
        mul_input[0] = uint256(18294383187226020973236075706006508381549117657326615593623101036159020595094); // vk.K[688].X
        mul_input[1] = uint256(11408576822238115895258403853390731989636151086596076680181072356571305445662); // vk.K[688].Y
        mul_input[2] = input[687];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[688] * input[687]
        mul_input[0] = uint256(1375602216967307168190607754113461096602656693627758668749929045295382613221); // vk.K[689].X
        mul_input[1] = uint256(10269920838441852862088490834181190552676548841473185161848208270780018630407); // vk.K[689].Y
        mul_input[2] = input[688];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[689] * input[688]
        mul_input[0] = uint256(21669267932736221200270489344743934056764751139851044376827909893382203514463); // vk.K[690].X
        mul_input[1] = uint256(18943635654419354571502217319251203502426521017755199618865948224583674903895); // vk.K[690].Y
        mul_input[2] = input[689];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[690] * input[689]
        mul_input[0] = uint256(75173733579612120256569369969630547123031268178923848491104920267022435139); // vk.K[691].X
        mul_input[1] = uint256(2253874528204834306759604006102384787701553726995208588617050082210945742810); // vk.K[691].Y
        mul_input[2] = input[690];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[691] * input[690]
        mul_input[0] = uint256(8178262538392095001888510417360956728142141548608299096873434791685117135529); // vk.K[692].X
        mul_input[1] = uint256(19055420718927432985263125864050856882748013538711231837201425631561040129024); // vk.K[692].Y
        mul_input[2] = input[691];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[692] * input[691]
        mul_input[0] = uint256(16772565630912619167262432521783969879438006764562609095993607061942273741448); // vk.K[693].X
        mul_input[1] = uint256(7092750112540703182018109069953208712350215640437075986301317115877023350425); // vk.K[693].Y
        mul_input[2] = input[692];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[693] * input[692]
        mul_input[0] = uint256(617353946651967828624558424883834374254720432961457448957820347910869416962); // vk.K[694].X
        mul_input[1] = uint256(2646045467284699893558972440068814701659662383841295084477739022325189882868); // vk.K[694].Y
        mul_input[2] = input[693];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[694] * input[693]
        mul_input[0] = uint256(11535335984337231288651822147245466931158459736767092293730644765892159594252); // vk.K[695].X
        mul_input[1] = uint256(21140025091188143189591242754919212526275948532561073110970325882590891140545); // vk.K[695].Y
        mul_input[2] = input[694];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[695] * input[694]
        mul_input[0] = uint256(10828633197408227714370849004571028333665046786092841066991901529975285433873); // vk.K[696].X
        mul_input[1] = uint256(17322763823306120821345525183492744296959899554380441879539581327941764654336); // vk.K[696].Y
        mul_input[2] = input[695];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[696] * input[695]
        mul_input[0] = uint256(19093424921877296902905969311602645950390315651305708375118075952347432299502); // vk.K[697].X
        mul_input[1] = uint256(1837941565828746708836615251276498495313702665711256763423057221158274103043); // vk.K[697].Y
        mul_input[2] = input[696];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[697] * input[696]
        mul_input[0] = uint256(12699095668395157992783963292744583552371800875890268773286440522256168869224); // vk.K[698].X
        mul_input[1] = uint256(19907809226734231026566604195274265455995759975788573596141478991502701021916); // vk.K[698].Y
        mul_input[2] = input[697];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[698] * input[697]
        mul_input[0] = uint256(7915129087055094441314829171913211697979233843512774110571624343027717955165); // vk.K[699].X
        mul_input[1] = uint256(15932330476980711595499949278204858406763223494797428101273949997233199709427); // vk.K[699].Y
        mul_input[2] = input[698];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[699] * input[698]
        mul_input[0] = uint256(12050821891329272407446788708112745749853106883397428878080839341746002706242); // vk.K[700].X
        mul_input[1] = uint256(20161577614180531588615141687161148261299700441354928973404680140431563235145); // vk.K[700].Y
        mul_input[2] = input[699];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[700] * input[699]
        mul_input[0] = uint256(5444039933852605131075849985066546612711244209152658534180477141797350763908); // vk.K[701].X
        mul_input[1] = uint256(20667869465487168298721610267236742712645979211338296202989353356409479268642); // vk.K[701].Y
        mul_input[2] = input[700];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[701] * input[700]
        mul_input[0] = uint256(17869924709956486888990184551797007395204889512018027195351853673013419706430); // vk.K[702].X
        mul_input[1] = uint256(12294478548078582318814175592556808828383189174059645240004868910167592258332); // vk.K[702].Y
        mul_input[2] = input[701];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[702] * input[701]
        mul_input[0] = uint256(5343867096974244313715519646894434287990881374736723260646084488113599167031); // vk.K[703].X
        mul_input[1] = uint256(9755244357251253676504712505428129872999910528207831390778224391553396270109); // vk.K[703].Y
        mul_input[2] = input[702];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[703] * input[702]
        mul_input[0] = uint256(15670377662329416029659152820706624546674538699195533181269005729157985779177); // vk.K[704].X
        mul_input[1] = uint256(181856276860407415284545270677511846642719046059657955636013146427995662372); // vk.K[704].Y
        mul_input[2] = input[703];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[704] * input[703]
        mul_input[0] = uint256(14415376623578785266369665775030950232806255503374379137945441282151964370971); // vk.K[705].X
        mul_input[1] = uint256(3870915406882753494238386031029523781165119255780587457328576355889040653884); // vk.K[705].Y
        mul_input[2] = input[704];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[705] * input[704]
        mul_input[0] = uint256(5453143807798755736396389264178829232966626368676931143575900626224657544234); // vk.K[706].X
        mul_input[1] = uint256(7541039908860606774356803314029185899746811907936562685851160250401011136324); // vk.K[706].Y
        mul_input[2] = input[705];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[706] * input[705]
        mul_input[0] = uint256(10946504564370922971228322491138541651811160163741717506479688315389001146516); // vk.K[707].X
        mul_input[1] = uint256(15926905227129071186479119225620505482691673361151438969343426340289847053663); // vk.K[707].Y
        mul_input[2] = input[706];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[707] * input[706]
        mul_input[0] = uint256(14857194327144227855272246548064979425519548825926873424520769298945674616820); // vk.K[708].X
        mul_input[1] = uint256(416691399044867425456729684217908627034391759847363013782615635409506347814); // vk.K[708].Y
        mul_input[2] = input[707];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[708] * input[707]
        mul_input[0] = uint256(16310286425783991424307427503394900806447404328814977816718804612650608367199); // vk.K[709].X
        mul_input[1] = uint256(20679278000199336185290091209761525212845438664207628610801178983977757995923); // vk.K[709].Y
        mul_input[2] = input[708];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[709] * input[708]
        mul_input[0] = uint256(9673177127497087021308916297736390417101184191358343143575668079478341707719); // vk.K[710].X
        mul_input[1] = uint256(20140400299787373712228414756133235923776789745268202220377508013773227956024); // vk.K[710].Y
        mul_input[2] = input[709];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[710] * input[709]
        mul_input[0] = uint256(11638013509381061417036583325095914158718275887330010373497112119901178562187); // vk.K[711].X
        mul_input[1] = uint256(19266226469961450511010574044046905373900240974105566520277243409928071752964); // vk.K[711].Y
        mul_input[2] = input[710];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[711] * input[710]
        mul_input[0] = uint256(6760886314394168878282882060320526551182643530616547450203851671100850593312); // vk.K[712].X
        mul_input[1] = uint256(10990737853369115758337830716453539805865124182831719908135894054035167661153); // vk.K[712].Y
        mul_input[2] = input[711];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[712] * input[711]
        mul_input[0] = uint256(11394730495102932665632595128139227916057501080996149864222297721761431453815); // vk.K[713].X
        mul_input[1] = uint256(4465355916863101849678789664046429166801918325560860352881155149799925898891); // vk.K[713].Y
        mul_input[2] = input[712];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[713] * input[712]
        mul_input[0] = uint256(6848397543426041455389961446330614409931884232752511188473117910482604818675); // vk.K[714].X
        mul_input[1] = uint256(19191736361987148988455264639696079039470917059411067576831548539563960231591); // vk.K[714].Y
        mul_input[2] = input[713];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[714] * input[713]
        mul_input[0] = uint256(12543629579091588821428477054021903740233469521157609641911137014927790863921); // vk.K[715].X
        mul_input[1] = uint256(9110221236375742900127149584898674022999798788282599232394287321253320342723); // vk.K[715].Y
        mul_input[2] = input[714];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[715] * input[714]
        mul_input[0] = uint256(11114816627618802732807434387826346350279123963775246197350791068908040905628); // vk.K[716].X
        mul_input[1] = uint256(12426106233616741511486066675384930483114175409016166629362288620501682405451); // vk.K[716].Y
        mul_input[2] = input[715];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[716] * input[715]
        mul_input[0] = uint256(11058333406792936508687532312972953994141896059649658560294366089956398269750); // vk.K[717].X
        mul_input[1] = uint256(10479145453394789822504110725907769209972086146790064101892894562021049510158); // vk.K[717].Y
        mul_input[2] = input[716];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[717] * input[716]
        mul_input[0] = uint256(11560926973818191665765813496553138279523320065037457045165940505081326419669); // vk.K[718].X
        mul_input[1] = uint256(1094310231033350970053093272020298046055234920461682020284129669483787629411); // vk.K[718].Y
        mul_input[2] = input[717];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[718] * input[717]
        mul_input[0] = uint256(1070410107259772692910324628348624686960891713559154243786203129196686783840); // vk.K[719].X
        mul_input[1] = uint256(12384762801419965253859362658025001358071664337266771097413418730028728324852); // vk.K[719].Y
        mul_input[2] = input[718];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[719] * input[718]
        mul_input[0] = uint256(10734666134765162226606901804880284385871114381696253930433645459081318922995); // vk.K[720].X
        mul_input[1] = uint256(4808422900993854649618746128963678653967783972736275585380092398730079855151); // vk.K[720].Y
        mul_input[2] = input[719];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[720] * input[719]
        mul_input[0] = uint256(5676653791058246401796277165723638626320123609259843536093791418525320000122); // vk.K[721].X
        mul_input[1] = uint256(21217062412847034451921586706742250744620338226958460772189545143200265160188); // vk.K[721].Y
        mul_input[2] = input[720];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[721] * input[720]
        mul_input[0] = uint256(9946072105126050573877336057799722016201208744780013175456676140450559076118); // vk.K[722].X
        mul_input[1] = uint256(13679642578682041778368630078305406410181115007052781101215335124582714762452); // vk.K[722].Y
        mul_input[2] = input[721];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[722] * input[721]
        mul_input[0] = uint256(14920723259677379846495829800578682661349201001452807599118742186185314449175); // vk.K[723].X
        mul_input[1] = uint256(482524442802841547285017751493510443115017831784985719620164954639217995052); // vk.K[723].Y
        mul_input[2] = input[722];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[723] * input[722]
        mul_input[0] = uint256(17883489306224007484122335227059627227266102042915664290328922861658085150934); // vk.K[724].X
        mul_input[1] = uint256(15894023094128276791614753643287737715727234356023524007315864985384512558247); // vk.K[724].Y
        mul_input[2] = input[723];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[724] * input[723]
        mul_input[0] = uint256(4405642884279843930630415915596177148462031506143210378002212658210486030109); // vk.K[725].X
        mul_input[1] = uint256(511610901214614802331801681330382263005119772617644541076117146097577680142); // vk.K[725].Y
        mul_input[2] = input[724];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[725] * input[724]
        mul_input[0] = uint256(4772161101189034560208599979221207549514248765120913882798355339572409023308); // vk.K[726].X
        mul_input[1] = uint256(17965387962489708089240135730840470116343127546648389612943117298967435602942); // vk.K[726].Y
        mul_input[2] = input[725];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[726] * input[725]
        mul_input[0] = uint256(16883040459430720040299243498987261724070891539861177212135585307686501151142); // vk.K[727].X
        mul_input[1] = uint256(21299478818638670635834006247527964570978989227515107020577354137126109546864); // vk.K[727].Y
        mul_input[2] = input[726];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[727] * input[726]
        mul_input[0] = uint256(1155803002946833912940421111948667957169599103754664330451429048078877408907); // vk.K[728].X
        mul_input[1] = uint256(19993947572068409845457205350326307435343148816044607496299421976193029677328); // vk.K[728].Y
        mul_input[2] = input[727];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[728] * input[727]
        mul_input[0] = uint256(13017360762812273136249150070654244055763633965064849197174682230660099720198); // vk.K[729].X
        mul_input[1] = uint256(21037045302402076972694386631200278026236524335762958858429871830648898361573); // vk.K[729].Y
        mul_input[2] = input[728];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[729] * input[728]
        mul_input[0] = uint256(489247906924235041837940863199029447813509978074377626454697794391916991188); // vk.K[730].X
        mul_input[1] = uint256(13657323606058990611382474481486134530279910694824154778807082448566231032707); // vk.K[730].Y
        mul_input[2] = input[729];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[730] * input[729]
        mul_input[0] = uint256(13032054413992846592013424300423727531726343650165003818715056530101079945333); // vk.K[731].X
        mul_input[1] = uint256(14845226668340586434099655523434014016508980622657949323156841628275971189463); // vk.K[731].Y
        mul_input[2] = input[730];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[731] * input[730]
        mul_input[0] = uint256(12621554717188079483398646368309675545861413497193068968043416154151492218584); // vk.K[732].X
        mul_input[1] = uint256(8473304565072382386578773429415618398882187942804027007393007023326887914059); // vk.K[732].Y
        mul_input[2] = input[731];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[732] * input[731]
        mul_input[0] = uint256(21486623954051861016749922182886971027603399190967908447664099731163470574307); // vk.K[733].X
        mul_input[1] = uint256(8685198469408402111559929964662371900369408247313436840805138119893980344576); // vk.K[733].Y
        mul_input[2] = input[732];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[733] * input[732]
        mul_input[0] = uint256(12303731026327442219121238493703518750748499577945155531979823325005592752209); // vk.K[734].X
        mul_input[1] = uint256(10237031923018062768863854510031040601797297102050092805985779647103520803083); // vk.K[734].Y
        mul_input[2] = input[733];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[734] * input[733]
        mul_input[0] = uint256(15335973422670836263323591067788162172625713638824924566152865052838115245967); // vk.K[735].X
        mul_input[1] = uint256(9365497320261384966827538982983170290656068646327795984126317007095901503348); // vk.K[735].Y
        mul_input[2] = input[734];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[735] * input[734]
        mul_input[0] = uint256(3217954059661031069339486615297255842576892863536324739957482545738568859283); // vk.K[736].X
        mul_input[1] = uint256(4846562027299608471367146170557601032816857062137603620879534357422902560497); // vk.K[736].Y
        mul_input[2] = input[735];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[736] * input[735]
        mul_input[0] = uint256(20227815632501464798302371631983300374384754597027057658366615252184863966356); // vk.K[737].X
        mul_input[1] = uint256(14735362183989276434956523535821945288390006340156450538361805153903888252253); // vk.K[737].Y
        mul_input[2] = input[736];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[737] * input[736]
        mul_input[0] = uint256(11540689715653613915965190244120261956581265677250006557661550375336110479187); // vk.K[738].X
        mul_input[1] = uint256(8126571901130756768444299636249424147849834692168969318246752553308655514331); // vk.K[738].Y
        mul_input[2] = input[737];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[738] * input[737]
        mul_input[0] = uint256(7118086766879223834954121297868410199992917095319946337799083900541918967766); // vk.K[739].X
        mul_input[1] = uint256(16331845498026561493534326773488251516221569687350730313551704246686125162970); // vk.K[739].Y
        mul_input[2] = input[738];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[739] * input[738]
        mul_input[0] = uint256(12061919465639812744569577631212211227742431176989162429141139864336986330460); // vk.K[740].X
        mul_input[1] = uint256(7330348620306976679642293824072335184596079094850095235620465987670545558394); // vk.K[740].Y
        mul_input[2] = input[739];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[740] * input[739]
        mul_input[0] = uint256(11261027000806310417287207487148707919033298693758616468807657566464415144967); // vk.K[741].X
        mul_input[1] = uint256(1251154362535459482722306396442380827607214009748797446533682985540842590913); // vk.K[741].Y
        mul_input[2] = input[740];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[741] * input[740]
        mul_input[0] = uint256(15125848713323205123778433877489314189272517458275678759450886775759249587559); // vk.K[742].X
        mul_input[1] = uint256(21459578109561644531371495789356593053387111784091358968800127799328646315611); // vk.K[742].Y
        mul_input[2] = input[741];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[742] * input[741]
        mul_input[0] = uint256(5348200490477641243317309690511402879882770744917619347549672722535444750180); // vk.K[743].X
        mul_input[1] = uint256(4921793849982395230399271089411405363408132802611596362734924844700875679522); // vk.K[743].Y
        mul_input[2] = input[742];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[743] * input[742]
        mul_input[0] = uint256(5010567052608191100914746623037175918076825596848981651328741954837941861452); // vk.K[744].X
        mul_input[1] = uint256(18265422939154466612229524871047949691018588401546149043619299851487238343114); // vk.K[744].Y
        mul_input[2] = input[743];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[744] * input[743]
        mul_input[0] = uint256(10560668452901890627371253906564244794638599701257984339180925036264575931447); // vk.K[745].X
        mul_input[1] = uint256(2663081459360561836579743049678029638008962382702120509433964124894890663484); // vk.K[745].Y
        mul_input[2] = input[744];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[745] * input[744]
        mul_input[0] = uint256(12986663588416783185306211034574267723398958483523100473498452240993118338050); // vk.K[746].X
        mul_input[1] = uint256(15038096865528854504877967096303308374883942966546522446009281485629773768593); // vk.K[746].Y
        mul_input[2] = input[745];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[746] * input[745]
        mul_input[0] = uint256(10878789884575274710956925396281289840864144517330383484033361952484972034657); // vk.K[747].X
        mul_input[1] = uint256(15583139883070683175758443225076044364086654816356756018384095302813427982541); // vk.K[747].Y
        mul_input[2] = input[746];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[747] * input[746]
        mul_input[0] = uint256(15434921169040060138846397791040863018383530835424637273221322044803404177226); // vk.K[748].X
        mul_input[1] = uint256(6868567607991298121582454374148176862398209571860205094275034893771929679851); // vk.K[748].Y
        mul_input[2] = input[747];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[748] * input[747]
        mul_input[0] = uint256(4598228994421869842337989325622492924815738063560175015300622779010269139554); // vk.K[749].X
        mul_input[1] = uint256(16943037722127095048446505733710976507518912799106409075490367075232101694026); // vk.K[749].Y
        mul_input[2] = input[748];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[749] * input[748]
        mul_input[0] = uint256(18797559544161260670873260445581027423507867929156449376172676594141332196801); // vk.K[750].X
        mul_input[1] = uint256(18937468639627782243965856791518632449651580499698637940788396580360034850757); // vk.K[750].Y
        mul_input[2] = input[749];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[750] * input[749]
        mul_input[0] = uint256(4717423532754583720379843820203307631443191618815123260314651911289622460494); // vk.K[751].X
        mul_input[1] = uint256(16264491355234299601797643849994803189331286133521718031031611977636628987119); // vk.K[751].Y
        mul_input[2] = input[750];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[751] * input[750]
        mul_input[0] = uint256(610978450272417537337156253953931523323914626244439626985916067944876889891); // vk.K[752].X
        mul_input[1] = uint256(12104707297943475757175417127169380737733869329677961352024676763197698693884); // vk.K[752].Y
        mul_input[2] = input[751];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[752] * input[751]
        mul_input[0] = uint256(4337616484047786079325856331605783296431749922490853672876848389693169641414); // vk.K[753].X
        mul_input[1] = uint256(8291685522005241003881563318143770816152259419069827375331246393039399698529); // vk.K[753].Y
        mul_input[2] = input[752];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[753] * input[752]
        mul_input[0] = uint256(19682797801868680399716160862279352206218465976716613561449891601895853945230); // vk.K[754].X
        mul_input[1] = uint256(20601856331096340232506686907289194410702858318365807822322481971339183430392); // vk.K[754].Y
        mul_input[2] = input[753];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[754] * input[753]
        mul_input[0] = uint256(21469816175848366769269697413423692433661591458361927375721269959812162849753); // vk.K[755].X
        mul_input[1] = uint256(14227516250591877161759608022938302200982005323829724499664793731441904894731); // vk.K[755].Y
        mul_input[2] = input[754];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[755] * input[754]
        mul_input[0] = uint256(21139556912829061880269267043971592818587245527923082142861382536434726423768); // vk.K[756].X
        mul_input[1] = uint256(12416069505721446680150593895503671611772356916673433878717582904120873871204); // vk.K[756].Y
        mul_input[2] = input[755];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[756] * input[755]
        mul_input[0] = uint256(21113237161982631896449153980377041413406991176672425659974409572128357866479); // vk.K[757].X
        mul_input[1] = uint256(15042346574156148165591653475647519644641668622185922020777994850879954576436); // vk.K[757].Y
        mul_input[2] = input[756];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[757] * input[756]
        mul_input[0] = uint256(5193345187919983233395758794070423258509704966070784858482946390414767652344); // vk.K[758].X
        mul_input[1] = uint256(13422707959043143840637981834286358212466737037765337978393391629829671094720); // vk.K[758].Y
        mul_input[2] = input[757];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[758] * input[757]
        mul_input[0] = uint256(5630416219436335493272611908681503283163880413309668469153771103819696515364); // vk.K[759].X
        mul_input[1] = uint256(11459527840303107602563719437680257434192516100408600168672332262891186221280); // vk.K[759].Y
        mul_input[2] = input[758];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[759] * input[758]
        mul_input[0] = uint256(18459053382440939053710859161512714949827294308877141455887139869391568896195); // vk.K[760].X
        mul_input[1] = uint256(10621620423692328745143943981621177746421231893312029733940016374191393099550); // vk.K[760].Y
        mul_input[2] = input[759];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[760] * input[759]
        mul_input[0] = uint256(18827582012612966832629858663360009802694429978180691964529756714715539277055); // vk.K[761].X
        mul_input[1] = uint256(4108550532417489022736411124161042417891947739820933859227230591981557459986); // vk.K[761].Y
        mul_input[2] = input[760];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[761] * input[760]
        mul_input[0] = uint256(2523069923678970256456625360745865503065075892721987532755506153599548601667); // vk.K[762].X
        mul_input[1] = uint256(20243888539304749956247921392250792803169431235866393148376825485280202478793); // vk.K[762].Y
        mul_input[2] = input[761];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[762] * input[761]
        mul_input[0] = uint256(637964181813858133058179936776596554677181623026876270775451971263175190158); // vk.K[763].X
        mul_input[1] = uint256(13706567096996616283808789285417780724281962731632617950612051139142599365642); // vk.K[763].Y
        mul_input[2] = input[762];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[763] * input[762]
        mul_input[0] = uint256(3726205962674986978205515183989966777278248811257468377021257252447457619948); // vk.K[764].X
        mul_input[1] = uint256(2860688828773111343961437579669908330075920729771314901395782992856376595071); // vk.K[764].Y
        mul_input[2] = input[763];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[764] * input[763]
        mul_input[0] = uint256(13130933950587067644950854745125215268357817720155380631075599572242172050582); // vk.K[765].X
        mul_input[1] = uint256(4183124900345081924461217203180121495948414052908143060478392371613447011437); // vk.K[765].Y
        mul_input[2] = input[764];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[765] * input[764]
        mul_input[0] = uint256(20785267067037253382856235741890946864961200911028808364483527479262775856968); // vk.K[766].X
        mul_input[1] = uint256(12457953908380748271146389086732403806947819989257926597020488599731096601889); // vk.K[766].Y
        mul_input[2] = input[765];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[766] * input[765]
        mul_input[0] = uint256(21203704783176185298854410822539601871299611815948840744960205246693706136774); // vk.K[767].X
        mul_input[1] = uint256(12772143992412257403420217723535643035809615756713300054801636929979469009901); // vk.K[767].Y
        mul_input[2] = input[766];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[767] * input[766]
        mul_input[0] = uint256(21348424737301599936733492858752987288440814320375325970446259130701813393005); // vk.K[768].X
        mul_input[1] = uint256(11015336338051681467645662629135776273909815498361263313922014121852332753392); // vk.K[768].Y
        mul_input[2] = input[767];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[768] * input[767]
        mul_input[0] = uint256(5197980330477378400461731119709686780574819288551356770521064854065934390492); // vk.K[769].X
        mul_input[1] = uint256(21132845706756084997277686959715282008139774372653493823715449936310060438711); // vk.K[769].Y
        mul_input[2] = input[768];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[769] * input[768]
        mul_input[0] = uint256(7663447237400739992788221031256721571524238451213810557520379729538932589119); // vk.K[770].X
        mul_input[1] = uint256(1534999699707616270160810430912340264436112466399469714053301598282761146066); // vk.K[770].Y
        mul_input[2] = input[769];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[770] * input[769]
        mul_input[0] = uint256(21188236237237174280745450366660342178889077178510758376627703421979833652283); // vk.K[771].X
        mul_input[1] = uint256(16169558870583666194499774435230524907488621426502669913910442478936589798509); // vk.K[771].Y
        mul_input[2] = input[770];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[771] * input[770]
        mul_input[0] = uint256(7894323770282485367241804988167916238284431551489235121818481594803465665254); // vk.K[772].X
        mul_input[1] = uint256(16873181077654110299894839237006923624524642187125389321077054195228779586318); // vk.K[772].Y
        mul_input[2] = input[771];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[772] * input[771]
        mul_input[0] = uint256(7455200122737714363543473423040215422181278590494126553690072568933737769575); // vk.K[773].X
        mul_input[1] = uint256(11100927183650804661342036133191498602650138360817626691323476459703387434354); // vk.K[773].Y
        mul_input[2] = input[772];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[773] * input[772]
        mul_input[0] = uint256(19302629107181563606991040581327117695580581159369909769106302394147014418660); // vk.K[774].X
        mul_input[1] = uint256(11732556481713474629434127006406259730809658320429772267408769120696028267107); // vk.K[774].Y
        mul_input[2] = input[773];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[774] * input[773]
        mul_input[0] = uint256(1683957070875050432263762957448478088187643184381539219887362266099471000756); // vk.K[775].X
        mul_input[1] = uint256(8624397096992028019883374070110200644434960214428462288934109821889914450797); // vk.K[775].Y
        mul_input[2] = input[774];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[775] * input[774]
        mul_input[0] = uint256(10511719606057969170879964245359872435025391814633640009580543592422322369709); // vk.K[776].X
        mul_input[1] = uint256(9306251759205265058595815707839840005892630341647654651544846031995684025191); // vk.K[776].Y
        mul_input[2] = input[775];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[776] * input[775]
        mul_input[0] = uint256(20346388872848168929778592511041311328618561148132590319761126937171633237827); // vk.K[777].X
        mul_input[1] = uint256(10305311519942914399488839647357956230797983915951197442763982145503877801148); // vk.K[777].Y
        mul_input[2] = input[776];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[777] * input[776]
        mul_input[0] = uint256(19834466676837223920492495795270858983407494160425445828576949837800806382681); // vk.K[778].X
        mul_input[1] = uint256(15443687307820582694076842913238997137584343764774901924741662224778877179556); // vk.K[778].Y
        mul_input[2] = input[777];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[778] * input[777]
        mul_input[0] = uint256(170719736531569512016335079843013745352350920124465696663536053246783894826); // vk.K[779].X
        mul_input[1] = uint256(20441439176401461549233669517177361395379694308785300195070637011844606519432); // vk.K[779].Y
        mul_input[2] = input[778];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[779] * input[778]
        mul_input[0] = uint256(15428669967256256135683199291909216316678004164157037681990335088691461874531); // vk.K[780].X
        mul_input[1] = uint256(16844828770900507445676091109458604897851360256377360492014765653143112873980); // vk.K[780].Y
        mul_input[2] = input[779];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[780] * input[779]
        mul_input[0] = uint256(17940210274199142256093294254118433227264434473652562472533148381071645131226); // vk.K[781].X
        mul_input[1] = uint256(12194057587800721273273625035956934574012656092970521985642891591372254193682); // vk.K[781].Y
        mul_input[2] = input[780];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[781] * input[780]
        mul_input[0] = uint256(10856824295971895101848973620610050555075836493141830501882480585845771433690); // vk.K[782].X
        mul_input[1] = uint256(16793828737929781245790919513617150816025951128177786216867777081718848451056); // vk.K[782].Y
        mul_input[2] = input[781];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[782] * input[781]
        mul_input[0] = uint256(3767358423613472415882001730634482605303817736378020785919710503141258619227); // vk.K[783].X
        mul_input[1] = uint256(18578489096717874006395354997671908895310431475515712351718803538001683950792); // vk.K[783].Y
        mul_input[2] = input[782];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[783] * input[782]
        mul_input[0] = uint256(2513229050556855247747565993861540636734634435113122289959866458731543268978); // vk.K[784].X
        mul_input[1] = uint256(9139856545450588230909260916358618498178611867707174072404970924535009570928); // vk.K[784].Y
        mul_input[2] = input[783];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[784] * input[783]
        mul_input[0] = uint256(9490265621942493191393483497449443391097472243006760465885330297625079684902); // vk.K[785].X
        mul_input[1] = uint256(10121957783650593010196334474604174708733035533902766515750087673647199217659); // vk.K[785].Y
        mul_input[2] = input[784];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[785] * input[784]
        mul_input[0] = uint256(20014216596967498547981394566929533374607098598670573025956307626843138465933); // vk.K[786].X
        mul_input[1] = uint256(1128041696931830704899725317299800002284857025175876112879896378599185273035); // vk.K[786].Y
        mul_input[2] = input[785];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[786] * input[785]
        mul_input[0] = uint256(1766407851687591251338571348240483525480408365036977552524448974343794363551); // vk.K[787].X
        mul_input[1] = uint256(11208511002430449231212068235941183539227425034843720301379209639272635390400); // vk.K[787].Y
        mul_input[2] = input[786];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[787] * input[786]
        mul_input[0] = uint256(17931423831654675521473035895599450359092304760506523699873659173117881282854); // vk.K[788].X
        mul_input[1] = uint256(12519913283842264254487647714429426328185935342822770864731761548753818675656); // vk.K[788].Y
        mul_input[2] = input[787];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[788] * input[787]
        mul_input[0] = uint256(21620041530576340011020832698884609156378875887666370922172968718068615056046); // vk.K[789].X
        mul_input[1] = uint256(8658319726243280198672488210332837983294632035435446996894790689571341221706); // vk.K[789].Y
        mul_input[2] = input[788];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[789] * input[788]
        mul_input[0] = uint256(2822266196264307863196764174831978850422585898801462823258105359266515992244); // vk.K[790].X
        mul_input[1] = uint256(16496580417798484226028608861087323835878876626994795954543655754421162082140); // vk.K[790].Y
        mul_input[2] = input[789];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[790] * input[789]
        mul_input[0] = uint256(17660547236377371600169923239643159363703337427431253662778251216401647571018); // vk.K[791].X
        mul_input[1] = uint256(13061673739294673822835896561666810941583105759244616172103335417156608191382); // vk.K[791].Y
        mul_input[2] = input[790];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[791] * input[790]
        mul_input[0] = uint256(2499455433337972545435639068662295078380795903532404257359344057120631077858); // vk.K[792].X
        mul_input[1] = uint256(15981207643614942841033062806717326917199895207389557006412885234844413805397); // vk.K[792].Y
        mul_input[2] = input[791];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[792] * input[791]
        mul_input[0] = uint256(18496641245900141613304879582910880378257099000077944233392374740872613091718); // vk.K[793].X
        mul_input[1] = uint256(15419725836643992711558420876816399881422789506176929022826393540132943719987); // vk.K[793].Y
        mul_input[2] = input[792];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[793] * input[792]
        mul_input[0] = uint256(18666513333147353991917109837110683206008682820853478867237403210776359461866); // vk.K[794].X
        mul_input[1] = uint256(8155638579664842737521478896872823916039021639548802010281329061590507905942); // vk.K[794].Y
        mul_input[2] = input[793];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[794] * input[793]
        mul_input[0] = uint256(12189256035508496710291493334146658700087536102096788105758147138084426183088); // vk.K[795].X
        mul_input[1] = uint256(17148081235528786849842306081853736426284514676024882638051711437046018438983); // vk.K[795].Y
        mul_input[2] = input[794];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[795] * input[794]
        mul_input[0] = uint256(21777756731212330329770850025184857538857307140278995690154917144903712922697); // vk.K[796].X
        mul_input[1] = uint256(11196745410733221206580426762303409475286168090446814634790293809985605636488); // vk.K[796].Y
        mul_input[2] = input[795];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[796] * input[795]
        mul_input[0] = uint256(2751155341713824541534009039203525787654151279129308652452889795171687782799); // vk.K[797].X
        mul_input[1] = uint256(8072118372743330611130531805091125507921504872202435263308081843709998801703); // vk.K[797].Y
        mul_input[2] = input[796];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[797] * input[796]
        mul_input[0] = uint256(11007680893861686087140559059024273393497894409585821565765966970389584909410); // vk.K[798].X
        mul_input[1] = uint256(3487929092988196028865016189488841969290781230490241087880187080661949117991); // vk.K[798].Y
        mul_input[2] = input[797];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[798] * input[797]
        mul_input[0] = uint256(18654660702360677859529873304031406851075403104064058107117082364951142937954); // vk.K[799].X
        mul_input[1] = uint256(11147308248826402965995267001755362442613045245853420089544980730847400380664); // vk.K[799].Y
        mul_input[2] = input[798];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[799] * input[798]
        mul_input[0] = uint256(3611194333157169751628573922317833594337693597528816471447494151915507335068); // vk.K[800].X
        mul_input[1] = uint256(13916037923506809843125706868582682559313875266157202582849413512648003410742); // vk.K[800].Y
        mul_input[2] = input[799];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[800] * input[799]
        mul_input[0] = uint256(5710193168285256273387003630977321131346652627749410783167873085773264807416); // vk.K[801].X
        mul_input[1] = uint256(20513957362184124654107763948192936517123869656508805646446958465623779034283); // vk.K[801].Y
        mul_input[2] = input[800];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[801] * input[800]
        mul_input[0] = uint256(12276320957609906803791702399191459354748071044792845463833034705892778880819); // vk.K[802].X
        mul_input[1] = uint256(220206059691884429875676050239950970864409149408238983777393843168982603634); // vk.K[802].Y
        mul_input[2] = input[801];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[802] * input[801]
        mul_input[0] = uint256(335714697898851435981979804477730940975297403051122072133840893040967239517); // vk.K[803].X
        mul_input[1] = uint256(422731005410400384375215040843450891836751110013499694380462554357813995933); // vk.K[803].Y
        mul_input[2] = input[802];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[803] * input[802]
        mul_input[0] = uint256(18855440413616225552876046370631151951725147589203764588147514630689921445521); // vk.K[804].X
        mul_input[1] = uint256(14167396666546242773395023023035889295932211107972597425797027189158569599012); // vk.K[804].Y
        mul_input[2] = input[803];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[804] * input[803]
        mul_input[0] = uint256(10884911841647341189321295019477820122135070552209643265817268646940312909513); // vk.K[805].X
        mul_input[1] = uint256(17943587798267743761256881827406343115218020495445810311432946427023248076411); // vk.K[805].Y
        mul_input[2] = input[804];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[805] * input[804]
        mul_input[0] = uint256(6222474489231005738237937111433232605528178798044683171644274405721503870473); // vk.K[806].X
        mul_input[1] = uint256(259926993007776533842388125838818539132939554594811444483068984555621377997); // vk.K[806].Y
        mul_input[2] = input[805];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[806] * input[805]
        mul_input[0] = uint256(2799681038399848626131444134069292461193809333124451892987664261368085305679); // vk.K[807].X
        mul_input[1] = uint256(16351360771468358908738657926799734602085158550869070539144461468096444514581); // vk.K[807].Y
        mul_input[2] = input[806];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[807] * input[806]
        mul_input[0] = uint256(21113143300236998549188649185468822155579253519922920982951988324337144377719); // vk.K[808].X
        mul_input[1] = uint256(28653620039779686010970835104775402350609291949560896912745777252669582562); // vk.K[808].Y
        mul_input[2] = input[807];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[808] * input[807]
        mul_input[0] = uint256(19487742916288470625663683741019237937253643793259884742069283371770464320733); // vk.K[809].X
        mul_input[1] = uint256(18433642267410969922895899014132325450341861792302828741613952891562820830522); // vk.K[809].Y
        mul_input[2] = input[808];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[809] * input[808]
        mul_input[0] = uint256(7647470501376042379432705629770055041588772950326721660174719817358731738779); // vk.K[810].X
        mul_input[1] = uint256(13655151179742007103188433166142682499810206520632659619712785158765549516800); // vk.K[810].Y
        mul_input[2] = input[809];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[810] * input[809]
        mul_input[0] = uint256(21155927984782878841908995179231526876063686180604982820510088846970743654003); // vk.K[811].X
        mul_input[1] = uint256(6285040117307289627859093207233389701708816614492079449404470012632942758089); // vk.K[811].Y
        mul_input[2] = input[810];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[811] * input[810]
        mul_input[0] = uint256(14375167231768886251066674060865673922601470658671303437243132813024804158571); // vk.K[812].X
        mul_input[1] = uint256(4680666394341360567037544880803267184031993383423503458957452342547562046596); // vk.K[812].Y
        mul_input[2] = input[811];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[812] * input[811]
        mul_input[0] = uint256(11077233900123015022210167626794288215651635362773908934154109434521533416261); // vk.K[813].X
        mul_input[1] = uint256(9600978875409039209950743304120546348524161996967464628859695184242292059102); // vk.K[813].Y
        mul_input[2] = input[812];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[813] * input[812]
        mul_input[0] = uint256(4487376353797179484338951696728050561650372512089191698766227514241821934007); // vk.K[814].X
        mul_input[1] = uint256(637299202689011310440217698969840079384795292269909437476551013418168852394); // vk.K[814].Y
        mul_input[2] = input[813];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[814] * input[813]
        mul_input[0] = uint256(8255144184684165566318604829414301364525411057919364902930039830947774670909); // vk.K[815].X
        mul_input[1] = uint256(13174869131998135635532572126995258499477855622134947739800675522958221935082); // vk.K[815].Y
        mul_input[2] = input[814];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[815] * input[814]
        mul_input[0] = uint256(14941335118631893171148377904391889676089673346694515964486934124823950663726); // vk.K[816].X
        mul_input[1] = uint256(13391434757247885720089607859843535794509255015875422079930028149141908442685); // vk.K[816].Y
        mul_input[2] = input[815];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[816] * input[815]
        mul_input[0] = uint256(10196909728772696360122302170529878474833219572147233044470828229109748551066); // vk.K[817].X
        mul_input[1] = uint256(2186828761115929047142079934276328680816941120830238687656180009652581671951); // vk.K[817].Y
        mul_input[2] = input[816];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[817] * input[816]
        mul_input[0] = uint256(21146542780764076704554976946531162872764560554859410094174087059036525357004); // vk.K[818].X
        mul_input[1] = uint256(11191103859251266618260410337492376775752351747392389359460796238866227575264); // vk.K[818].Y
        mul_input[2] = input[817];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[818] * input[817]
        mul_input[0] = uint256(17902872459647154311583191773136692824812789064938375480635713033369367165453); // vk.K[819].X
        mul_input[1] = uint256(19651412664535921667822462041375431526965578118252421819189276570349231663360); // vk.K[819].Y
        mul_input[2] = input[818];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[819] * input[818]
        mul_input[0] = uint256(3359634615602262360936236932573856250966288915316537140021048428548043497470); // vk.K[820].X
        mul_input[1] = uint256(7143552254284958448148870393216751935422196659553051401010427042596109385047); // vk.K[820].Y
        mul_input[2] = input[819];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[820] * input[819]
        mul_input[0] = uint256(9381376908601865861916788981943923005506723462791973259352791985313540053082); // vk.K[821].X
        mul_input[1] = uint256(3731474556988690516959828247706044474132608734331261013559508700297640375482); // vk.K[821].Y
        mul_input[2] = input[820];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[821] * input[820]
        mul_input[0] = uint256(4620880846432086198334198175477345863318704430199679590636310104270659230092); // vk.K[822].X
        mul_input[1] = uint256(8943520823472035835241784682437835115397738870585730926010839532260323722159); // vk.K[822].Y
        mul_input[2] = input[821];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[822] * input[821]
        mul_input[0] = uint256(13637960469734155330282449502890985704521499638307594658665168317722305822922); // vk.K[823].X
        mul_input[1] = uint256(12904473979729279663351673331025161378417216915170539058378532326350626664498); // vk.K[823].Y
        mul_input[2] = input[822];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[823] * input[822]
        mul_input[0] = uint256(9166767339239784630368378566442426529942560394421808638243074487895504494283); // vk.K[824].X
        mul_input[1] = uint256(8138339733774465946339054173485631787660653430580710443381321346318269154020); // vk.K[824].Y
        mul_input[2] = input[823];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[824] * input[823]
        mul_input[0] = uint256(4359213107275789309298558514787959395212269924534313221618123568233079002424); // vk.K[825].X
        mul_input[1] = uint256(2225973116279759916654195629630574128751272458181352648241144209210683109443); // vk.K[825].Y
        mul_input[2] = input[824];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[825] * input[824]
        mul_input[0] = uint256(10671077974229739518530234816140956072578028085100436812356808316295098208746); // vk.K[826].X
        mul_input[1] = uint256(15905083159064848794959794577332974178782615613983980890626082596535516212036); // vk.K[826].Y
        mul_input[2] = input[825];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[826] * input[825]
        mul_input[0] = uint256(697053725367171320252287749674601598932995933317747931676081638818898158238); // vk.K[827].X
        mul_input[1] = uint256(3291420824936439705108268065680719527773627378203873838236026603576921736740); // vk.K[827].Y
        mul_input[2] = input[826];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[827] * input[826]
        mul_input[0] = uint256(2944307281214012453398533906470699118346629749952662701812149293904804092705); // vk.K[828].X
        mul_input[1] = uint256(12761017554035315714912913616550296053677079337414438621506410167357093250860); // vk.K[828].Y
        mul_input[2] = input[827];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[828] * input[827]
        mul_input[0] = uint256(11802595740250411889541351221068183053767590795548185053977012524020746717681); // vk.K[829].X
        mul_input[1] = uint256(1841593339130700893200773427746103387021677387287773587414473479343865441832); // vk.K[829].Y
        mul_input[2] = input[828];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[829] * input[828]
        mul_input[0] = uint256(21743242860756312142816501469346063451607981215914099812613815509116804602144); // vk.K[830].X
        mul_input[1] = uint256(7016712534162368388133490872476734913755684865152129977970984744936839649873); // vk.K[830].Y
        mul_input[2] = input[829];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[830] * input[829]
        mul_input[0] = uint256(13250243261170052082065419003089926721259569168768381568630757745037481857717); // vk.K[831].X
        mul_input[1] = uint256(2375217854045898141086794725185171825244045688932847801406059500354211712447); // vk.K[831].Y
        mul_input[2] = input[830];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[831] * input[830]
        mul_input[0] = uint256(15231009979270563652817696074860635609103639090408312358475650980963740132376); // vk.K[832].X
        mul_input[1] = uint256(15430263170933529687865276497052544549348804289422861903972344639076466283555); // vk.K[832].Y
        mul_input[2] = input[831];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[832] * input[831]
        mul_input[0] = uint256(15667952444903956784614649917960367087152937173112333421923522663853394553037); // vk.K[833].X
        mul_input[1] = uint256(21096984489034270678266368136494274954092624145980059857414232952386767855641); // vk.K[833].Y
        mul_input[2] = input[832];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[833] * input[832]
        mul_input[0] = uint256(15891478530670085782319470170159871284349337892647254320090487332271637416782); // vk.K[834].X
        mul_input[1] = uint256(9162136267528002730205100248813805594581995260770735198069801730730494033533); // vk.K[834].Y
        mul_input[2] = input[833];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[834] * input[833]
        mul_input[0] = uint256(21544890267999424244675980199489781397568291255339412074572866693456800371535); // vk.K[835].X
        mul_input[1] = uint256(20848213206068125727137080572221909139665283598722808101717541030647002375415); // vk.K[835].Y
        mul_input[2] = input[834];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[835] * input[834]
        mul_input[0] = uint256(11957956016571733401927869480484388598879291274984447204356979958161706453557); // vk.K[836].X
        mul_input[1] = uint256(7478985678904052956192427144594225756328726441769712232548986551946721780510); // vk.K[836].Y
        mul_input[2] = input[835];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[836] * input[835]
        mul_input[0] = uint256(10474248531183521868965243267549661050114937104576865206291294414491384231115); // vk.K[837].X
        mul_input[1] = uint256(21591540238778032295831270357940338147010094653108114479998932574179194807463); // vk.K[837].Y
        mul_input[2] = input[836];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[837] * input[836]
        mul_input[0] = uint256(123553948447003918945140194486962277440516051279810165395399124329995250529); // vk.K[838].X
        mul_input[1] = uint256(12765911600004224067375143695587271938498002549924853361474640285742269456249); // vk.K[838].Y
        mul_input[2] = input[837];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[838] * input[837]
        mul_input[0] = uint256(10393153384537774659450618871607020659737065998385658365917653383975424905664); // vk.K[839].X
        mul_input[1] = uint256(16241529720879179630551498074316255150401592056502615447628658091285423781832); // vk.K[839].Y
        mul_input[2] = input[838];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[839] * input[838]
        mul_input[0] = uint256(10222006134734697066959826193700066283681589917432893346924684079276439767838); // vk.K[840].X
        mul_input[1] = uint256(20519662470395015068101114522876522841080358264146776259532594558004544114149); // vk.K[840].Y
        mul_input[2] = input[839];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[840] * input[839]
        mul_input[0] = uint256(5983896426151357395980140110590311813816538289182549818990607292166410724789); // vk.K[841].X
        mul_input[1] = uint256(21857508974616966935321695849596833244963953676107668115881580610138488051492); // vk.K[841].Y
        mul_input[2] = input[840];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[841] * input[840]
        mul_input[0] = uint256(1297550594614424101929834482189812829701337915600317738122070017027755825065); // vk.K[842].X
        mul_input[1] = uint256(3323663932485698409996070875310683036257724462087920685583547405468560955063); // vk.K[842].Y
        mul_input[2] = input[841];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[842] * input[841]
        mul_input[0] = uint256(17905528451481930959311490713820187916920187423713654728238899322586117446097); // vk.K[843].X
        mul_input[1] = uint256(12375446542073800252519718286758931594953286716605760510432901987220262784432); // vk.K[843].Y
        mul_input[2] = input[842];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[843] * input[842]
        mul_input[0] = uint256(20108251024598653377115382193909034310208904217529482297817175000187768308217); // vk.K[844].X
        mul_input[1] = uint256(19942763482686857792307560310243034745648413168792236299619363936754200111882); // vk.K[844].Y
        mul_input[2] = input[843];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[844] * input[843]
        mul_input[0] = uint256(4435967416348487203621070968271570024733547967289197407149697163368580136226); // vk.K[845].X
        mul_input[1] = uint256(12161948148986022587748280859997147541392741348723707296783319245913316167396); // vk.K[845].Y
        mul_input[2] = input[844];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[845] * input[844]
        mul_input[0] = uint256(18505251067567365525158529917862617463324658242712298292408279809698727501180); // vk.K[846].X
        mul_input[1] = uint256(21697065537868931717379590961963396640856027049944028497871257302578894814943); // vk.K[846].Y
        mul_input[2] = input[845];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[846] * input[845]
        mul_input[0] = uint256(18959056597985121530978364527398717870326219952455132495415816577259703182361); // vk.K[847].X
        mul_input[1] = uint256(15599504921987480796975177553250182240152916547634669893103516416733101270927); // vk.K[847].Y
        mul_input[2] = input[846];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[847] * input[846]
        mul_input[0] = uint256(20915683884270672188905006468923237599035281057903113232669469323586997922105); // vk.K[848].X
        mul_input[1] = uint256(18451953968960744543298969252319703107838262136220011169747297341593664704331); // vk.K[848].Y
        mul_input[2] = input[847];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[848] * input[847]
        mul_input[0] = uint256(15644919882221419846242196952213208616456511103359650657341781901517506935818); // vk.K[849].X
        mul_input[1] = uint256(9513096178560428193487517208688405627434859133744154935491385235590170991990); // vk.K[849].Y
        mul_input[2] = input[848];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[849] * input[848]
        mul_input[0] = uint256(9599251470495797941843169769449338974794109760048988028545482578897140683087); // vk.K[850].X
        mul_input[1] = uint256(2223573024165663790372043247617136873726661208591366686451520489149458822591); // vk.K[850].Y
        mul_input[2] = input[849];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[850] * input[849]
        mul_input[0] = uint256(7234181614977706341359607485731726077221867179415992432861099005438857857227); // vk.K[851].X
        mul_input[1] = uint256(12173373130864437255700759274352088589125738485356115072385113436094595352270); // vk.K[851].Y
        mul_input[2] = input[850];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[851] * input[850]
        mul_input[0] = uint256(8629788508346244548094441906306670517763026508563134246964345437103640927667); // vk.K[852].X
        mul_input[1] = uint256(12276400197789841482391081119737014427252726644134865364956034897753333124535); // vk.K[852].Y
        mul_input[2] = input[851];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[852] * input[851]
        mul_input[0] = uint256(19545352799060127302890668721372708084001466654494151510894126792172989362878); // vk.K[853].X
        mul_input[1] = uint256(7593717109166188378113160937121681390191641675393318061218736948250089777273); // vk.K[853].Y
        mul_input[2] = input[852];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[853] * input[852]
        mul_input[0] = uint256(18270439711856436678392964564525312422067382746352285260886881008962059284295); // vk.K[854].X
        mul_input[1] = uint256(11263445260391713216416493614884835323188018748398955340002547574521377567181); // vk.K[854].Y
        mul_input[2] = input[853];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[854] * input[853]
        mul_input[0] = uint256(245553275622375142795708556682491395404278115258706375112107304353456333658); // vk.K[855].X
        mul_input[1] = uint256(4448073253419970954961425749887917030637369898435361561649101513975886556129); // vk.K[855].Y
        mul_input[2] = input[854];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[855] * input[854]
        mul_input[0] = uint256(17349100849554943036118510043326994673752063752480748436814045356047757032008); // vk.K[856].X
        mul_input[1] = uint256(10876078980557045620348511433014068565378870445674351243520212776942673320868); // vk.K[856].Y
        mul_input[2] = input[855];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[856] * input[855]
        mul_input[0] = uint256(3511821804508817875747879737059282949073752704994933741551387996724181576944); // vk.K[857].X
        mul_input[1] = uint256(3530699512884496137300047632459074950311460396606796284363872080808706122684); // vk.K[857].Y
        mul_input[2] = input[856];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[857] * input[856]
        mul_input[0] = uint256(5214412375205090471635652237389614545827699694879369818209006309364438379172); // vk.K[858].X
        mul_input[1] = uint256(19622375375283984315547903445757275698087556058789899776697568475914041440207); // vk.K[858].Y
        mul_input[2] = input[857];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[858] * input[857]
        mul_input[0] = uint256(20951652357450456869232483628907546041758784320613395680021753867741700000803); // vk.K[859].X
        mul_input[1] = uint256(5727180268060942952582267410222600965035495226867642810089372306113588941332); // vk.K[859].Y
        mul_input[2] = input[858];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[859] * input[858]
        mul_input[0] = uint256(1672492820466150197487579172104965111019407204412554381940904558561747467204); // vk.K[860].X
        mul_input[1] = uint256(10843125673587044360890915576185237435312267874891972306172010224454183660405); // vk.K[860].Y
        mul_input[2] = input[859];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[860] * input[859]
        mul_input[0] = uint256(7530495443068917577272912946915320761262581670140984732029930766079027987723); // vk.K[861].X
        mul_input[1] = uint256(6704088946194619583754791051633510897582652220302169456610545483796940505352); // vk.K[861].Y
        mul_input[2] = input[860];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[861] * input[860]
        mul_input[0] = uint256(7496078061205528397805182099380970586302940720281552502574664940599176237254); // vk.K[862].X
        mul_input[1] = uint256(1852451503897640207526068116757164817851335853164797723530528749129016517373); // vk.K[862].Y
        mul_input[2] = input[861];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[862] * input[861]
        mul_input[0] = uint256(16206447083833363068365789180273653439726579711746231857714102795653716374553); // vk.K[863].X
        mul_input[1] = uint256(7555221257296234703336921352882298767926649181284039587907855717396491259482); // vk.K[863].Y
        mul_input[2] = input[862];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[863] * input[862]
        mul_input[0] = uint256(16676535929552959496821731524648755373843494223230465589557638760209857349775); // vk.K[864].X
        mul_input[1] = uint256(9754644317974079953707001173917699260386558630234716372772222730164936650779); // vk.K[864].Y
        mul_input[2] = input[863];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[864] * input[863]
        mul_input[0] = uint256(5900133578882498371230299707260291838145316100022254454195071868002743282211); // vk.K[865].X
        mul_input[1] = uint256(10782675822986792304209266854089600190277833818669012547686918218515541316992); // vk.K[865].Y
        mul_input[2] = input[864];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[865] * input[864]
        mul_input[0] = uint256(37061873609956852863276125618343678149436854577023579292470770762276057995); // vk.K[866].X
        mul_input[1] = uint256(14069522001425863653225324927667967404015035296231325023116736279353872438407); // vk.K[866].Y
        mul_input[2] = input[865];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[866] * input[865]
        mul_input[0] = uint256(11505584144592373810290468284114708370258165532505906204727217066854857426515); // vk.K[867].X
        mul_input[1] = uint256(19743122244105684663530135909213431243137128269848090018650070805694912412104); // vk.K[867].Y
        mul_input[2] = input[866];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[867] * input[866]
        mul_input[0] = uint256(8229510290424095280810014846340906091908345797481686818526297215027478682470); // vk.K[868].X
        mul_input[1] = uint256(9239614394720305238362324164645302859087075892846622900553540503333664823465); // vk.K[868].Y
        mul_input[2] = input[867];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[868] * input[867]
        mul_input[0] = uint256(5432584580281799234688943248080852924169425591152209712735472319036014899145); // vk.K[869].X
        mul_input[1] = uint256(3202525698668430124373704277807363287929782438807006045328634676202291564693); // vk.K[869].Y
        mul_input[2] = input[868];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[869] * input[868]
        mul_input[0] = uint256(12783184912908649872729315599799652698839207825266373990061961921543983643029); // vk.K[870].X
        mul_input[1] = uint256(19915358222816448906208803650964990950302839662414863240302052604032448275745); // vk.K[870].Y
        mul_input[2] = input[869];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[870] * input[869]
        mul_input[0] = uint256(16797838946254843523430415290721747426973000283714591705953838674223286206710); // vk.K[871].X
        mul_input[1] = uint256(29883672913227815694580256613961427995088125926639310056522108699798490605); // vk.K[871].Y
        mul_input[2] = input[870];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[871] * input[870]
        mul_input[0] = uint256(10233836802788615847814947247059102867920446884471044957984419124790578204398); // vk.K[872].X
        mul_input[1] = uint256(18902186335230868464792207689470208060817394639261513559127046826719259308377); // vk.K[872].Y
        mul_input[2] = input[871];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[872] * input[871]
        mul_input[0] = uint256(11448628024559650917683771586784552421995137241529068437423565369599186696889); // vk.K[873].X
        mul_input[1] = uint256(5826631909912844169309066053959995426407486830082558269410486739127283200896); // vk.K[873].Y
        mul_input[2] = input[872];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[873] * input[872]
        mul_input[0] = uint256(20914169897573184686269758668102254265329273775796326655926975461428035647083); // vk.K[874].X
        mul_input[1] = uint256(2065264490174341925320070132470744914877765573916776579144564154854121295955); // vk.K[874].Y
        mul_input[2] = input[873];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[874] * input[873]
        mul_input[0] = uint256(14563199153233520236694966532004661919580227787187849587191503925114091791141); // vk.K[875].X
        mul_input[1] = uint256(18285869057840107082505845612561977666717095764039247790172258297920739623983); // vk.K[875].Y
        mul_input[2] = input[874];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[875] * input[874]
        mul_input[0] = uint256(4540473011579551309215650772528396982559159753137390537996439758794916403614); // vk.K[876].X
        mul_input[1] = uint256(10064425795984110775021087484825062811151947708282864592860557615803692231113); // vk.K[876].Y
        mul_input[2] = input[875];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[876] * input[875]
        mul_input[0] = uint256(9125248566081713541578532129051850780872526953459729199782686212363131996881); // vk.K[877].X
        mul_input[1] = uint256(1388896732733203394488865200478246453906051649971885353970302950072094205002); // vk.K[877].Y
        mul_input[2] = input[876];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[877] * input[876]
        mul_input[0] = uint256(5199883625828368564797509648934856027901797728480793749510656071055314333549); // vk.K[878].X
        mul_input[1] = uint256(19085714915491283407895788987258397513110114088119283173875250235675079351362); // vk.K[878].Y
        mul_input[2] = input[877];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[878] * input[877]
        mul_input[0] = uint256(16907454365565811999578416988185977988612437439870167125134647970298462828268); // vk.K[879].X
        mul_input[1] = uint256(7586150260683298731200917354073121399410018932750530787669986861290646148924); // vk.K[879].Y
        mul_input[2] = input[878];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[879] * input[878]
        mul_input[0] = uint256(19940029374410221995550145731021619965417834484578318488607951881207527987322); // vk.K[880].X
        mul_input[1] = uint256(2634463449633709063937388702420765737838640781094275839532784435422850438022); // vk.K[880].Y
        mul_input[2] = input[879];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[880] * input[879]
        mul_input[0] = uint256(5602407654310337344268321713988783181287204221495328439276489233887479185942); // vk.K[881].X
        mul_input[1] = uint256(7836916878101208266567400280358529119258447836084917414131017442492076018710); // vk.K[881].Y
        mul_input[2] = input[880];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[881] * input[880]
        mul_input[0] = uint256(4228266593728600567259787272263722452331056758205177492258232511267749724513); // vk.K[882].X
        mul_input[1] = uint256(1996384833033767863213834990373498263672216090839700111804122030331589613622); // vk.K[882].Y
        mul_input[2] = input[881];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[882] * input[881]
        mul_input[0] = uint256(4197922170792385343030189306740826618298586168583250916260452899715226281272); // vk.K[883].X
        mul_input[1] = uint256(13554568187303483204008465831837263467777618423164310337858251266939919872554); // vk.K[883].Y
        mul_input[2] = input[882];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[883] * input[882]
        mul_input[0] = uint256(10964203392912630239375509825721141970886023094741908227629718563952788237720); // vk.K[884].X
        mul_input[1] = uint256(10860715460540309304777812335977084632109428896645899369534510580350353312126); // vk.K[884].Y
        mul_input[2] = input[883];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[884] * input[883]
        mul_input[0] = uint256(21599084322410501012487600822538094398982587206779674974589924280672617447212); // vk.K[885].X
        mul_input[1] = uint256(1679974009795893121847655352867596331862268539546555203540735927121387366165); // vk.K[885].Y
        mul_input[2] = input[884];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[885] * input[884]
        mul_input[0] = uint256(19560688181758532110144735998475641546408827913168459510343534755891132802594); // vk.K[886].X
        mul_input[1] = uint256(14508753980080549319737187517082698164763523660014025936990557103503731763193); // vk.K[886].Y
        mul_input[2] = input[885];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[886] * input[885]
        mul_input[0] = uint256(5148072460126188916808817277215523981705038338488920970310806043597909860343); // vk.K[887].X
        mul_input[1] = uint256(11198384830241475358631351238037776503694827652515645052238676905313170715075); // vk.K[887].Y
        mul_input[2] = input[886];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[887] * input[886]
        mul_input[0] = uint256(16704536465857852603276825190731785048211832986567302768018918890041958769861); // vk.K[888].X
        mul_input[1] = uint256(18982764414909516507279384951150392730833883913827519794161165020768446490499); // vk.K[888].Y
        mul_input[2] = input[887];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[888] * input[887]
        mul_input[0] = uint256(5312376646554884085978601624250384884222776874840430459249756480941567911859); // vk.K[889].X
        mul_input[1] = uint256(6717709792343875837649682823833798471413198628607363560101205346493887573101); // vk.K[889].Y
        mul_input[2] = input[888];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[889] * input[888]
        mul_input[0] = uint256(16750428427617867605661254794340338686577534680075262194615195435517206466781); // vk.K[890].X
        mul_input[1] = uint256(20103365701485248732725709932032607133421917027625268679160092594707343731218); // vk.K[890].Y
        mul_input[2] = input[889];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[890] * input[889]
        mul_input[0] = uint256(16883548522404811494146467582166591144372384641778034834452028296933869272899); // vk.K[891].X
        mul_input[1] = uint256(2982854626857792336436761991278157450438021932450275181114387108084408630684); // vk.K[891].Y
        mul_input[2] = input[890];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[891] * input[890]
        mul_input[0] = uint256(13503505717764101067485974664775551492000840259537928442601229616546816168044); // vk.K[892].X
        mul_input[1] = uint256(19106434490593350278656287417272448379768432361845833755392705056845288482928); // vk.K[892].Y
        mul_input[2] = input[891];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[892] * input[891]
        mul_input[0] = uint256(2959019346975565206930461421841530476374926983692451223441599219481240013056); // vk.K[893].X
        mul_input[1] = uint256(18647261799590085404391022998956121335479607489972734674700549521739374254185); // vk.K[893].Y
        mul_input[2] = input[892];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[893] * input[892]
        mul_input[0] = uint256(8448575762358608797214804436528512277932402051939531590932496786090608107984); // vk.K[894].X
        mul_input[1] = uint256(14427058749886291988607129128581475808784712848818767912980484828700864186622); // vk.K[894].Y
        mul_input[2] = input[893];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[894] * input[893]
        mul_input[0] = uint256(2638583589981627441341728142867079629231590401691075418234168428959350681986); // vk.K[895].X
        mul_input[1] = uint256(4709442979429485747757103765583303257497823727163718258380833005718013221760); // vk.K[895].Y
        mul_input[2] = input[894];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[895] * input[894]
        mul_input[0] = uint256(4936466819020448666282043109268670529191664029868851037957624114376927982758); // vk.K[896].X
        mul_input[1] = uint256(21406184473643447574342231173805810190511356023765229758962664354852906149979); // vk.K[896].Y
        mul_input[2] = input[895];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[896] * input[895]
        mul_input[0] = uint256(9186903334876857329173867347769458642190032719636548620009789585392345191542); // vk.K[897].X
        mul_input[1] = uint256(21260466948187923467401780542832329194191362007191984837737684104528195458324); // vk.K[897].Y
        mul_input[2] = input[896];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[897] * input[896]
        mul_input[0] = uint256(16833858964650753154613187718638667040189549305299127754333488467756913507216); // vk.K[898].X
        mul_input[1] = uint256(11947673341453816670051204261300183126708644369187206655104751428928856160465); // vk.K[898].Y
        mul_input[2] = input[897];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[898] * input[897]
        mul_input[0] = uint256(375787500178312581924766879388074319557129515305974715825780567981366085494); // vk.K[899].X
        mul_input[1] = uint256(15041574930729096224933602661119686320772440062174745015238992565870582572934); // vk.K[899].Y
        mul_input[2] = input[898];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[899] * input[898]
        mul_input[0] = uint256(19107487507865083811756435478045026290096858336072216901423742257492122518374); // vk.K[900].X
        mul_input[1] = uint256(18492004791107679599024946372214431240504970602349327117908393679071664835759); // vk.K[900].Y
        mul_input[2] = input[899];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[900] * input[899]
        mul_input[0] = uint256(8405970129396016083586625814806548751541002634230839725980486978509648306337); // vk.K[901].X
        mul_input[1] = uint256(7597494092387458063626328578169430142481071593888576216834153432776290277713); // vk.K[901].Y
        mul_input[2] = input[900];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[901] * input[900]
        mul_input[0] = uint256(16642133432916611952096858823854292304807877891484141917770559262298596963738); // vk.K[902].X
        mul_input[1] = uint256(18133766412881185926033319764072372832172573661782072350155367920480165929327); // vk.K[902].Y
        mul_input[2] = input[901];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[902] * input[901]
        mul_input[0] = uint256(9797008963763318406839471656206594412223850216144880021961667473343498028163); // vk.K[903].X
        mul_input[1] = uint256(17903198460667745646042222292608043431356984693810605729262534472800358646663); // vk.K[903].Y
        mul_input[2] = input[902];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[903] * input[902]
        mul_input[0] = uint256(12473562704176649010591083242603949944517530219502127706262266118338588421429); // vk.K[904].X
        mul_input[1] = uint256(834693045495632189858945315891711674780248709644800074353809087684217427908); // vk.K[904].Y
        mul_input[2] = input[903];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[904] * input[903]
        mul_input[0] = uint256(3912850290424550153280268723753083092473885386461370852369822130760247476580); // vk.K[905].X
        mul_input[1] = uint256(4885106670505983358525484687079189761658052890237865604533967859660932347439); // vk.K[905].Y
        mul_input[2] = input[904];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[905] * input[904]
        mul_input[0] = uint256(9958585941792673482382274149193235855926483152815230336232903657891977872592); // vk.K[906].X
        mul_input[1] = uint256(14734497523902345335207571545459486441507324873258496435566428864255321612323); // vk.K[906].Y
        mul_input[2] = input[905];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[906] * input[905]
        mul_input[0] = uint256(11619221462598020929369903750609253832439068045434221523024674548521466959708); // vk.K[907].X
        mul_input[1] = uint256(4825671724271764633425313104854655850278142579688437968012085285100132757991); // vk.K[907].Y
        mul_input[2] = input[906];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[907] * input[906]
        mul_input[0] = uint256(19574102182289803390505643732986606813796808581238835542023114059425311799542); // vk.K[908].X
        mul_input[1] = uint256(265478037088059146512309076018391647523171054034878182617132586729373892796); // vk.K[908].Y
        mul_input[2] = input[907];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[908] * input[907]
        mul_input[0] = uint256(11767456859498502502629891126782419328950565217621650802591793101289261901); // vk.K[909].X
        mul_input[1] = uint256(4615808528750817767261403116221798480498139324477210208465554075414506175005); // vk.K[909].Y
        mul_input[2] = input[908];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[909] * input[908]
        mul_input[0] = uint256(6178103267254697784051215390316279885900232686874850613265162695880934034091); // vk.K[910].X
        mul_input[1] = uint256(21613033687303770688782862569791213062503253721455856519396020593122965285771); // vk.K[910].Y
        mul_input[2] = input[909];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[910] * input[909]
        mul_input[0] = uint256(2165291870727634314132576991526510601675502068860369526816375211712633674259); // vk.K[911].X
        mul_input[1] = uint256(315494995155674032194071599550858766387691431996984035186593201892571262828); // vk.K[911].Y
        mul_input[2] = input[910];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[911] * input[910]
        mul_input[0] = uint256(18331837294182798328411782284618671191798468701090607576622566843756305972463); // vk.K[912].X
        mul_input[1] = uint256(19981605902077616595811260006015161295800071322752821100942584786775488939412); // vk.K[912].Y
        mul_input[2] = input[911];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[912] * input[911]
        mul_input[0] = uint256(15356068412761725139902573633715309223682356592845235681801378017717867320941); // vk.K[913].X
        mul_input[1] = uint256(17640118203728640456107026101189138582735529607228239203663910655014119018571); // vk.K[913].Y
        mul_input[2] = input[912];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[913] * input[912]
        mul_input[0] = uint256(2461597643220011893539529468167822696697841965947820593078064066310113837417); // vk.K[914].X
        mul_input[1] = uint256(16877932378865202407048978246423715545231959199341862959023579324272920915792); // vk.K[914].Y
        mul_input[2] = input[913];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[914] * input[913]
        mul_input[0] = uint256(6344695577911160868040384008884883172270930513423181850572099008360915719617); // vk.K[915].X
        mul_input[1] = uint256(21666975291111557671614960085243891014972921967777955019653496413028648043143); // vk.K[915].Y
        mul_input[2] = input[914];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[915] * input[914]
        mul_input[0] = uint256(7150906859254082245487590450666321148516908014677553496619924406166337035939); // vk.K[916].X
        mul_input[1] = uint256(21235838785232456025587563293492472181636248791913211380725764716681630479050); // vk.K[916].Y
        mul_input[2] = input[915];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[916] * input[915]
        mul_input[0] = uint256(8396402323722143541712517367707969959060147189459666129211598086306749762355); // vk.K[917].X
        mul_input[1] = uint256(8392183054611286187501759212647263909338203201904484483538065525035140621086); // vk.K[917].Y
        mul_input[2] = input[916];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[917] * input[916]
        mul_input[0] = uint256(13130736867899376367557011278308756370984018604883957379748594776662840662741); // vk.K[918].X
        mul_input[1] = uint256(44742141396765369929516219736560489414406164415122422853099065905156933644); // vk.K[918].Y
        mul_input[2] = input[917];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[918] * input[917]
        mul_input[0] = uint256(21366135143813046225301911726341665137908762974333686213429255541553859216616); // vk.K[919].X
        mul_input[1] = uint256(21361941796497283840997087210443534810419839904398224736415116423541492373950); // vk.K[919].Y
        mul_input[2] = input[918];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[919] * input[918]
        mul_input[0] = uint256(20653029725252477079630259770420341603677974508181172690882834894037302977135); // vk.K[920].X
        mul_input[1] = uint256(929472655956111604041173391298175866278666859942983383032835063442989807684); // vk.K[920].Y
        mul_input[2] = input[919];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[920] * input[919]
        mul_input[0] = uint256(8873098651456409785517032423538836507866424537295131041905676573118099861325); // vk.K[921].X
        mul_input[1] = uint256(4139865292680948110711747973624667941315874250411164810271069981352846863059); // vk.K[921].Y
        mul_input[2] = input[920];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[921] * input[920]
        mul_input[0] = uint256(13079153745329352253317679084988722341867509860002314074604133748697874564931); // vk.K[922].X
        mul_input[1] = uint256(6526263857133125612551844172631429497701280589943088892467624361895707411309); // vk.K[922].Y
        mul_input[2] = input[921];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[922] * input[921]
        mul_input[0] = uint256(12770494505110765957925780452405157162124001249666867967998059077995011788759); // vk.K[923].X
        mul_input[1] = uint256(2625799600651027915243011992821229485956036047516682123521927170030241025462); // vk.K[923].Y
        mul_input[2] = input[922];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[923] * input[922]
        mul_input[0] = uint256(2892218156526700133890186925120161677807188745332984229921247897621505732521); // vk.K[924].X
        mul_input[1] = uint256(16811864504250630255495965680598935322537328952115033186802841933516535111413); // vk.K[924].Y
        mul_input[2] = input[923];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[924] * input[923]
        mul_input[0] = uint256(15210771917360450164272086977644539132702763047342403445215419583499391564513); // vk.K[925].X
        mul_input[1] = uint256(4516622787026196787543398179500008691728816229737695350546873524614885731996); // vk.K[925].Y
        mul_input[2] = input[924];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[925] * input[924]
        mul_input[0] = uint256(7913503748905157940342750248956489550083399592049022002319631717819250957491); // vk.K[926].X
        mul_input[1] = uint256(9651138187791584900487770682288282506991989786463381548795551615429134321753); // vk.K[926].Y
        mul_input[2] = input[925];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[926] * input[925]
        mul_input[0] = uint256(4215724999032829612590103956613094849513264042116248293955784864782158489872); // vk.K[927].X
        mul_input[1] = uint256(1237420431163576758788477482375673165275521238448141036543565634241682507407); // vk.K[927].Y
        mul_input[2] = input[926];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[927] * input[926]
        mul_input[0] = uint256(13242522767511598502491866727443891064958242798700151978660175094830047523299); // vk.K[928].X
        mul_input[1] = uint256(1147677470173902854269198775500281440994890258744293109371234342481214514506); // vk.K[928].Y
        mul_input[2] = input[927];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[928] * input[927]
        mul_input[0] = uint256(14325300549490885472612680830181366066256041507923555816156928100335517020246); // vk.K[929].X
        mul_input[1] = uint256(11442433996461633207266368154859253885186094527658377360405525697779060949053); // vk.K[929].Y
        mul_input[2] = input[928];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[929] * input[928]
        mul_input[0] = uint256(1088047140817319427982783816634260755628593311746567633333784510708568080166); // vk.K[930].X
        mul_input[1] = uint256(8827520345526241939711573346402272384544673165252019237611770104385378463541); // vk.K[930].Y
        mul_input[2] = input[929];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[930] * input[929]
        mul_input[0] = uint256(14177692715728668438929596245360894104393410674810411689674676583707313073583); // vk.K[931].X
        mul_input[1] = uint256(2176510646467355119164183839454661887043255995559850144551902996632589986800); // vk.K[931].Y
        mul_input[2] = input[930];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[931] * input[930]
        mul_input[0] = uint256(10555089497113248941050722428948655428803252309194475797433041414284870082545); // vk.K[932].X
        mul_input[1] = uint256(17729345403190766215067447466872296368320572024708277738476205692616201974178); // vk.K[932].Y
        mul_input[2] = input[931];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[932] * input[931]
        mul_input[0] = uint256(16192744447118312040982645985335319293286650021443922907476712465336732382213); // vk.K[933].X
        mul_input[1] = uint256(4240879935949354813395057614903752914011646769748306189467300446957799368223); // vk.K[933].Y
        mul_input[2] = input[932];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[933] * input[932]
        mul_input[0] = uint256(6438783894070231210027109868191377147061215431528872660544596397474128212299); // vk.K[934].X
        mul_input[1] = uint256(21472451153617072599570256382537959890184076964056859950597094376171488277596); // vk.K[934].Y
        mul_input[2] = input[933];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[934] * input[933]
        mul_input[0] = uint256(12243677886272954048069797094901638054923587026566367673240047565738465607018); // vk.K[935].X
        mul_input[1] = uint256(2192713792519328241089764096615639134762920006555380080949991557862326571857); // vk.K[935].Y
        mul_input[2] = input[934];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[935] * input[934]
        mul_input[0] = uint256(2251252042277944371717067064346630893170033013252639814373351963405824708768); // vk.K[936].X
        mul_input[1] = uint256(18041607664769814649617010579606017146628703957846170838668966741058193776410); // vk.K[936].Y
        mul_input[2] = input[935];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[936] * input[935]
        mul_input[0] = uint256(3755557780538228522002290353385164748464125504690661447896497334055292207798); // vk.K[937].X
        mul_input[1] = uint256(3506921144205767551048591210166187057531376792213885392096046624754846931013); // vk.K[937].Y
        mul_input[2] = input[936];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[937] * input[936]
        mul_input[0] = uint256(6746986832699913793399451004060374760549201268460289890874856611229370309109); // vk.K[938].X
        mul_input[1] = uint256(15769118209174012737186643676256006541246253705002648244388535307947615095545); // vk.K[938].Y
        mul_input[2] = input[937];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[938] * input[937]
        mul_input[0] = uint256(3079547789442210264187167279323982684831756477183430022727004873828742676071); // vk.K[939].X
        mul_input[1] = uint256(2989462794495605925970781510116141749263586105454513381508603314790497242069); // vk.K[939].Y
        mul_input[2] = input[938];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[939] * input[938]
        mul_input[0] = uint256(9537249206409738568131828881935743960504264153514645702782472131071615748292); // vk.K[940].X
        mul_input[1] = uint256(4823021003054532037521692350398184165259424901408914020509697439903786589631); // vk.K[940].Y
        mul_input[2] = input[939];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[940] * input[939]
        mul_input[0] = uint256(1551552906940541756345254311392760685869891956083696923063238289868734337851); // vk.K[941].X
        mul_input[1] = uint256(1200285338966328166790331338298082784255929580869429622508683479166079045051); // vk.K[941].Y
        mul_input[2] = input[940];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[941] * input[940]
        mul_input[0] = uint256(11594052989811480192909785087060796013086210992185267078936660864761838700047); // vk.K[942].X
        mul_input[1] = uint256(8730681393075603677057849809878477173997475324483367661464008050812427792076); // vk.K[942].Y
        mul_input[2] = input[941];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[942] * input[941]
        mul_input[0] = uint256(10067230870353488974703285941117609645755680622552558814533198016194476922606); // vk.K[943].X
        mul_input[1] = uint256(19778312195055115079211421080100178967941624758224175203403751203464561636122); // vk.K[943].Y
        mul_input[2] = input[942];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[943] * input[942]
        mul_input[0] = uint256(17347373233853458257083734346773072357600914047255549851832480749732096300454); // vk.K[944].X
        mul_input[1] = uint256(8551204697292050973529392909043542484002522530488027535222906559472623144637); // vk.K[944].Y
        mul_input[2] = input[943];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[944] * input[943]
        mul_input[0] = uint256(8810698472995535102213843659107560575730688706686972524504642038929857315129); // vk.K[945].X
        mul_input[1] = uint256(17162703735002017694734585198552466541286752049469014500893709512626044351571); // vk.K[945].Y
        mul_input[2] = input[944];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[945] * input[944]
        mul_input[0] = uint256(13687783836473229914025017491284225023830139027073481740598515280768381400885); // vk.K[946].X
        mul_input[1] = uint256(8124695961810721169315633635082414856355464654288188617726807646837020522035); // vk.K[946].Y
        mul_input[2] = input[945];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[946] * input[945]
        mul_input[0] = uint256(18336777980754741960815381963095133305627198818979039923291142455124408201553); // vk.K[947].X
        mul_input[1] = uint256(12182121831725499711195808147837178729774481777189558983850825701409095303127); // vk.K[947].Y
        mul_input[2] = input[946];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[947] * input[946]
        mul_input[0] = uint256(1957032396522882240702412937673219963463681241968378606603747220110897910488); // vk.K[948].X
        mul_input[1] = uint256(2059048885838549480417462092549378197282582184354046256669049320784420677629); // vk.K[948].Y
        mul_input[2] = input[947];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[948] * input[947]
        mul_input[0] = uint256(9921129083523433973083469829352820406336094550029680784568985181148017994753); // vk.K[949].X
        mul_input[1] = uint256(15008709967897210323048916368567070574883539268590176421607917527488882561816); // vk.K[949].Y
        mul_input[2] = input[948];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[949] * input[948]
        mul_input[0] = uint256(3535265070025963120322198154478181247788604252650989086500418835492009283463); // vk.K[950].X
        mul_input[1] = uint256(16112641682426858516360229965359464147016299102604168859895800301663896614995); // vk.K[950].Y
        mul_input[2] = input[949];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[950] * input[949]
        mul_input[0] = uint256(20533609922293904234040489267530938481781618686873022781733309214385279237594); // vk.K[951].X
        mul_input[1] = uint256(13949027538754181055694921899685064972030121577449109821327074808753594128026); // vk.K[951].Y
        mul_input[2] = input[950];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[951] * input[950]
        mul_input[0] = uint256(16229093043927903889292846209428641458565346877468965281377922205178002430965); // vk.K[952].X
        mul_input[1] = uint256(4477896499071072276190158038933271276335589037042355511171412062833500049363); // vk.K[952].Y
        mul_input[2] = input[951];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[952] * input[951]
        mul_input[0] = uint256(10966570162069073700567584362264528884294373546515282632203829196762218575084); // vk.K[953].X
        mul_input[1] = uint256(1351440587372686071607673535244291018337602586966514230053368931677773920051); // vk.K[953].Y
        mul_input[2] = input[952];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[953] * input[952]
        mul_input[0] = uint256(1061941720636439144864660317234628078719050705430509186738565538703025755484); // vk.K[954].X
        mul_input[1] = uint256(17203504056838419383240274116591290389461292146311327437822566270851285833564); // vk.K[954].Y
        mul_input[2] = input[953];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[954] * input[953]
        mul_input[0] = uint256(20949181198279259340018354055523169237734854882486568777232821024279717309158); // vk.K[955].X
        mul_input[1] = uint256(16810545798692107106373684989833819376698028169532706710038662218548783647901); // vk.K[955].Y
        mul_input[2] = input[954];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[955] * input[954]
        mul_input[0] = uint256(19329050533809491496040780568294900192392879688217455960861332667895831194993); // vk.K[956].X
        mul_input[1] = uint256(18376115643427944438955773341131026890247864252986922334597164161066783954336); // vk.K[956].Y
        mul_input[2] = input[955];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[956] * input[955]
        mul_input[0] = uint256(8092409573860024233562839465477995544246964897597109330911159936836102998388); // vk.K[957].X
        mul_input[1] = uint256(9851183855994764174813620846563619894061450174559600538330626914879618294137); // vk.K[957].Y
        mul_input[2] = input[956];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[957] * input[956]
        mul_input[0] = uint256(19441180164588751401641740389648016485836260247592601020070473338159140952872); // vk.K[958].X
        mul_input[1] = uint256(19961247629926845703656938825045711004622932246757576417131388256621286304006); // vk.K[958].Y
        mul_input[2] = input[957];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[958] * input[957]
        mul_input[0] = uint256(865162436774470287284415995001246011966012437286395884977787570639384191091); // vk.K[959].X
        mul_input[1] = uint256(15343547885942524140035039956359752105803263123709754788965273585783936543518); // vk.K[959].Y
        mul_input[2] = input[958];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[959] * input[958]
        mul_input[0] = uint256(1421586844379726887966764986097029584059979489383477280734103180651389197216); // vk.K[960].X
        mul_input[1] = uint256(11018300217013297692359887074251290411275891742220689735557784531849767152544); // vk.K[960].Y
        mul_input[2] = input[959];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[960] * input[959]
        mul_input[0] = uint256(3819432731192630196436001084843725971880856917138214238987016101882148638713); // vk.K[961].X
        mul_input[1] = uint256(643627172333650569221119191201796418739949450193692591894828457478566424219); // vk.K[961].Y
        mul_input[2] = input[960];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[961] * input[960]
        mul_input[0] = uint256(5215431261960446039544391519797454180995708923146176290116597587356648511845); // vk.K[962].X
        mul_input[1] = uint256(6803453572260244247652259581209737519941780415031134502203309374293962526406); // vk.K[962].Y
        mul_input[2] = input[961];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[962] * input[961]
        mul_input[0] = uint256(12176630568842988399682958506747030116657237694142019711342242543674432803714); // vk.K[963].X
        mul_input[1] = uint256(11787049431800338335531366337694573683058919861636337351951370283565263400366); // vk.K[963].Y
        mul_input[2] = input[962];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[963] * input[962]
        mul_input[0] = uint256(4702436436844630391991025470579382210004046751687979012343412396403747800329); // vk.K[964].X
        mul_input[1] = uint256(10093979493127609948975776852532100681374390738317760850306804814723586614638); // vk.K[964].Y
        mul_input[2] = input[963];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[964] * input[963]
        mul_input[0] = uint256(6783672398175024540624977592214971078043058338828588261851542489498253527305); // vk.K[965].X
        mul_input[1] = uint256(7739228335368306786380014018131053563135299617341406970626541589763688311311); // vk.K[965].Y
        mul_input[2] = input[964];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[965] * input[964]
        mul_input[0] = uint256(6633201991489783891458891964541789000522488504858212036852258948196847022240); // vk.K[966].X
        mul_input[1] = uint256(194700469966234864716116291821689191493331224551804380803778810145308391129); // vk.K[966].Y
        mul_input[2] = input[965];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[966] * input[965]
        mul_input[0] = uint256(18350924178834114289640307628835928463431280639942085760332255707162960632966); // vk.K[967].X
        mul_input[1] = uint256(17511606821735774713902078063222513425388249030230752593029858923687543467627); // vk.K[967].Y
        mul_input[2] = input[966];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[967] * input[966]
        mul_input[0] = uint256(8421516053243798814309610375230307189082707320278801746416984154561812015594); // vk.K[968].X
        mul_input[1] = uint256(17880106369666221832346955000498907464044932217106371358617112238850404899568); // vk.K[968].Y
        mul_input[2] = input[967];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[968] * input[967]
        mul_input[0] = uint256(5185531676931904555113248742878759875056926434486663614929839742103804092579); // vk.K[969].X
        mul_input[1] = uint256(502787625653596776047658122984203420584736014540635098104775080653695411846); // vk.K[969].Y
        mul_input[2] = input[968];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[969] * input[968]
        mul_input[0] = uint256(1916660698167383798532594333796029692360745408492852499537838098602889708920); // vk.K[970].X
        mul_input[1] = uint256(6853816244004079192990128015012208242883160063498613839254114866359826636395); // vk.K[970].Y
        mul_input[2] = input[969];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[970] * input[969]
        mul_input[0] = uint256(2843670147379629736165625039707067973902903433844732232795135029881785991266); // vk.K[971].X
        mul_input[1] = uint256(13762198391275587799108276071408740818643265955610694611384889968960531081306); // vk.K[971].Y
        mul_input[2] = input[970];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[971] * input[970]
        mul_input[0] = uint256(14688218478400424349790782073753048869664058785169571123688869231091715839200); // vk.K[972].X
        mul_input[1] = uint256(8119007798688556148708550911302924099324923455315793672570156760913619992130); // vk.K[972].Y
        mul_input[2] = input[971];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[972] * input[971]
        mul_input[0] = uint256(19209050888431154650559753502984410665024863594524948244107377378957730407617); // vk.K[973].X
        mul_input[1] = uint256(21753627601730154324460795097650270729430623022747077248911360372002321376716); // vk.K[973].Y
        mul_input[2] = input[972];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[973] * input[972]
        mul_input[0] = uint256(1934430737631940755211585794668257985825269675044729550779902162663227317911); // vk.K[974].X
        mul_input[1] = uint256(21087946276051034954827442817113191659263035113244328103778416994893559456103); // vk.K[974].Y
        mul_input[2] = input[973];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[974] * input[973]
        mul_input[0] = uint256(13775807834617771895024238328438357831339790991933820575909252141267526860528); // vk.K[975].X
        mul_input[1] = uint256(8729248056689442998818797005972876055430020085502448688990829001159944933683); // vk.K[975].Y
        mul_input[2] = input[974];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[975] * input[974]
        mul_input[0] = uint256(16094850103284687789568955376491613632853099813244575322482587571979172532759); // vk.K[976].X
        mul_input[1] = uint256(19637158534423602643182207099570237378369358834091042895270375508644386090874); // vk.K[976].Y
        mul_input[2] = input[975];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[976] * input[975]
        mul_input[0] = uint256(1877476900242466117391003931615681453164094605699536955811903989823428953108); // vk.K[977].X
        mul_input[1] = uint256(16399440962201818755974088960648975989810082499910256632898897549974730709995); // vk.K[977].Y
        mul_input[2] = input[976];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[977] * input[976]
        mul_input[0] = uint256(14765042710676119789569020081102851109034146730574803361269241632178384300917); // vk.K[978].X
        mul_input[1] = uint256(659462378863134121943939309795799089919948880971575827788802091235591915124); // vk.K[978].Y
        mul_input[2] = input[977];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[978] * input[977]
        mul_input[0] = uint256(7673332918369647778584837111817370757482408407855048479902809798868282910949); // vk.K[979].X
        mul_input[1] = uint256(11214049595480032762824615463044747140202294520861904715052341167749610455535); // vk.K[979].Y
        mul_input[2] = input[978];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[979] * input[978]
        mul_input[0] = uint256(13480791151821359397697314093533859345683259440127260472869268232666914372233); // vk.K[980].X
        mul_input[1] = uint256(11666737348515976715618139043064840885961683407363266385699581313467479834615); // vk.K[980].Y
        mul_input[2] = input[979];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[980] * input[979]
        mul_input[0] = uint256(20283337853352322096891361537871359976413015852924153730311522628615580010897); // vk.K[981].X
        mul_input[1] = uint256(16004659602635091209571972997693773361947384612403836020467200683567740028086); // vk.K[981].Y
        mul_input[2] = input[980];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[981] * input[980]
        mul_input[0] = uint256(7443044146777880740921754312330042213189649088650937072442733521708015953591); // vk.K[982].X
        mul_input[1] = uint256(4043335261687624056474333421814082165358199209655827577993505986389342832084); // vk.K[982].Y
        mul_input[2] = input[981];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[982] * input[981]
        mul_input[0] = uint256(15038653445779804104705918196006435932777029750475432468280361869715594952485); // vk.K[983].X
        mul_input[1] = uint256(12759353021199837370752619099650969810969875776345724793247550667078074291852); // vk.K[983].Y
        mul_input[2] = input[982];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[983] * input[982]
        mul_input[0] = uint256(19744616012430321045812242738330242735558167352039144665009418450119344645913); // vk.K[984].X
        mul_input[1] = uint256(2312100511992166785093285730342771385395149043985781484848204650765733322002); // vk.K[984].Y
        mul_input[2] = input[983];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[984] * input[983]
        mul_input[0] = uint256(13646941817014649747305590746170208739456511016188095990138015001461178341993); // vk.K[985].X
        mul_input[1] = uint256(21351331441495606922143483552508599625853304045639573727432690306667993137809); // vk.K[985].Y
        mul_input[2] = input[984];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[985] * input[984]
        mul_input[0] = uint256(11107648596385922452523991180473670947120616741429021873674407340466428905168); // vk.K[986].X
        mul_input[1] = uint256(4222385649159322660710598612354892918684410273064624500299531456471373040189); // vk.K[986].Y
        mul_input[2] = input[985];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[986] * input[985]
        mul_input[0] = uint256(3056337842406282385974691599219805051207856596116235941276462897932782313281); // vk.K[987].X
        mul_input[1] = uint256(21605779415101135650641121192330734765141219458690734320189834300782292460733); // vk.K[987].Y
        mul_input[2] = input[986];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[987] * input[986]
        mul_input[0] = uint256(20596855413075568632490363882920423845401327930844847834428948394410251983378); // vk.K[988].X
        mul_input[1] = uint256(3290497655104542098363714228339435848625377350307716034985929844910394943932); // vk.K[988].Y
        mul_input[2] = input[987];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[988] * input[987]
        mul_input[0] = uint256(5615950939900967573600661512005010271887136016887259053307642071842882555521); // vk.K[989].X
        mul_input[1] = uint256(15063935766974817712015673401710515198530417030714045094798250667470932431546); // vk.K[989].Y
        mul_input[2] = input[988];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[989] * input[988]
        mul_input[0] = uint256(4415089618585304982009005638017834112736030485392691818618368770316208192530); // vk.K[990].X
        mul_input[1] = uint256(17235865007087353360115932447403129743557939866585782884763522724375064279323); // vk.K[990].Y
        mul_input[2] = input[989];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[990] * input[989]
        mul_input[0] = uint256(1160680282419654315435954950421254406193060440103723758600244528216458369694); // vk.K[991].X
        mul_input[1] = uint256(12632702620890189956481591697506932824521412931317470318325941605780317304738); // vk.K[991].Y
        mul_input[2] = input[990];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[991] * input[990]
        mul_input[0] = uint256(17720563822301986201178427355772871551282439448438981862151290300471897550943); // vk.K[992].X
        mul_input[1] = uint256(12133444263800001861186263816239374763608534776761614095766210762778653408037); // vk.K[992].Y
        mul_input[2] = input[991];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[992] * input[991]
        mul_input[0] = uint256(12701481894942129390202989842080836085562163142367589555612219102900058591416); // vk.K[993].X
        mul_input[1] = uint256(15287555652295614793703696636656183543067800462043614537912190353717493350486); // vk.K[993].Y
        mul_input[2] = input[992];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[993] * input[992]
        mul_input[0] = uint256(5150691616336872494570481727100888477526484677649785263404913534867383427993); // vk.K[994].X
        mul_input[1] = uint256(16708176953067870176337535745983381947915112300030765511068472688240462157738); // vk.K[994].Y
        mul_input[2] = input[993];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[994] * input[993]
        mul_input[0] = uint256(6002469797416352260048625842646422967980512406415867405979085218424398805869); // vk.K[995].X
        mul_input[1] = uint256(10850717095894650132367022146159740776091854277471444184765559055941862209662); // vk.K[995].Y
        mul_input[2] = input[994];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[995] * input[994]
        mul_input[0] = uint256(10959781270491994044473640653608767498759515556599954848819063024356025204531); // vk.K[996].X
        mul_input[1] = uint256(16567110703143327715743814372403216874870513746397178150657023589290912684523); // vk.K[996].Y
        mul_input[2] = input[995];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[996] * input[995]
        mul_input[0] = uint256(16618279088884352016090207315426986072196013887362686281242373729280760760114); // vk.K[997].X
        mul_input[1] = uint256(18778857683444647416089645694779647720622363213568225832135244150812301004506); // vk.K[997].Y
        mul_input[2] = input[996];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[997] * input[996]
        mul_input[0] = uint256(14014749891980555484281524208819657590816309628180509940492166921136486219471); // vk.K[998].X
        mul_input[1] = uint256(14449195258369346970012631780241426056253792014193629055261252540927174127003); // vk.K[998].Y
        mul_input[2] = input[997];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[998] * input[997]
        mul_input[0] = uint256(2430597152051736797937088812831222005456586839947811637367311597733053638093); // vk.K[999].X
        mul_input[1] = uint256(14965638431948312790205700997629683483648110179512582690775938155260944935404); // vk.K[999].Y
        mul_input[2] = input[998];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[999] * input[998]
        mul_input[0] = uint256(11802052332130066130870790463165602130611733802172998170110608020250185555484); // vk.K[1000].X
        mul_input[1] = uint256(18465119176612703227376433788689666213715890889936375927974264615141728343992); // vk.K[1000].Y
        mul_input[2] = input[999];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1000] * input[999]
        mul_input[0] = uint256(15589581992951177218246957922228588872413211667404041661812388273668300713565); // vk.K[1001].X
        mul_input[1] = uint256(20563054987630267927516236039384674281271551773652759777163945068296811044793); // vk.K[1001].Y
        mul_input[2] = input[1000];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1001] * input[1000]
        mul_input[0] = uint256(12395487269745667126377744587245517207321642446071432784373805332460578017562); // vk.K[1002].X
        mul_input[1] = uint256(5743672296469832855981234145628312273326934110533517153043820921191951437132); // vk.K[1002].Y
        mul_input[2] = input[1001];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1002] * input[1001]
        mul_input[0] = uint256(11783236709023434446469816575682056301760984810396425827371865955162727772525); // vk.K[1003].X
        mul_input[1] = uint256(7330066889506537372593608750161974278716017357522975621959152445338591141679); // vk.K[1003].Y
        mul_input[2] = input[1002];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1003] * input[1002]
        mul_input[0] = uint256(8302265497765153537486970041335916918972761077494859268200169584824487886870); // vk.K[1004].X
        mul_input[1] = uint256(20872635495552628685004803293098085890441369606799668584028968156163492298227); // vk.K[1004].Y
        mul_input[2] = input[1003];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1004] * input[1003]
        mul_input[0] = uint256(15595917074584102348728025454929181588812915137962313420331438321821283905284); // vk.K[1005].X
        mul_input[1] = uint256(8497355894191594407486327620516746560426355720602443920125391018762443551905); // vk.K[1005].Y
        mul_input[2] = input[1004];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1005] * input[1004]
        mul_input[0] = uint256(1843982831659119228867107425402477665862956014688956829660572022573433921013); // vk.K[1006].X
        mul_input[1] = uint256(19868045738886412203866943898685098773012368645141457428968979610641941415410); // vk.K[1006].Y
        mul_input[2] = input[1005];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1006] * input[1005]
        mul_input[0] = uint256(2700774139720021242857269195395702364210501680235599676952340501248938145487); // vk.K[1007].X
        mul_input[1] = uint256(3173776494725382989317898919747004246712035412343106763273948545327692101503); // vk.K[1007].Y
        mul_input[2] = input[1006];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1007] * input[1006]
        mul_input[0] = uint256(17122417283503378830703934249093333486158425441218787940351339950646290714556); // vk.K[1008].X
        mul_input[1] = uint256(450452686705506358725228502889841633106067058949624566238463683088097684687); // vk.K[1008].Y
        mul_input[2] = input[1007];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1008] * input[1007]
        mul_input[0] = uint256(699012180676905042982644044142530225936707453035834908231029708390954157320); // vk.K[1009].X
        mul_input[1] = uint256(15202132849603784309925278640162742018547773743976736371884747752477921428502); // vk.K[1009].Y
        mul_input[2] = input[1008];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1009] * input[1008]
        mul_input[0] = uint256(569795214288244086271786836494646670507662897370480519645732333872864708988); // vk.K[1010].X
        mul_input[1] = uint256(1948062619926344407148364501537532926124688461526522203320284299194180545955); // vk.K[1010].Y
        mul_input[2] = input[1009];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1010] * input[1009]
        mul_input[0] = uint256(12144805978852835800883455592565653654336363385075716278266087602299254737456); // vk.K[1011].X
        mul_input[1] = uint256(13644520814277038497521341907283806549576785340177775925520046010930027833502); // vk.K[1011].Y
        mul_input[2] = input[1010];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1011] * input[1010]
        mul_input[0] = uint256(21268940366142752363004753362707087226475819387462541787493753567790827803455); // vk.K[1012].X
        mul_input[1] = uint256(8630109781200977417728540879692593420181498379063292479379708127551535393524); // vk.K[1012].Y
        mul_input[2] = input[1011];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1012] * input[1011]
        mul_input[0] = uint256(7558663102271021999378710424772613172742830759753836512434757348502541239378); // vk.K[1013].X
        mul_input[1] = uint256(12771479481007035942499731329336102979704817675631821070554524420288478444540); // vk.K[1013].Y
        mul_input[2] = input[1012];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1013] * input[1012]
        mul_input[0] = uint256(18141465911947517257113684510121685898026859039494344480953347474487113135295); // vk.K[1014].X
        mul_input[1] = uint256(14205934788292387712527247343513924452567450645629594979033338507992123951193); // vk.K[1014].Y
        mul_input[2] = input[1013];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1014] * input[1013]
        mul_input[0] = uint256(696019689520429644071846020404950187128307354955280097549088892768204951392); // vk.K[1015].X
        mul_input[1] = uint256(10546404291923335805758300698191034283317212541832278737297734141011335493338); // vk.K[1015].Y
        mul_input[2] = input[1014];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1015] * input[1014]
        mul_input[0] = uint256(10456666497066767243314146615652281007513686100965274016463566784444888621840); // vk.K[1016].X
        mul_input[1] = uint256(14771797860076210608768942067095972188263733547159161174718943979232625023166); // vk.K[1016].Y
        mul_input[2] = input[1015];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1016] * input[1015]
        mul_input[0] = uint256(17912546716007473322588963554486412969136770414788211195649813651560491346389); // vk.K[1017].X
        mul_input[1] = uint256(12567699926638907016497531399324204019915405585575837346322586630429781286028); // vk.K[1017].Y
        mul_input[2] = input[1016];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1017] * input[1016]
        mul_input[0] = uint256(9908111108632757639961802949501372176657494768791618731742188182316753808721); // vk.K[1018].X
        mul_input[1] = uint256(6200919999228598443380042359931411863724335068280484977527419035083971735142); // vk.K[1018].Y
        mul_input[2] = input[1017];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1018] * input[1017]
        mul_input[0] = uint256(16277993630135316322300732118638969374984301046998329284841808753364796440954); // vk.K[1019].X
        mul_input[1] = uint256(18911355198448581751899241591756668666157829441451967524395846441507845982384); // vk.K[1019].Y
        mul_input[2] = input[1018];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1019] * input[1018]
        mul_input[0] = uint256(16814309633658636722556706405848702018058704408427345804511517975920556916156); // vk.K[1020].X
        mul_input[1] = uint256(2490941288085401719661401154845049363648577667607922612871260506795973778455); // vk.K[1020].Y
        mul_input[2] = input[1019];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1020] * input[1019]
        mul_input[0] = uint256(1732822700164798185942361537350965681755615510402015921942706710258569877146); // vk.K[1021].X
        mul_input[1] = uint256(627905200499310102435090290826342083541267420896123632598125001876602829684); // vk.K[1021].Y
        mul_input[2] = input[1020];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1021] * input[1020]
        mul_input[0] = uint256(21698547019664713150616796994874402438891370231407962199154827029110876993418); // vk.K[1022].X
        mul_input[1] = uint256(10544114733245297104728327801335986846682589219260596457798467435555290202700); // vk.K[1022].Y
        mul_input[2] = input[1021];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1022] * input[1021]
        mul_input[0] = uint256(14329499414304756737272730869314522343556037650614915990730438087140699154506); // vk.K[1023].X
        mul_input[1] = uint256(149454294528569024094941380308289023567387943309712912145801548269715508764); // vk.K[1023].Y
        mul_input[2] = input[1022];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1023] * input[1022]
        mul_input[0] = uint256(14737405217758335757838341288188552538687218694122369874012736477046592059256); // vk.K[1024].X
        mul_input[1] = uint256(17359154001236889535622637241927669314848330464595454665239646738787678283686); // vk.K[1024].Y
        mul_input[2] = input[1023];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1024] * input[1023]
        mul_input[0] = uint256(17862767217840678578927358314469503644458888769971104577770197582417532611361); // vk.K[1025].X
        mul_input[1] = uint256(5621613701959756482372331359413218395631053256781689477911866851099694287013); // vk.K[1025].Y
        mul_input[2] = input[1024];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1025] * input[1024]
        mul_input[0] = uint256(14435931203792181966017054744712547046184105905846700441863963021490951218066); // vk.K[1026].X
        mul_input[1] = uint256(5612758968152493452069364514689906405707251325785239157129884676630022270166); // vk.K[1026].Y
        mul_input[2] = input[1025];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1026] * input[1025]
        mul_input[0] = uint256(17675909960047414978814212744893781626025154232513535611079285936302028724730); // vk.K[1027].X
        mul_input[1] = uint256(15207914592524772165104060994667876810812704237185610295825455096933367004381); // vk.K[1027].Y
        mul_input[2] = input[1026];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1027] * input[1026]
        mul_input[0] = uint256(5884025084437943461729523235788459441864149625347696289324011537833720242239); // vk.K[1028].X
        mul_input[1] = uint256(12326583973565758116194765795595843958918549508613522697068463957120444556097); // vk.K[1028].Y
        mul_input[2] = input[1027];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1028] * input[1027]
        mul_input[0] = uint256(6256254709485524981155542511419790055369202737292379087467507703085326554102); // vk.K[1029].X
        mul_input[1] = uint256(8900304152173016490088401294534125144112377946533677310632246440516660434004); // vk.K[1029].Y
        mul_input[2] = input[1028];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1029] * input[1028]
        mul_input[0] = uint256(1543356699709197554548857303475883968870341065843414420118285295174411880079); // vk.K[1030].X
        mul_input[1] = uint256(17748545046398721134402277938443781268135493301904402593289316523243474771150); // vk.K[1030].Y
        mul_input[2] = input[1029];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1030] * input[1029]
        mul_input[0] = uint256(14640578393233766709050320764395580844254813726240639575932951174316368014400); // vk.K[1031].X
        mul_input[1] = uint256(2540593870057100663132111032154735327852253793838357498714555858081029811693); // vk.K[1031].Y
        mul_input[2] = input[1030];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1031] * input[1030]
        mul_input[0] = uint256(1733770884957844499300415684366602528871208175639531818524233290735634031529); // vk.K[1032].X
        mul_input[1] = uint256(6399705029959015879003854739168981879657680527036646955566082044816587621729); // vk.K[1032].Y
        mul_input[2] = input[1031];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1032] * input[1031]
        mul_input[0] = uint256(21830324160107682000216415951762102378006434746748595787684719216709706524398); // vk.K[1033].X
        mul_input[1] = uint256(20504577914514065415104074721746192632958073821299257583391565135718464688710); // vk.K[1033].Y
        mul_input[2] = input[1032];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1033] * input[1032]
        mul_input[0] = uint256(16056205080731750247283303018211703699909415818153444930553886972897418199491); // vk.K[1034].X
        mul_input[1] = uint256(16141226988348545809082463540365628379630484666538152515377620779861386344616); // vk.K[1034].Y
        mul_input[2] = input[1033];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1034] * input[1033]
        mul_input[0] = uint256(4128240687310843746556595444103012940468987455871682615607084965263071465522); // vk.K[1035].X
        mul_input[1] = uint256(7285316283155848177801275879133090896752427681698016492579369859455432396860); // vk.K[1035].Y
        mul_input[2] = input[1034];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1035] * input[1034]
        mul_input[0] = uint256(14602290755644989235594393168071026249852336176682353288136665447139351144747); // vk.K[1036].X
        mul_input[1] = uint256(4901036665791809346845505981609232594967935821326981853816651957842245998633); // vk.K[1036].Y
        mul_input[2] = input[1035];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1036] * input[1035]
        mul_input[0] = uint256(2235014975275859711406996994373367593991030393225985433770442620764199648334); // vk.K[1037].X
        mul_input[1] = uint256(14856661316663505792264657940890112459000821526842033904477593104258494275014); // vk.K[1037].Y
        mul_input[2] = input[1036];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1037] * input[1036]
        mul_input[0] = uint256(14791641115405567186743740414779354110195277748311998931674213878705056370266); // vk.K[1038].X
        mul_input[1] = uint256(6617550143800086121210993289408950854490012585897377662008378608307428844994); // vk.K[1038].Y
        mul_input[2] = input[1037];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1038] * input[1037]
        mul_input[0] = uint256(8452601877892945695605812392468333975294679420480192144963880506442095781322); // vk.K[1039].X
        mul_input[1] = uint256(21876382613492043135696504254708828779521012245591638685734257803767026863828); // vk.K[1039].Y
        mul_input[2] = input[1038];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1039] * input[1038]
        mul_input[0] = uint256(20709775449694682798180397707560225931443469803724874975614141076663488007057); // vk.K[1040].X
        mul_input[1] = uint256(6362096393715571652064563707539875285938507820172809986406131533410759738208); // vk.K[1040].Y
        mul_input[2] = input[1039];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1040] * input[1039]
        mul_input[0] = uint256(4916558297706967466376976118366306262588287991950983797848890025855838887990); // vk.K[1041].X
        mul_input[1] = uint256(2340897601468932540443288457629992852440853470583081244391894577448129803698); // vk.K[1041].Y
        mul_input[2] = input[1040];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1041] * input[1040]
        mul_input[0] = uint256(18788651650265421976885609405777769180359024189975459156822856339781355411622); // vk.K[1042].X
        mul_input[1] = uint256(16686136753058861714714318926004156092893484024652925811146701898184553097320); // vk.K[1042].Y
        mul_input[2] = input[1041];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1042] * input[1041]
        mul_input[0] = uint256(12460353590959229313943094159027648591416346513425591368520496353108308015648); // vk.K[1043].X
        mul_input[1] = uint256(1337946194378469424818611037549606360137094677854688660347219814373240427403); // vk.K[1043].Y
        mul_input[2] = input[1042];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1043] * input[1042]
        mul_input[0] = uint256(174120176704602943544758518898803881274004954329555258030735519108876634608); // vk.K[1044].X
        mul_input[1] = uint256(12709708730417738766360648621466177043869055773461177156269096014012192141462); // vk.K[1044].Y
        mul_input[2] = input[1043];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1044] * input[1043]
        mul_input[0] = uint256(17274457571338326055319262372297897045485380363499107289792034089377524827884); // vk.K[1045].X
        mul_input[1] = uint256(8524802810766206884735159590808098870804531155436166292791239006393952377651); // vk.K[1045].Y
        mul_input[2] = input[1044];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1045] * input[1044]
        mul_input[0] = uint256(7141374788311831230184089993204532994222911640449206992405728284679904979430); // vk.K[1046].X
        mul_input[1] = uint256(5914201516805796731434284300754282052244574375888278892863974420231651585211); // vk.K[1046].Y
        mul_input[2] = input[1045];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1046] * input[1045]
        mul_input[0] = uint256(9286502079464481626588138766635661522116744131185433987609642595776851582892); // vk.K[1047].X
        mul_input[1] = uint256(20037998052877098325252952060480860899635205263253445051622404227785835986487); // vk.K[1047].Y
        mul_input[2] = input[1046];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1047] * input[1046]
        mul_input[0] = uint256(20217227275963883874177495956304466417610660305538230434550027899937831465189); // vk.K[1048].X
        mul_input[1] = uint256(7842552620100289761728883821105418951890037426229149454723983535704914859611); // vk.K[1048].Y
        mul_input[2] = input[1047];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1048] * input[1047]
        mul_input[0] = uint256(961614229615981478338403442525109744896130827023500207475257201965120293483); // vk.K[1049].X
        mul_input[1] = uint256(2225409849846247855227191265162430110369375287477777706069572070367522886821); // vk.K[1049].Y
        mul_input[2] = input[1048];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1049] * input[1048]
        mul_input[0] = uint256(6918449406033101259838687303592915547445516716451961557322002198276320099575); // vk.K[1050].X
        mul_input[1] = uint256(953598473370076116789822695800116713659763786321393918529476363439707356202); // vk.K[1050].Y
        mul_input[2] = input[1049];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1050] * input[1049]
        mul_input[0] = uint256(4106582068787975338716240894317612683412842360008560578920785846955423630911); // vk.K[1051].X
        mul_input[1] = uint256(334199731582078767619661762193590870905787829591660883086534828346631247236); // vk.K[1051].Y
        mul_input[2] = input[1050];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1051] * input[1050]
        mul_input[0] = uint256(3894263095906400909819574514319524283434868024817415699003857157200505391257); // vk.K[1052].X
        mul_input[1] = uint256(14835834521642102861246120414084489289484440569508941705727578483699822194086); // vk.K[1052].Y
        mul_input[2] = input[1051];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1052] * input[1051]
        mul_input[0] = uint256(21873920101272004298970336572652740530003059364002575400124302978729740616719); // vk.K[1053].X
        mul_input[1] = uint256(21685538182022405133093637107169921887788897913991772992395140207396422412109); // vk.K[1053].Y
        mul_input[2] = input[1052];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1053] * input[1052]
        mul_input[0] = uint256(18580375264638909956068108842726479502770807969626455362069447089528770261217); // vk.K[1054].X
        mul_input[1] = uint256(19262090237123106947651024346149182401781771625375441015230507776480409091575); // vk.K[1054].Y
        mul_input[2] = input[1053];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1054] * input[1053]
        mul_input[0] = uint256(2420868617701977466674694201107617916852667615878124655771697495714110166678); // vk.K[1055].X
        mul_input[1] = uint256(12277907921391083804609276210693470289027069712816325294236677061533412523544); // vk.K[1055].Y
        mul_input[2] = input[1054];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1055] * input[1054]
        mul_input[0] = uint256(9752088225618260043551382282196735305221838956063156369335315650816855835293); // vk.K[1056].X
        mul_input[1] = uint256(21717220477566882753565834697513379028991527861002574365745592784708130092592); // vk.K[1056].Y
        mul_input[2] = input[1055];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1056] * input[1055]
        mul_input[0] = uint256(13184726837788807640413490905262064527328315163393995970990098854617571672957); // vk.K[1057].X
        mul_input[1] = uint256(15366242136585736125598122245429224406762774485547739929385902521084077787671); // vk.K[1057].Y
        mul_input[2] = input[1056];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1057] * input[1056]
        mul_input[0] = uint256(789578906958962609223282564011200588160646900303943167257360579238202271115); // vk.K[1058].X
        mul_input[1] = uint256(8521203612954538831804731562017280959488137664418752020404214109494710575693); // vk.K[1058].Y
        mul_input[2] = input[1057];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1058] * input[1057]
        mul_input[0] = uint256(1344378892558350463544444326784297769845139006936999619472137368498592131895); // vk.K[1059].X
        mul_input[1] = uint256(12688363122172123740017443930463439489548172557182255921890537100161817870280); // vk.K[1059].Y
        mul_input[2] = input[1058];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1059] * input[1058]
        mul_input[0] = uint256(16176433468025916599928940902376746748104865784026049502285897604368151559009); // vk.K[1060].X
        mul_input[1] = uint256(20485216813389849959103548080062795680205988392554371125999790518760206797057); // vk.K[1060].Y
        mul_input[2] = input[1059];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1060] * input[1059]
        mul_input[0] = uint256(6907988598709059249364727554563199249000928832483370793417695221544660912115); // vk.K[1061].X
        mul_input[1] = uint256(10252330104997124729077258648588675218497413650860502797532401180372315696108); // vk.K[1061].Y
        mul_input[2] = input[1060];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1061] * input[1060]
        mul_input[0] = uint256(11441597176707990887156399675181039464292327910505615207910691648639737172749); // vk.K[1062].X
        mul_input[1] = uint256(10319399935933510812549996574024899496212295788145801262508090607176995677681); // vk.K[1062].Y
        mul_input[2] = input[1061];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1062] * input[1061]
        mul_input[0] = uint256(18505106785462051785815568467025338068853871683243294781190926011836148698837); // vk.K[1063].X
        mul_input[1] = uint256(8034728730567834400033214342879083979301891944763943672095643038660742374311); // vk.K[1063].Y
        mul_input[2] = input[1062];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1063] * input[1062]
        mul_input[0] = uint256(9107658415341593739372723602770188135600509786502919192247892201478772835604); // vk.K[1064].X
        mul_input[1] = uint256(11891740286885662235812332210490732461458753164191464845395735950302368551091); // vk.K[1064].Y
        mul_input[2] = input[1063];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1064] * input[1063]
        mul_input[0] = uint256(15398909336542472352174809993193593911821109387937900929021015517579397109548); // vk.K[1065].X
        mul_input[1] = uint256(5295193174166404812990106036708339683873876053372108106662751694768200969276); // vk.K[1065].Y
        mul_input[2] = input[1064];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1065] * input[1064]
        mul_input[0] = uint256(4124731038067477920047130785970535848470500819648347267916124282775631899309); // vk.K[1066].X
        mul_input[1] = uint256(20628532435899052523307641017969797182538749523739256126398906526779565842997); // vk.K[1066].Y
        mul_input[2] = input[1065];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1066] * input[1065]
        mul_input[0] = uint256(4557117058476999308240895012446636350553864957248553533824341605528046126176); // vk.K[1067].X
        mul_input[1] = uint256(16802640592354208300133308988303104336657034587466295124468455607664190392553); // vk.K[1067].Y
        mul_input[2] = input[1066];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1067] * input[1066]
        mul_input[0] = uint256(12232592351453853459573734478841383091825534739796349012696150704731479561446); // vk.K[1068].X
        mul_input[1] = uint256(17972379613397647649167456232328549876868530551630819009357667062503533540946); // vk.K[1068].Y
        mul_input[2] = input[1067];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1068] * input[1067]
        mul_input[0] = uint256(3641618595002874200304902126431647417038090130776733800900688617612178200855); // vk.K[1069].X
        mul_input[1] = uint256(16825839097416856972415156964926311616441065842582667304446636838700839709852); // vk.K[1069].Y
        mul_input[2] = input[1068];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1069] * input[1068]
        mul_input[0] = uint256(13564032730038838813285359828299573513224410651651318189564874377839685576953); // vk.K[1070].X
        mul_input[1] = uint256(16513152880518579011817662732454815805038500053745158032826991095159081197341); // vk.K[1070].Y
        mul_input[2] = input[1069];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1070] * input[1069]
        mul_input[0] = uint256(13109574764563019687816844021613037592233590568392158683600578939412093719033); // vk.K[1071].X
        mul_input[1] = uint256(11047522895558331970751241245088997416919080696147843259286241499822302861328); // vk.K[1071].Y
        mul_input[2] = input[1070];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1071] * input[1070]
        mul_input[0] = uint256(8586995997951562282053061258493009432941285734280600810548578190638294066746); // vk.K[1072].X
        mul_input[1] = uint256(11265394586545559067367701427057710734703064848501603359294891236735179725930); // vk.K[1072].Y
        mul_input[2] = input[1071];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1072] * input[1071]
        mul_input[0] = uint256(7839095328857722345946977546460781756172159315623851102103378968491776343654); // vk.K[1073].X
        mul_input[1] = uint256(20176960479061289573597232495006814319173838130043044062755872144328591696361); // vk.K[1073].Y
        mul_input[2] = input[1072];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1073] * input[1072]
        mul_input[0] = uint256(7188155131955297244634230376718513231563993360168939542954335732246686579674); // vk.K[1074].X
        mul_input[1] = uint256(10877179233468526282529759438843161420309505122170190078938698003726346836974); // vk.K[1074].Y
        mul_input[2] = input[1073];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1074] * input[1073]
        mul_input[0] = uint256(19714224376292434996585227605740286557914815510492280740881192681293902273616); // vk.K[1075].X
        mul_input[1] = uint256(1224990670699227968159035022021053898113049819522026085323674906458179440560); // vk.K[1075].Y
        mul_input[2] = input[1074];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1075] * input[1074]
        mul_input[0] = uint256(7193704618959541441085538306131511905414083126554777237794889244634799884849); // vk.K[1076].X
        mul_input[1] = uint256(10588183885196504569724980716582460991771809016099534084506761638891414091326); // vk.K[1076].Y
        mul_input[2] = input[1075];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1076] * input[1075]
        mul_input[0] = uint256(12711884052635059938903948927295561064062153580016453630163906869369011295064); // vk.K[1077].X
        mul_input[1] = uint256(16788227553162097594663005942813073817203795328157579212498089240974141645072); // vk.K[1077].Y
        mul_input[2] = input[1076];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1077] * input[1076]
        mul_input[0] = uint256(19476784773450577592990116794289775209877003537717674978127698462928152569365); // vk.K[1078].X
        mul_input[1] = uint256(14945448027297102615843453456297760965369957198034359888236317332677349618322); // vk.K[1078].Y
        mul_input[2] = input[1077];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1078] * input[1077]
        mul_input[0] = uint256(1762135248739669910444742605218649436494444084253240547621255548813719288965); // vk.K[1079].X
        mul_input[1] = uint256(8194328037667744847705364733503002757797365497025135388623408493526787824640); // vk.K[1079].Y
        mul_input[2] = input[1078];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1079] * input[1078]
        mul_input[0] = uint256(425572864089861997437761733133142821499100643131621004699800857912290080646); // vk.K[1080].X
        mul_input[1] = uint256(8507381343784508551673365451023564694162497514402326772221033296654561512531); // vk.K[1080].Y
        mul_input[2] = input[1079];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1080] * input[1079]
        mul_input[0] = uint256(18701611775873244676452561743676037008761597178119362485018383226227817046447); // vk.K[1081].X
        mul_input[1] = uint256(16969317536106797668552394874573215801634206213914952954193723247247715404322); // vk.K[1081].Y
        mul_input[2] = input[1080];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1081] * input[1080]
        mul_input[0] = uint256(11591584221403348283798118825758183402564619207306040063840098390880486003742); // vk.K[1082].X
        mul_input[1] = uint256(8030763324300867203576348553392023433180518251455851925343124898390760838240); // vk.K[1082].Y
        mul_input[2] = input[1081];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1082] * input[1081]
        mul_input[0] = uint256(5621256215968711230848090865950134704867519947047062851191160233813876065984); // vk.K[1083].X
        mul_input[1] = uint256(4258545493514137416589864176837694984865564250488727632894152625113939204384); // vk.K[1083].Y
        mul_input[2] = input[1082];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1083] * input[1082]
        mul_input[0] = uint256(7974170549037353707089879378888919236401528261299992059821719704424165679839); // vk.K[1084].X
        mul_input[1] = uint256(11341044317087936672494363405038873520989635851823985821660263281979324074079); // vk.K[1084].Y
        mul_input[2] = input[1083];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1084] * input[1083]
        mul_input[0] = uint256(1294493234600488184668869189324971355189524767963352948453459504280742994231); // vk.K[1085].X
        mul_input[1] = uint256(10103431517380095874056227045104493696779442748026675788771129172854057063293); // vk.K[1085].Y
        mul_input[2] = input[1084];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1085] * input[1084]
        mul_input[0] = uint256(1225137096438487137449474028544328366590747703861593331205898895670290632717); // vk.K[1086].X
        mul_input[1] = uint256(6323072497360352514853796865824224331870408585167957024362650698140703500504); // vk.K[1086].Y
        mul_input[2] = input[1085];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1086] * input[1085]
        mul_input[0] = uint256(14839622214542947554161792294396041576479523390964680111306473110270642243201); // vk.K[1087].X
        mul_input[1] = uint256(8021855038193794982579049480718643039653197478287704593742260320953452924986); // vk.K[1087].Y
        mul_input[2] = input[1086];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1087] * input[1086]
        mul_input[0] = uint256(7542133049098886124684461545301361410740552213377262203085165375144011287645); // vk.K[1088].X
        mul_input[1] = uint256(7290488854789709664090040324343033633926127548182004381889453105503251634493); // vk.K[1088].Y
        mul_input[2] = input[1087];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1088] * input[1087]
        mul_input[0] = uint256(12034846574268092299415770900146178503746578075226617360675179222458742597929); // vk.K[1089].X
        mul_input[1] = uint256(689279588359871762407657074810878400161003827018428255676869432443140579791); // vk.K[1089].Y
        mul_input[2] = input[1088];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1089] * input[1088]
        mul_input[0] = uint256(11303338833535306383259854485818805645644874408192522970563293526877332488744); // vk.K[1090].X
        mul_input[1] = uint256(19938254239437142012716670898212279702118485839284459307016907244541696188924); // vk.K[1090].Y
        mul_input[2] = input[1089];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1090] * input[1089]
        mul_input[0] = uint256(14698493588216640911361396520836196274967252049865986543094967898534410110616); // vk.K[1091].X
        mul_input[1] = uint256(17919669772411089565440883311885925871156859459513260425246702554726584369352); // vk.K[1091].Y
        mul_input[2] = input[1090];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1091] * input[1090]
        mul_input[0] = uint256(2639865910133963464129121959018426396769370997736507700860028928353178284265); // vk.K[1092].X
        mul_input[1] = uint256(3727291986549716228904748355159264517798116615712928574533554663675313634902); // vk.K[1092].Y
        mul_input[2] = input[1091];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1092] * input[1091]
        mul_input[0] = uint256(10815452982429675178925285639571550320810797857750342884603588762249924225929); // vk.K[1093].X
        mul_input[1] = uint256(15228336641381716893746718479255433692932602746934848235939022541778173963276); // vk.K[1093].Y
        mul_input[2] = input[1092];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1093] * input[1092]
        mul_input[0] = uint256(2905135221593400495762188114516079965414432479221132847172253231697699493372); // vk.K[1094].X
        mul_input[1] = uint256(10178310688378864370723548240110798614399387944599432956042164848136080560138); // vk.K[1094].Y
        mul_input[2] = input[1093];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1094] * input[1093]
        mul_input[0] = uint256(15780003005911797504815196662696466045852615258643313563605936804943382118101); // vk.K[1095].X
        mul_input[1] = uint256(1079368312541633332830483319448414554334135592526481619636130482781815408606); // vk.K[1095].Y
        mul_input[2] = input[1094];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1095] * input[1094]
        mul_input[0] = uint256(9128677406909581946031382455857690199483802554526651540948928030580634473019); // vk.K[1096].X
        mul_input[1] = uint256(13470265091878191875755050143534628692970508690052390575604801787302081455879); // vk.K[1096].Y
        mul_input[2] = input[1095];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1096] * input[1095]
        mul_input[0] = uint256(6769824330635094885089282951397435147970041839437180657630107507660278703991); // vk.K[1097].X
        mul_input[1] = uint256(17681215703062898009846590267649797951066603726584706175817346724015958605657); // vk.K[1097].Y
        mul_input[2] = input[1096];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1097] * input[1096]
        mul_input[0] = uint256(12818709658084215642414988070994858087647717777612213952910765263117411692143); // vk.K[1098].X
        mul_input[1] = uint256(1474648032125035864279811416336727640724397039009215245251242278135733733305); // vk.K[1098].Y
        mul_input[2] = input[1097];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1098] * input[1097]
        mul_input[0] = uint256(14699706505402109645955117585842512741891636767664753405768183252047440567774); // vk.K[1099].X
        mul_input[1] = uint256(18190730109041804176365315792495705406366505948038528368433181459508782791625); // vk.K[1099].Y
        mul_input[2] = input[1098];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1099] * input[1098]
        mul_input[0] = uint256(15837004900320267088615489371945256308216940089415711985614437321236516086920); // vk.K[1100].X
        mul_input[1] = uint256(15958238996715690690970135008684564230122082566792877099881009644515905586815); // vk.K[1100].Y
        mul_input[2] = input[1099];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1100] * input[1099]
        mul_input[0] = uint256(11512523949578007128883829952107919336435557701568620732094187365686212014105); // vk.K[1101].X
        mul_input[1] = uint256(13497632574006095719608422712178108876411581322203685045477038505350528292373); // vk.K[1101].Y
        mul_input[2] = input[1100];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1101] * input[1100]
        mul_input[0] = uint256(2310267138348073104857453659790751183332169503335502473092547665468331454728); // vk.K[1102].X
        mul_input[1] = uint256(15922300926340185138108874943473463497589986610922460916468529693993205723420); // vk.K[1102].Y
        mul_input[2] = input[1101];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1102] * input[1101]
        mul_input[0] = uint256(7473275228431504022638374179277246565811452905433476150776796805058165528792); // vk.K[1103].X
        mul_input[1] = uint256(17757737572413858466066001448077223428825140968797941046106467211929367394721); // vk.K[1103].Y
        mul_input[2] = input[1102];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1103] * input[1102]
        mul_input[0] = uint256(4202821963432439277536750557732207851629735717642128051401806995930107957030); // vk.K[1104].X
        mul_input[1] = uint256(9170091598636967999846837169429310320487386215379323472238517395060101543714); // vk.K[1104].Y
        mul_input[2] = input[1103];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1104] * input[1103]
        mul_input[0] = uint256(947368038370213787445612521546080728729648946301106697641003178310389116363); // vk.K[1105].X
        mul_input[1] = uint256(11285924971075417151361685863163611766544469673704650332461508770774226360665); // vk.K[1105].Y
        mul_input[2] = input[1104];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1105] * input[1104]
        mul_input[0] = uint256(11606854536905568248937085022692131877098146351867697057082650587947777868464); // vk.K[1106].X
        mul_input[1] = uint256(5258909138608574214588934329130516679379934695279573419280678184946310146904); // vk.K[1106].Y
        mul_input[2] = input[1105];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1106] * input[1105]
        mul_input[0] = uint256(11622403404410438737449072638573276247237928838482521848417109534844326490891); // vk.K[1107].X
        mul_input[1] = uint256(7859885219364927055269023418591423325555474946157287859997229081143200825173); // vk.K[1107].Y
        mul_input[2] = input[1106];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1107] * input[1106]
        mul_input[0] = uint256(20941004746325680541498051558594660395518045194148453036660200388812999026317); // vk.K[1108].X
        mul_input[1] = uint256(6830156728670720229636975924074467973757006724594927445057041545985730885646); // vk.K[1108].Y
        mul_input[2] = input[1107];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1108] * input[1107]
        mul_input[0] = uint256(12469799483054936705812410402823610128769888023114481631807729342947623730141); // vk.K[1109].X
        mul_input[1] = uint256(8488503036761180563041614424233291202510915788693230374535110051712888136877); // vk.K[1109].Y
        mul_input[2] = input[1108];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1109] * input[1108]
        mul_input[0] = uint256(1085589490777633075006767857176344770073897534375625835093133631082736220786); // vk.K[1110].X
        mul_input[1] = uint256(9568963236093796584071580325165096913158048453601934230272065138309491096370); // vk.K[1110].Y
        mul_input[2] = input[1109];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1110] * input[1109]
        mul_input[0] = uint256(9068647837934194104752248990604884274477036908971810882777122951822993834662); // vk.K[1111].X
        mul_input[1] = uint256(4187318073170801645566281985108260674584137934265153273955762773147018422346); // vk.K[1111].Y
        mul_input[2] = input[1110];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1111] * input[1110]
        mul_input[0] = uint256(13499669704038686550545575169170803646376101403053520275517949024533049012074); // vk.K[1112].X
        mul_input[1] = uint256(16347261814041854389366610442556236653503323795233299286654615221745711696470); // vk.K[1112].Y
        mul_input[2] = input[1111];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1112] * input[1111]
        mul_input[0] = uint256(5195560656404552596217310332338122718382460105906250406119609690397885554156); // vk.K[1113].X
        mul_input[1] = uint256(16952306428223863193667890354676780366583598636769854833873528573848836206630); // vk.K[1113].Y
        mul_input[2] = input[1112];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1113] * input[1112]
        mul_input[0] = uint256(4924534230472130907115042675856856659037540227746262825760482465650757081930); // vk.K[1114].X
        mul_input[1] = uint256(8401336012661225857848683144516126789379614180794286143202452877279806267621); // vk.K[1114].Y
        mul_input[2] = input[1113];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1114] * input[1113]
        mul_input[0] = uint256(1639230402199028084405826842602783697327838528732966742318075108932145605565); // vk.K[1115].X
        mul_input[1] = uint256(21733943046863370168735635051298138794702201570314380055126711585559197153648); // vk.K[1115].Y
        mul_input[2] = input[1114];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1115] * input[1114]
        mul_input[0] = uint256(17231900888823400312592773772170381458611989073188436726064839141581032450749); // vk.K[1116].X
        mul_input[1] = uint256(17841163249250360892639229739159675356450141884273509610626840855674264202351); // vk.K[1116].Y
        mul_input[2] = input[1115];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1116] * input[1115]
        mul_input[0] = uint256(8031957625188334548747154184516777069954788670667279612081902761048489449199); // vk.K[1117].X
        mul_input[1] = uint256(4550686205523930214933947261712661717140852628995510211086436945006968693840); // vk.K[1117].Y
        mul_input[2] = input[1116];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1117] * input[1116]
        mul_input[0] = uint256(20900852437793806969587476412185751333516040951590765698363340042082194008792); // vk.K[1118].X
        mul_input[1] = uint256(10132424135046560881344244392816791380669132448165227980335128588241980278596); // vk.K[1118].Y
        mul_input[2] = input[1117];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1118] * input[1117]
        mul_input[0] = uint256(15427608903493873411585093047582510978341173925926594480823150695661102435091); // vk.K[1119].X
        mul_input[1] = uint256(8030735842024066796348719079152103536232544637221644815450191340993970534563); // vk.K[1119].Y
        mul_input[2] = input[1118];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1119] * input[1118]
        mul_input[0] = uint256(13368650411046080193725469072399445505292510405308841053105533631642906497272); // vk.K[1120].X
        mul_input[1] = uint256(18930084562977364761264427680739249794425887474907749712710444665553734393844); // vk.K[1120].Y
        mul_input[2] = input[1119];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1120] * input[1119]
        mul_input[0] = uint256(7984268721689511998965720902569813873329466875655601987748347171919963494734); // vk.K[1121].X
        mul_input[1] = uint256(3272200850255397002995213069091338682520323754983784733947543574679317026147); // vk.K[1121].Y
        mul_input[2] = input[1120];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1121] * input[1120]
        mul_input[0] = uint256(10574560887892685475930520303494528391211851443712115801334969362485789854921); // vk.K[1122].X
        mul_input[1] = uint256(563956254913031071038468770033914810886600741242344466401882129746010578915); // vk.K[1122].Y
        mul_input[2] = input[1121];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1122] * input[1121]
        mul_input[0] = uint256(19794167396468521798328778411738200113317737359009685487770494189970081594476); // vk.K[1123].X
        mul_input[1] = uint256(15381953266369086591302404346645498332415366164385493330873726021785735266051); // vk.K[1123].Y
        mul_input[2] = input[1122];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1123] * input[1122]
        mul_input[0] = uint256(15384288228581010333239799764321543367476647388583298737377520402512304468458); // vk.K[1124].X
        mul_input[1] = uint256(2845512915356303108222016616752048738101108124842901540629869386608802145051); // vk.K[1124].Y
        mul_input[2] = input[1123];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1124] * input[1123]
        mul_input[0] = uint256(19001650897091496674712778329287048839408432067826707081035668095143398361910); // vk.K[1125].X
        mul_input[1] = uint256(16175922167699746977905159649879911433800386564971234226309494833132400076082); // vk.K[1125].Y
        mul_input[2] = input[1124];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1125] * input[1124]
        mul_input[0] = uint256(11427152592753872746833291157470274341971112959247839061523122135597042387228); // vk.K[1126].X
        mul_input[1] = uint256(7529213723901498742707629311935681671984294267463545654518471417230024406548); // vk.K[1126].Y
        mul_input[2] = input[1125];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1126] * input[1125]
        mul_input[0] = uint256(6957429504474752452318823776706524410350569545139750058097261257894443627872); // vk.K[1127].X
        mul_input[1] = uint256(3079908088552206875163621184062394699960971403396891096136787616623893015016); // vk.K[1127].Y
        mul_input[2] = input[1126];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1127] * input[1126]
        mul_input[0] = uint256(1546897348625503823886197208693763535362199413174554432921299387934491366130); // vk.K[1128].X
        mul_input[1] = uint256(11742575336571577939443013952589156169951851819677372662360712477592183018481); // vk.K[1128].Y
        mul_input[2] = input[1127];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1128] * input[1127]
        mul_input[0] = uint256(5601195569640551068935063071489173141911505482868973678834348003676210190535); // vk.K[1129].X
        mul_input[1] = uint256(2970390385550637905407496740097374458296539848462249691065254555683979898925); // vk.K[1129].Y
        mul_input[2] = input[1128];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1129] * input[1128]
        mul_input[0] = uint256(795315521886996767550526195473361527161508058274836705607921577452222164537); // vk.K[1130].X
        mul_input[1] = uint256(1132578125216816787094208920851944147651443674350669199827079999105787206034); // vk.K[1130].Y
        mul_input[2] = input[1129];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1130] * input[1129]
        mul_input[0] = uint256(14697583849966212377673284993289439858727547271782725095708127780673356957713); // vk.K[1131].X
        mul_input[1] = uint256(13286966503836667012025303944685150512787161426083396587166586707071206067354); // vk.K[1131].Y
        mul_input[2] = input[1130];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1131] * input[1130]
        mul_input[0] = uint256(13567303869894546912279534289551143011072797511482030517604287220448818085202); // vk.K[1132].X
        mul_input[1] = uint256(498405901862540387271445503473778231427744628148738829016532834075522442468); // vk.K[1132].Y
        mul_input[2] = input[1131];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1132] * input[1131]
        mul_input[0] = uint256(18809698306774816963059425765639981822752895957046936266606927492757903572668); // vk.K[1133].X
        mul_input[1] = uint256(9107116052523978952802933120195321347211514575485697507146783717161884890535); // vk.K[1133].Y
        mul_input[2] = input[1132];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1133] * input[1132]
        mul_input[0] = uint256(19653676183898445637830756601778195491454964217831825528381553994806151655573); // vk.K[1134].X
        mul_input[1] = uint256(10008691230361681924918724777786642515561483622018274749698215279438076503331); // vk.K[1134].Y
        mul_input[2] = input[1133];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1134] * input[1133]
        mul_input[0] = uint256(6331147418672688150718411205585260286283162370654784739114678059920369076580); // vk.K[1135].X
        mul_input[1] = uint256(257413805380778704552529398874503986232469810641685006566891524308343718816); // vk.K[1135].Y
        mul_input[2] = input[1134];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1135] * input[1134]
        mul_input[0] = uint256(19244281918337434323325367865881698798297858526247158598918724593944839842797); // vk.K[1136].X
        mul_input[1] = uint256(20954284995339041385843596396997245322092187652515798337465384524224502643081); // vk.K[1136].Y
        mul_input[2] = input[1135];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1136] * input[1135]
        mul_input[0] = uint256(16549397678440859127528274848749061931825109769027434132904355196169409219325); // vk.K[1137].X
        mul_input[1] = uint256(11953050086673775914833029752787105966610524188138714952150937366108716077729); // vk.K[1137].Y
        mul_input[2] = input[1136];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1137] * input[1136]
        mul_input[0] = uint256(1235681327304094932888076881398038198302628924154035745850837136575765451445); // vk.K[1138].X
        mul_input[1] = uint256(5683110249023930503308025725722683382779965457756173320360172051294322355470); // vk.K[1138].Y
        mul_input[2] = input[1137];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1138] * input[1137]
        mul_input[0] = uint256(8882628268196357022338345360805705123311847558326332756726059425576558049375); // vk.K[1139].X
        mul_input[1] = uint256(17973960400924089713722449429338853520593406292413597229869462712300386077765); // vk.K[1139].Y
        mul_input[2] = input[1138];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1139] * input[1138]
        mul_input[0] = uint256(12756054704443432507363488759865907095814503240649312542929811486507501750710); // vk.K[1140].X
        mul_input[1] = uint256(21126073806171456091335763366570835726059724771704397813564962064010203879304); // vk.K[1140].Y
        mul_input[2] = input[1139];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1140] * input[1139]
        mul_input[0] = uint256(10554478921674392792031590226167029894318513876045101193510078934057596109742); // vk.K[1141].X
        mul_input[1] = uint256(14048634635403405289003425492652483746379836757612897969883795741422296297059); // vk.K[1141].Y
        mul_input[2] = input[1140];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1141] * input[1140]
        mul_input[0] = uint256(11936413897295669688424309585489218212816209090423917772188939083295163025429); // vk.K[1142].X
        mul_input[1] = uint256(15431256031267993557391374448165103375074262878747085815757969241336349722697); // vk.K[1142].Y
        mul_input[2] = input[1141];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1142] * input[1141]
        mul_input[0] = uint256(9935956240824113907830179803775704855621411798901653232568258850180662429402); // vk.K[1143].X
        mul_input[1] = uint256(288613791411488629251971193546849938343967276462905768830421844630897751934); // vk.K[1143].Y
        mul_input[2] = input[1142];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1143] * input[1142]
        mul_input[0] = uint256(7816869120991136011872307489367874576497274262850741441805808259347145220532); // vk.K[1144].X
        mul_input[1] = uint256(924035211206913493934350930989593504299592979422561661086669583972755008800); // vk.K[1144].Y
        mul_input[2] = input[1143];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1144] * input[1143]
        mul_input[0] = uint256(11129626662365207901073895834597796032743145931291398747811393826655850627415); // vk.K[1145].X
        mul_input[1] = uint256(461895437761879294935081526646577530214851485928518717038427290670197886969); // vk.K[1145].Y
        mul_input[2] = input[1144];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1145] * input[1144]
        mul_input[0] = uint256(17451133171056957699614454134621151646331475005411311425561877326675262267722); // vk.K[1146].X
        mul_input[1] = uint256(14195592356116804356177056382666668541313140307799749496153171579104862609410); // vk.K[1146].Y
        mul_input[2] = input[1145];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1146] * input[1145]
        mul_input[0] = uint256(1668488028429616613140387966976676713823787350241764229651206743767755651417); // vk.K[1147].X
        mul_input[1] = uint256(13815395901645824248017668603211020880495289116952723831824958937223293660724); // vk.K[1147].Y
        mul_input[2] = input[1146];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1147] * input[1146]
        mul_input[0] = uint256(7296070453839314001313762719601048147890114310266776054241624187653430032652); // vk.K[1148].X
        mul_input[1] = uint256(13751790692256360822094720239237331322283033676301528555325220986986465615648); // vk.K[1148].Y
        mul_input[2] = input[1147];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1148] * input[1147]
        mul_input[0] = uint256(5296539478808642215499395540132566219529157650473561565657499613792460313754); // vk.K[1149].X
        mul_input[1] = uint256(16861650054427892895974839857121716574526067266895211434495335565750500272366); // vk.K[1149].Y
        mul_input[2] = input[1148];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1149] * input[1148]
        mul_input[0] = uint256(4153925646126126945296368661426852610661192514071226983682386437527470639434); // vk.K[1150].X
        mul_input[1] = uint256(16882073428736412897701599417449868953029155391518527840926924277817011111493); // vk.K[1150].Y
        mul_input[2] = input[1149];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1150] * input[1149]
        mul_input[0] = uint256(1507261762484228300182119431447190496740362146873115509383283550251129696472); // vk.K[1151].X
        mul_input[1] = uint256(19665208284631374908377842038703327508654884575227801008322978841615238674493); // vk.K[1151].Y
        mul_input[2] = input[1150];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1151] * input[1150]
        mul_input[0] = uint256(15020918834701714104290624244793374420276366409766381518283020850229913295360); // vk.K[1152].X
        mul_input[1] = uint256(14496830513590560537840408582271041622647513794606710246416513018651144423824); // vk.K[1152].Y
        mul_input[2] = input[1151];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1152] * input[1151]
        mul_input[0] = uint256(16154853392737261133088988726290135466913439228224500828163213965347745747849); // vk.K[1153].X
        mul_input[1] = uint256(16242936613219926797125974293214017641443676107995339389479383924869715061613); // vk.K[1153].Y
        mul_input[2] = input[1152];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1153] * input[1152]
        mul_input[0] = uint256(1214259175554752892080287676239064722462638820787269755064812354179598755349); // vk.K[1154].X
        mul_input[1] = uint256(11269876576408119596836965587066180545320710303896506132126663756636063310860); // vk.K[1154].Y
        mul_input[2] = input[1153];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1154] * input[1153]
        mul_input[0] = uint256(6815529321077451188477302485168271334143298572885181149708175056357658155980); // vk.K[1155].X
        mul_input[1] = uint256(10651093674561874182657966187605532830783925828865261740406131448302619536442); // vk.K[1155].Y
        mul_input[2] = input[1154];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1155] * input[1154]
        mul_input[0] = uint256(12409232855746850799987905279330134014239308414075870475258662444663364587944); // vk.K[1156].X
        mul_input[1] = uint256(13298865047183517921871317684032716323518746229734467064509726394998998351050); // vk.K[1156].Y
        mul_input[2] = input[1155];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1156] * input[1155]
        mul_input[0] = uint256(15353112402586929821862062380517884295600724929024601777430322628817905847898); // vk.K[1157].X
        mul_input[1] = uint256(8921591993992465392313396197380649802392579757957544822983801848310525049232); // vk.K[1157].Y
        mul_input[2] = input[1156];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1157] * input[1156]
        mul_input[0] = uint256(20576626371076952465697542202444816108064295088340884951746982550133435290478); // vk.K[1158].X
        mul_input[1] = uint256(15193215968344602568362008077670316521841038869002854018871087757053250817967); // vk.K[1158].Y
        mul_input[2] = input[1157];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1158] * input[1157]
        mul_input[0] = uint256(10711654164015151539352734122357831108343645820977094714279057595787647956788); // vk.K[1159].X
        mul_input[1] = uint256(21803134263418046989576691829081529957398227711296037632865845534420991704270); // vk.K[1159].Y
        mul_input[2] = input[1158];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1159] * input[1158]
        mul_input[0] = uint256(18009973007495105573379717941186068897508910378205321618344518665585765989859); // vk.K[1160].X
        mul_input[1] = uint256(9914343649849375739909896453402447061414743129517482506206564338868400456670); // vk.K[1160].Y
        mul_input[2] = input[1159];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1160] * input[1159]
        mul_input[0] = uint256(1867318948500628965353245237546060897949535463590760622332551237475830940666); // vk.K[1161].X
        mul_input[1] = uint256(3533972891639600227934656470458109235968087613238357000167925479169591329146); // vk.K[1161].Y
        mul_input[2] = input[1160];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1161] * input[1160]
        mul_input[0] = uint256(11863169832120882998155880602191934076782014274978595139049988694460455675288); // vk.K[1162].X
        mul_input[1] = uint256(6255027816875873505503111171786009053158682504284957724853468384661405642194); // vk.K[1162].Y
        mul_input[2] = input[1161];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1162] * input[1161]
        mul_input[0] = uint256(2154358616432304358386098409149165578514916079669164050269187399526719221849); // vk.K[1163].X
        mul_input[1] = uint256(21617440169147503764174615861272460769318438528069528537165003694084495447524); // vk.K[1163].Y
        mul_input[2] = input[1162];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1163] * input[1162]
        mul_input[0] = uint256(11762312011530737116826430386827910665556031670840313663881476717396163707998); // vk.K[1164].X
        mul_input[1] = uint256(20909689308802871529277526599501558671316482473140052356289702995737247596923); // vk.K[1164].Y
        mul_input[2] = input[1163];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1164] * input[1163]
        mul_input[0] = uint256(14342727008779814169589463958561846653633115304239561506576744942065699560883); // vk.K[1165].X
        mul_input[1] = uint256(12725084268437338572130570252032923662646371766430749380491159686226998045119); // vk.K[1165].Y
        mul_input[2] = input[1164];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1165] * input[1164]
        mul_input[0] = uint256(2856149158820406622102447462595771031282499136830532202221555510230342463730); // vk.K[1166].X
        mul_input[1] = uint256(5724975975552573482471947614150976665954129927749906859549785477586393204507); // vk.K[1166].Y
        mul_input[2] = input[1165];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1166] * input[1165]
        mul_input[0] = uint256(7239393027994745127025204082486841130221059627212852604314667627645829588914); // vk.K[1167].X
        mul_input[1] = uint256(11201167169489634193088709406977433666950750780316764750558513730317554064066); // vk.K[1167].Y
        mul_input[2] = input[1166];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1167] * input[1166]
        mul_input[0] = uint256(4887756049282140177851438991270052770441890627329728238198668998084797363041); // vk.K[1168].X
        mul_input[1] = uint256(633012483310421303569334919084536764656379450873202817579856335809852423833); // vk.K[1168].Y
        mul_input[2] = input[1167];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1168] * input[1167]
        mul_input[0] = uint256(19683667161576955961901096415417810818200678893509304500105752497596188158352); // vk.K[1169].X
        mul_input[1] = uint256(3829666816964196206971797579026762014669126921739563796407198358726572087668); // vk.K[1169].Y
        mul_input[2] = input[1168];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1169] * input[1168]
        mul_input[0] = uint256(19339239592827706123029176529007420356774663572661638517487543392298740255717); // vk.K[1170].X
        mul_input[1] = uint256(12340951868531992344422781933633754229672493925889446971183887719316313047864); // vk.K[1170].Y
        mul_input[2] = input[1169];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1170] * input[1169]
        mul_input[0] = uint256(15211129742479251852025370235669429724131005918385795763631131771074972592052); // vk.K[1171].X
        mul_input[1] = uint256(11624809993084357235466318906571669388380703303342957206399314313980245705777); // vk.K[1171].Y
        mul_input[2] = input[1170];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1171] * input[1170]
        mul_input[0] = uint256(16864260442347457892609198544063491389879118158216680791543461824674067475312); // vk.K[1172].X
        mul_input[1] = uint256(13995574432912430972722593382039945482406371936345171971754131694068546554914); // vk.K[1172].Y
        mul_input[2] = input[1171];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1172] * input[1171]
        mul_input[0] = uint256(21713156629299193015206405502999280904972902702680597175073734397216478931311); // vk.K[1173].X
        mul_input[1] = uint256(10679118874243262830649905047790861899771665145184919481518367525096215646635); // vk.K[1173].Y
        mul_input[2] = input[1172];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1173] * input[1172]
        mul_input[0] = uint256(2066685934899384162960520846167385844922247415006571486703571416787956642330); // vk.K[1174].X
        mul_input[1] = uint256(2641648971227718619676749143709981906035993467878724603650826012984701955496); // vk.K[1174].Y
        mul_input[2] = input[1173];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1174] * input[1173]
        mul_input[0] = uint256(6719438714715434194620067336308308779423433014511406963644790552118891036001); // vk.K[1175].X
        mul_input[1] = uint256(4732995470400133050232571137224010522166208860738367586522180685141293309756); // vk.K[1175].Y
        mul_input[2] = input[1174];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1175] * input[1174]
        mul_input[0] = uint256(3499434667898729673408223070710303338801839024606536082876919734874710090308); // vk.K[1176].X
        mul_input[1] = uint256(19210330091930107835502303195519108722997385766020325732113705666738859558855); // vk.K[1176].Y
        mul_input[2] = input[1175];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1176] * input[1175]
        mul_input[0] = uint256(7497030281818138014281412392520480136419541361203248206095801696180387830524); // vk.K[1177].X
        mul_input[1] = uint256(3096371952201903987585405586818185961588939835336105518297412880341168932358); // vk.K[1177].Y
        mul_input[2] = input[1176];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1177] * input[1176]
        mul_input[0] = uint256(14200382051140969103662366527367648020989630794197962529190068639522035784184); // vk.K[1178].X
        mul_input[1] = uint256(12905548548923576257211288117132296256743777868360099525554560505385637864946); // vk.K[1178].Y
        mul_input[2] = input[1177];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1178] * input[1177]
        mul_input[0] = uint256(1265408232018808762477179395542161974969871010852681269962976337643266005422); // vk.K[1179].X
        mul_input[1] = uint256(18109472640522048594575598462606191663298186985168784248939986275972762565296); // vk.K[1179].Y
        mul_input[2] = input[1178];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1179] * input[1178]
        mul_input[0] = uint256(13764300935579640572276879007880513759629184319107406807261873832606536473016); // vk.K[1180].X
        mul_input[1] = uint256(11262737157690435863246974494316240475839105337552097607649028377292438650948); // vk.K[1180].Y
        mul_input[2] = input[1179];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1180] * input[1179]
        mul_input[0] = uint256(241988138697912391675208581284715370986062274019443510003013680345935338884); // vk.K[1181].X
        mul_input[1] = uint256(21790964380454667263731694761504719404419655217467845838945276006975969401849); // vk.K[1181].Y
        mul_input[2] = input[1180];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1181] * input[1180]
        mul_input[0] = uint256(15961741101615087800414235885876781904213985517992480848329789209934598850352); // vk.K[1182].X
        mul_input[1] = uint256(6508870273839072665745909480056413384653086560405467859078197345748088062390); // vk.K[1182].Y
        mul_input[2] = input[1181];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1182] * input[1181]
        mul_input[0] = uint256(16085220101664838062375082002949639007756416859480920401812420216628560939164); // vk.K[1183].X
        mul_input[1] = uint256(19100138297057228333805365078246990718853179710214468581282939120053022397261); // vk.K[1183].Y
        mul_input[2] = input[1182];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1183] * input[1182]
        mul_input[0] = uint256(9317197307471247491027859624432046450316518401564058454047185674202394221687); // vk.K[1184].X
        mul_input[1] = uint256(15260321113727680180080890473861588861533368370248297664720223832453206526009); // vk.K[1184].Y
        mul_input[2] = input[1183];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1184] * input[1183]
        mul_input[0] = uint256(21598133096362396999648008276887197658966890566470697486786024992461433027341); // vk.K[1185].X
        mul_input[1] = uint256(8449024161199059722322194412778761726883984535389363828593254692991400703844); // vk.K[1185].Y
        mul_input[2] = input[1184];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1185] * input[1184]
        mul_input[0] = uint256(4750110190549682765788142146972935502885935583476643062943604848755159744488); // vk.K[1186].X
        mul_input[1] = uint256(9844713833770647023090266559624579092394032973852611237334456812636094066864); // vk.K[1186].Y
        mul_input[2] = input[1185];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1186] * input[1185]
        mul_input[0] = uint256(21742959554877681353215819188016240718512808596944996921418175041605124423947); // vk.K[1187].X
        mul_input[1] = uint256(19166386135576925481480082890093275166606627470211813824020824587516680433695); // vk.K[1187].Y
        mul_input[2] = input[1186];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1187] * input[1186]
        mul_input[0] = uint256(13926924002964012413499507218235538805857297083215607564448969297588955931916); // vk.K[1188].X
        mul_input[1] = uint256(10554081875634927163531264107775362198384576610608954221062496329416727048659); // vk.K[1188].Y
        mul_input[2] = input[1187];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1188] * input[1187]
        mul_input[0] = uint256(20364991684081952925833119252681433514606485114653877035483635183353151474039); // vk.K[1189].X
        mul_input[1] = uint256(14006760493332332386987910094707518772359887336333684195649930997005824778057); // vk.K[1189].Y
        mul_input[2] = input[1188];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1189] * input[1188]
        mul_input[0] = uint256(16029022456333189859842625040416626641012933434069148969378729965958166627806); // vk.K[1190].X
        mul_input[1] = uint256(16423009874841891446518935392550338411827530231736880640307427703920883011288); // vk.K[1190].Y
        mul_input[2] = input[1189];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1190] * input[1189]
        mul_input[0] = uint256(18694637705629921470378851760880587072852763580845993775643224803705746742340); // vk.K[1191].X
        mul_input[1] = uint256(19971588387228013430088904975293788100421247849082616773503817675927669629451); // vk.K[1191].Y
        mul_input[2] = input[1190];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1191] * input[1190]
        mul_input[0] = uint256(21639885979346477631765067668667609592587047874807256402573943466765009094916); // vk.K[1192].X
        mul_input[1] = uint256(18815343561298092020666384677555179674219176906537289344464405815629744460093); // vk.K[1192].Y
        mul_input[2] = input[1191];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1192] * input[1191]
        mul_input[0] = uint256(7448353043341970614050172049673290567048302831200670975035007225628939509466); // vk.K[1193].X
        mul_input[1] = uint256(8822054981523396176061367226672475939614081169707252368789003035641981650630); // vk.K[1193].Y
        mul_input[2] = input[1192];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1193] * input[1192]
        mul_input[0] = uint256(18464106668338997891408097893075127912768868048254166721013116345547698294339); // vk.K[1194].X
        mul_input[1] = uint256(10777207227074964070674767227495216241419628439099615559214521931140681399927); // vk.K[1194].Y
        mul_input[2] = input[1193];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1194] * input[1193]
        mul_input[0] = uint256(14455513943613650346798105190104595596628574151554072549825313953631395868762); // vk.K[1195].X
        mul_input[1] = uint256(9265555219977331873744849072716604547377489787884451696330728675998402379601); // vk.K[1195].Y
        mul_input[2] = input[1194];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1195] * input[1194]
        mul_input[0] = uint256(947965480129466860203506902425090861297252174430626500261360451747353645588); // vk.K[1196].X
        mul_input[1] = uint256(18595138118603614437086957032185207850293836989703386977821037920050417396036); // vk.K[1196].Y
        mul_input[2] = input[1195];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1196] * input[1195]
        mul_input[0] = uint256(12746824283081761314801125429952867608611501445536481946473962865219653039375); // vk.K[1197].X
        mul_input[1] = uint256(21063030744644230615264411614914133117505496889986150570123028398885310350027); // vk.K[1197].Y
        mul_input[2] = input[1196];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1197] * input[1196]
        mul_input[0] = uint256(20614155228607758341560623939285694089939512402459921660459080661591684488195); // vk.K[1198].X
        mul_input[1] = uint256(12407629063148514158327280814605582642551023353138983451504201900921221705625); // vk.K[1198].Y
        mul_input[2] = input[1197];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1198] * input[1197]
        mul_input[0] = uint256(8400790539219928617869399989093801545778121049830416797473170228801365082572); // vk.K[1199].X
        mul_input[1] = uint256(5386102978923551808079451619114053569310237116566956356749504067126045982183); // vk.K[1199].Y
        mul_input[2] = input[1198];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1199] * input[1198]
        mul_input[0] = uint256(6047576522644733676487380299377406212762800807971919721665119571693432487156); // vk.K[1200].X
        mul_input[1] = uint256(1745865450861909173798771573450404883322601689338989934525107540258667604305); // vk.K[1200].Y
        mul_input[2] = input[1199];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1200] * input[1199]
        mul_input[0] = uint256(17474958204553613196429870085550290015619328228811587123498615632050180225318); // vk.K[1201].X
        mul_input[1] = uint256(18100970188657439781828816111136108081851918767184606713727664959528361424835); // vk.K[1201].Y
        mul_input[2] = input[1200];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1201] * input[1200]
        mul_input[0] = uint256(18887224744481161780035614676008239186394158289863482703622725149548103334650); // vk.K[1202].X
        mul_input[1] = uint256(17366864027904222393013706195704005431107164547764273468924799815634538417812); // vk.K[1202].Y
        mul_input[2] = input[1201];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1202] * input[1201]
        mul_input[0] = uint256(5854000681311523980546541816712144209554573197784669841765980316049793026342); // vk.K[1203].X
        mul_input[1] = uint256(18451859734546681358915575030678625238377311410045013209579058028689602729449); // vk.K[1203].Y
        mul_input[2] = input[1202];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1203] * input[1202]
        mul_input[0] = uint256(3332501872533166547565025771868524651357777396319904657753854053870097247324); // vk.K[1204].X
        mul_input[1] = uint256(3328240347248605040087250938724520158912988247985289775147874818732854981006); // vk.K[1204].Y
        mul_input[2] = input[1203];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1204] * input[1203]
        mul_input[0] = uint256(1228210008646587589416121929981679011549221566658275892973330330394258009443); // vk.K[1205].X
        mul_input[1] = uint256(16114933065781188410779379066742030845808540628271127940820477676138192386279); // vk.K[1205].Y
        mul_input[2] = input[1204];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1205] * input[1204]
        mul_input[0] = uint256(19035259902351390182050576498986123804260748148065557679657802971209639246961); // vk.K[1206].X
        mul_input[1] = uint256(7666917232718048877900678291769106766702424693094557352985294529522753955402); // vk.K[1206].Y
        mul_input[2] = input[1205];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1206] * input[1205]
        mul_input[0] = uint256(4257679871614901668068018642652392812445407731714674893855105528574398316099); // vk.K[1207].X
        mul_input[1] = uint256(16023305974355067468736085624713691359292109539192844802582324288688238763286); // vk.K[1207].Y
        mul_input[2] = input[1206];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1207] * input[1206]
        mul_input[0] = uint256(15209201145095985012004929090849998896887815619084803129522406410204969433713); // vk.K[1208].X
        mul_input[1] = uint256(14162630029162463733360489041487944796600284144460898965459942738575649403670); // vk.K[1208].Y
        mul_input[2] = input[1207];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1208] * input[1207]
        mul_input[0] = uint256(4358129768276358109085266487436563519268843563591220916241139509537683107435); // vk.K[1209].X
        mul_input[1] = uint256(4262060175394297412204558303799561702433386015304086458626129739202517288225); // vk.K[1209].Y
        mul_input[2] = input[1208];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1209] * input[1208]
        mul_input[0] = uint256(15036945153403447072324528072421722685844268723029549951708008159111385424589); // vk.K[1210].X
        mul_input[1] = uint256(3129494404563631975248041325264086292949357002477992004372182575949892579277); // vk.K[1210].Y
        mul_input[2] = input[1209];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1210] * input[1209]
        mul_input[0] = uint256(15172555265542243540423552700730699027660316311461425802568722415031308228918); // vk.K[1211].X
        mul_input[1] = uint256(4676509295965134389242235755185946852291168462124429032621799246748691811787); // vk.K[1211].Y
        mul_input[2] = input[1210];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1211] * input[1210]
        mul_input[0] = uint256(4634752740548090536416147309041916873858617916965246616940774738441678022129); // vk.K[1212].X
        mul_input[1] = uint256(12186150777920907095273952238419123163531012834655566471221458067349504618917); // vk.K[1212].Y
        mul_input[2] = input[1211];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1212] * input[1211]
        mul_input[0] = uint256(2377328262340769149408327222861882131992856161946617678438057043418857428092); // vk.K[1213].X
        mul_input[1] = uint256(676025925041083212797383015302403839993577540996854324923625760978286605926); // vk.K[1213].Y
        mul_input[2] = input[1212];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1213] * input[1212]
        mul_input[0] = uint256(13535835721603863811045311187622390501013734672193649004821204575672089911345); // vk.K[1214].X
        mul_input[1] = uint256(7563389649247082546171524891837949903862825769049375837854752836574672659725); // vk.K[1214].Y
        mul_input[2] = input[1213];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1214] * input[1213]
        mul_input[0] = uint256(19650626560053156045859514695447617230771593283954817208797457585383195626836); // vk.K[1215].X
        mul_input[1] = uint256(117307345954069508086280123956378182929722852534143658343518138362212358628); // vk.K[1215].Y
        mul_input[2] = input[1214];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1215] * input[1214]
        mul_input[0] = uint256(11512229101552884103314093689695904609497758879220781005890020274631701309393); // vk.K[1216].X
        mul_input[1] = uint256(13285172059449380756915653560772863194708859459731816748556304947847927313090); // vk.K[1216].Y
        mul_input[2] = input[1215];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1216] * input[1215]
        mul_input[0] = uint256(18483884667561174034385538343545830432038976626733605663649574664138253244234); // vk.K[1217].X
        mul_input[1] = uint256(11870690932727771080168689588428220778641608901653535258114046400666671872338); // vk.K[1217].Y
        mul_input[2] = input[1216];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1217] * input[1216]
        mul_input[0] = uint256(7417029401449062627138824918006937515617245860476380088907535300225526924379); // vk.K[1218].X
        mul_input[1] = uint256(10878062881401260936659074810917352466558468791186909816532333366596105841423); // vk.K[1218].Y
        mul_input[2] = input[1217];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1218] * input[1217]
        mul_input[0] = uint256(16850160579771217649864410936091507895852726073349749273860349355328769980480); // vk.K[1219].X
        mul_input[1] = uint256(8759815233886637754004796420681154637011071209033663804802223672521419617518); // vk.K[1219].Y
        mul_input[2] = input[1218];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1219] * input[1218]
        mul_input[0] = uint256(7096024575853966262806789729030431124855108737709779124044006375492390429021); // vk.K[1220].X
        mul_input[1] = uint256(15280258991648373931846565704832865258107951227030450256874120249632914429768); // vk.K[1220].Y
        mul_input[2] = input[1219];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1220] * input[1219]
        mul_input[0] = uint256(6835800059326322176246014948926713492897155595252356460641425376257526927684); // vk.K[1221].X
        mul_input[1] = uint256(18840707925591443347907301837429771507192744371989491398842241464398756425683); // vk.K[1221].Y
        mul_input[2] = input[1220];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1221] * input[1220]
        mul_input[0] = uint256(902167038010815302641430781763831881189212650217561622510414103141377836757); // vk.K[1222].X
        mul_input[1] = uint256(833604774185728352525329120513196919299335581376840760970288260836142118146); // vk.K[1222].Y
        mul_input[2] = input[1221];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1222] * input[1221]
        mul_input[0] = uint256(9185240346493321774776888918826686134083388439924415674851893376673854764751); // vk.K[1223].X
        mul_input[1] = uint256(10417359575439652189801627722549099104358970109817125950875857579319175836023); // vk.K[1223].Y
        mul_input[2] = input[1222];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1223] * input[1222]
        mul_input[0] = uint256(6998674988879480347132035824344940292125914168218590242195451019900150976247); // vk.K[1224].X
        mul_input[1] = uint256(4303422973756738218658293601545113840884692393141230016140119659216311561669); // vk.K[1224].Y
        mul_input[2] = input[1223];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1224] * input[1223]
        mul_input[0] = uint256(2637086997124789326016102343205164051486591648296778434687065910382587303376); // vk.K[1225].X
        mul_input[1] = uint256(21779881340615267696588470307336523729943140203295904542422850839741777289256); // vk.K[1225].Y
        mul_input[2] = input[1224];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1225] * input[1224]
        mul_input[0] = uint256(20175883690009415283393663662312900235725126973331749487937518779260705942462); // vk.K[1226].X
        mul_input[1] = uint256(14495086323952972192897921803741962462361901508882747182620201647208057525889); // vk.K[1226].Y
        mul_input[2] = input[1225];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1226] * input[1225]
        mul_input[0] = uint256(12233125825598020920905469359204918677753931059646983182760077257351095731794); // vk.K[1227].X
        mul_input[1] = uint256(7372915910893617705844180912904103537617122287746171594651905922314836984300); // vk.K[1227].Y
        mul_input[2] = input[1226];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1227] * input[1226]
        mul_input[0] = uint256(7768847565974193561648989280540471149940934415681369840904819932606831549428); // vk.K[1228].X
        mul_input[1] = uint256(21136380817777538947905225413894284377032580358665360510832281587259063047083); // vk.K[1228].Y
        mul_input[2] = input[1227];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1228] * input[1227]
        mul_input[0] = uint256(3196562353974861622481245482025295316313092753153453321101186864090121917450); // vk.K[1229].X
        mul_input[1] = uint256(6687119509960496394843344000810623664566926526014035084910071400462725235431); // vk.K[1229].Y
        mul_input[2] = input[1228];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1229] * input[1228]
        mul_input[0] = uint256(4680763538940424890779001984914930514756298520761895272177763161110036319840); // vk.K[1230].X
        mul_input[1] = uint256(7766541664498438303565204185361328939850057861126661958857120185605419389212); // vk.K[1230].Y
        mul_input[2] = input[1229];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1230] * input[1229]
        mul_input[0] = uint256(21329115891306104009689526907893491283810867652430505041352266548651164071492); // vk.K[1231].X
        mul_input[1] = uint256(5173742711225554323790933073189769214412223998951151050515699202096460409035); // vk.K[1231].Y
        mul_input[2] = input[1230];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1231] * input[1230]
        mul_input[0] = uint256(2135663928218820519796652381798059621702288043980818030157348507037755743234); // vk.K[1232].X
        mul_input[1] = uint256(4892878023915200914468607079108954633891897535910760057671399320943528959655); // vk.K[1232].Y
        mul_input[2] = input[1231];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1232] * input[1231]
        mul_input[0] = uint256(2195035347640356665633947852474993573975995775664273428252378445818221473756); // vk.K[1233].X
        mul_input[1] = uint256(11601642418301433072831355587284259405712151010797000085272343843253097671742); // vk.K[1233].Y
        mul_input[2] = input[1232];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1233] * input[1232]
        mul_input[0] = uint256(20475022888531007204182733222279490827067795367254368516496601583970166914045); // vk.K[1234].X
        mul_input[1] = uint256(21004434105464539447664644658485471165547814084859627641831232389837299232226); // vk.K[1234].Y
        mul_input[2] = input[1233];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1234] * input[1233]
        mul_input[0] = uint256(5475144756872713065876720810642459021058485296215420020217240216899754798686); // vk.K[1235].X
        mul_input[1] = uint256(7572137428414408097339435656005212102431668433905498965926176945080000552592); // vk.K[1235].Y
        mul_input[2] = input[1234];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1235] * input[1234]
        mul_input[0] = uint256(16475872923174924660978598538687194919039198947116324949595434278095865104698); // vk.K[1236].X
        mul_input[1] = uint256(9584205033533892240401002393488878533513679150063050447106519075144359890832); // vk.K[1236].Y
        mul_input[2] = input[1235];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1236] * input[1235]
        mul_input[0] = uint256(10485702097263825840448016803267728658410300290156080214097105941611024767304); // vk.K[1237].X
        mul_input[1] = uint256(4720115496108519217526381400803092712042153694543429389281464017655489753828); // vk.K[1237].Y
        mul_input[2] = input[1236];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1237] * input[1236]
        mul_input[0] = uint256(10991000550890600256207236171071702603812178239850385238371103547492099713409); // vk.K[1238].X
        mul_input[1] = uint256(20684855406919254179286795869317195789689812099623683451288279114535215405603); // vk.K[1238].Y
        mul_input[2] = input[1237];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1238] * input[1237]
        mul_input[0] = uint256(1906770416252948123302586235209255127805120151081367638726451793789862327650); // vk.K[1239].X
        mul_input[1] = uint256(12274141078901411109297748933520221800378541208261637126786755547337301055394); // vk.K[1239].Y
        mul_input[2] = input[1238];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1239] * input[1238]
        mul_input[0] = uint256(9427410860408831586914925553090639403242736229825281884229786001893501096375); // vk.K[1240].X
        mul_input[1] = uint256(6939562361776831283669835499520335042692352780613019683574595611219926569602); // vk.K[1240].Y
        mul_input[2] = input[1239];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1240] * input[1239]
        mul_input[0] = uint256(17578162148814456988739182427126036628538419785257964623669559907651448881811); // vk.K[1241].X
        mul_input[1] = uint256(13200818866868218850409740613131593367703545970040256564978921905023415612756); // vk.K[1241].Y
        mul_input[2] = input[1240];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1241] * input[1240]
        mul_input[0] = uint256(3018041257632664167580982628722887558540703932485267461392000473621446946065); // vk.K[1242].X
        mul_input[1] = uint256(573464909171775966338907428782404833925953110054184146600330562678263413978); // vk.K[1242].Y
        mul_input[2] = input[1241];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1242] * input[1241]
        mul_input[0] = uint256(4916733880588356729408247216045494852701393834474172227554984555959128038207); // vk.K[1243].X
        mul_input[1] = uint256(6305031593031615769886195827646544410515250909376453632699443470545417845779); // vk.K[1243].Y
        mul_input[2] = input[1242];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1243] * input[1242]
        mul_input[0] = uint256(17687025536102663197418571309845739218707954431940764012857220189296100707280); // vk.K[1244].X
        mul_input[1] = uint256(18313172802106773938835826023566102376085854771268873198430312837874697392129); // vk.K[1244].Y
        mul_input[2] = input[1243];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1244] * input[1243]
        mul_input[0] = uint256(21238913683323603343802567891306843811414236342424539815240790907905741421268); // vk.K[1245].X
        mul_input[1] = uint256(20115380850716721575894791939681466114045816999461152385297706466486056608473); // vk.K[1245].Y
        mul_input[2] = input[1244];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1245] * input[1244]
        mul_input[0] = uint256(18656795398944635773502245290707873374849423321780748896993439955805068306910); // vk.K[1246].X
        mul_input[1] = uint256(18774815063560600008097832548095299817612448703147738228698211890947724033015); // vk.K[1246].Y
        mul_input[2] = input[1245];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1246] * input[1245]
        mul_input[0] = uint256(1283047997128993795823367646448391996876918265542463721242431539151855517931); // vk.K[1247].X
        mul_input[1] = uint256(12920559478467369796822073620923702844666130639519067151018954772313827304910); // vk.K[1247].Y
        mul_input[2] = input[1246];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1247] * input[1246]
        mul_input[0] = uint256(16717092467853516739126727216663520985366847341976574497371202151668461065819); // vk.K[1248].X
        mul_input[1] = uint256(14776944092848916678828605666412553766873123101916966657189699254323916589391); // vk.K[1248].Y
        mul_input[2] = input[1247];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1248] * input[1247]
        mul_input[0] = uint256(15006576362246855261338075561177695843349657720126210771773826568708859715387); // vk.K[1249].X
        mul_input[1] = uint256(15618726005182014323534661813245432415307306596503407287084022302056823297559); // vk.K[1249].Y
        mul_input[2] = input[1248];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1249] * input[1248]
        mul_input[0] = uint256(9242089011620237375558802647895215921286567816365283475300953800461652847354); // vk.K[1250].X
        mul_input[1] = uint256(7555700617078533596843738937815469238423557201157584119959694001674245542255); // vk.K[1250].Y
        mul_input[2] = input[1249];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1250] * input[1249]
        mul_input[0] = uint256(6423695986065275715372710230057751123122355030107033896669581887305236198306); // vk.K[1251].X
        mul_input[1] = uint256(15284619567376263247681849032105838228368289379613588363927545044366237324690); // vk.K[1251].Y
        mul_input[2] = input[1250];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1251] * input[1250]
        mul_input[0] = uint256(8429609907647502509801223562647827022348481153567585573561920763613595581773); // vk.K[1252].X
        mul_input[1] = uint256(18371724134086460766104825072423687901831279514839315937085535001760032881496); // vk.K[1252].Y
        mul_input[2] = input[1251];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1252] * input[1251]
        mul_input[0] = uint256(19192962384795629810787638825340440986098978231082478849109066229892642553920); // vk.K[1253].X
        mul_input[1] = uint256(15730355582399875673872576533293562812877226529425069853905420725766246590435); // vk.K[1253].Y
        mul_input[2] = input[1252];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1253] * input[1252]
        mul_input[0] = uint256(8219667397014229930623282752373678634419041522275423881296720785704748750510); // vk.K[1254].X
        mul_input[1] = uint256(11782033095097707767323290395121781833973485873696868829812626974758672392745); // vk.K[1254].Y
        mul_input[2] = input[1253];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1254] * input[1253]
        mul_input[0] = uint256(3939906231172230766248395805180044440433085681881945023711179273488838068521); // vk.K[1255].X
        mul_input[1] = uint256(780979368419668645585149822434424086910388042038320048463936895052149679344); // vk.K[1255].Y
        mul_input[2] = input[1254];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1255] * input[1254]
        mul_input[0] = uint256(6828764285819191056494790289864122584201110439547500278830762579854632650431); // vk.K[1256].X
        mul_input[1] = uint256(7687581130791718987095445171826328531576489854373422865432771401643879446631); // vk.K[1256].Y
        mul_input[2] = input[1255];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1256] * input[1255]
        mul_input[0] = uint256(8666097685984771612698698486055997939484559907542730055444537634975541840122); // vk.K[1257].X
        mul_input[1] = uint256(463546781012675987610113087240871804969586890389329897281093666273597470550); // vk.K[1257].Y
        mul_input[2] = input[1256];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1257] * input[1256]
        mul_input[0] = uint256(18752452269442953656313797512724493537968860459314840375722287455434399256519); // vk.K[1258].X
        mul_input[1] = uint256(7085972079450038168289728033194870047477425583550715064543085123822545669159); // vk.K[1258].Y
        mul_input[2] = input[1257];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1258] * input[1257]
        mul_input[0] = uint256(4807021728093432188491800945583282532154103109791523323897298948922018461560); // vk.K[1259].X
        mul_input[1] = uint256(3573288399489450098970906079871441938721086372487122431841633616258301244530); // vk.K[1259].Y
        mul_input[2] = input[1258];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1259] * input[1258]
        mul_input[0] = uint256(13544717270019340492238862690285742834897640579271778238681926882631821895018); // vk.K[1260].X
        mul_input[1] = uint256(3581430752635511258950252687968762600958437560826878052229994304812175549357); // vk.K[1260].Y
        mul_input[2] = input[1259];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1260] * input[1259]
        mul_input[0] = uint256(18794439683343110360146179573588765428250721817392092190439328660301272323815); // vk.K[1261].X
        mul_input[1] = uint256(11459260895125019672152599089257745092718732732925847407357051695892071598837); // vk.K[1261].Y
        mul_input[2] = input[1260];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1261] * input[1260]
        mul_input[0] = uint256(13871807265814581553496949602050454456790751346640006065217792434537163831239); // vk.K[1262].X
        mul_input[1] = uint256(17491982361050126437959658547597478364353354723335272630710036213968889933566); // vk.K[1262].Y
        mul_input[2] = input[1261];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1262] * input[1261]
        mul_input[0] = uint256(2261714748517233233627146069472001733398623180218356058259437232907696126913); // vk.K[1263].X
        mul_input[1] = uint256(21222259376813850968224447316930270924662261829193476643478980007641233484656); // vk.K[1263].Y
        mul_input[2] = input[1262];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1263] * input[1262]
        mul_input[0] = uint256(1222734528889791294303066546086278080917552668467730715743824605399460980640); // vk.K[1264].X
        mul_input[1] = uint256(15638823511445766071382593028016086842592271588946021298297030419428414330948); // vk.K[1264].Y
        mul_input[2] = input[1263];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1264] * input[1263]
        mul_input[0] = uint256(8519543172538006368996095554439129519359247981437398291873968964746512495533); // vk.K[1265].X
        mul_input[1] = uint256(6000587015489954644865218074851003922388622856830829354282777801480741275481); // vk.K[1265].Y
        mul_input[2] = input[1264];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1265] * input[1264]
        mul_input[0] = uint256(3320412784209550991574824118801377745493670308201674780987834754329614012105); // vk.K[1266].X
        mul_input[1] = uint256(2698299388862878095956310239298134094851080832519927272791825625908423597576); // vk.K[1266].Y
        mul_input[2] = input[1265];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1266] * input[1265]
        mul_input[0] = uint256(956304072748866149870536673754735726088237269580438765032771989121119319165); // vk.K[1267].X
        mul_input[1] = uint256(15875621816548758087184019988074500283770216558371920868247532317520081909806); // vk.K[1267].Y
        mul_input[2] = input[1266];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1267] * input[1266]
        mul_input[0] = uint256(20777793059353040304252653194804899073639874837793508763387664076741937154301); // vk.K[1268].X
        mul_input[1] = uint256(19549365049938564008721067314571213643949526337914325004273184807136442914087); // vk.K[1268].Y
        mul_input[2] = input[1267];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1268] * input[1267]
        mul_input[0] = uint256(6538208742674729916929844500596989302728179842142336750608895678367640020032); // vk.K[1269].X
        mul_input[1] = uint256(12595846012946220918813326825352798423886831506097484406029957232309042742923); // vk.K[1269].Y
        mul_input[2] = input[1268];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1269] * input[1268]
        mul_input[0] = uint256(14584647212385229376257483070144099775905038869994042352322884354846227910096); // vk.K[1270].X
        mul_input[1] = uint256(8270953828157856203208042565976810911459420418106741268462757599992849148466); // vk.K[1270].Y
        mul_input[2] = input[1269];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1270] * input[1269]
        mul_input[0] = uint256(11353495062530053836364929322663202848971152944209756405406390701782233399419); // vk.K[1271].X
        mul_input[1] = uint256(12327222268985639483270022220913272457920960120511330789494958733038424198801); // vk.K[1271].Y
        mul_input[2] = input[1270];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1271] * input[1270]
        mul_input[0] = uint256(13668593780959494949934054207838728337164583092405279165806574021605399466401); // vk.K[1272].X
        mul_input[1] = uint256(13537329506341670104550703809228549750906043195569610350196542296237477217110); // vk.K[1272].Y
        mul_input[2] = input[1271];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1272] * input[1271]
        mul_input[0] = uint256(5085549463224511996286117395955038712607215359114561339400358562244863739968); // vk.K[1273].X
        mul_input[1] = uint256(1583263515925550829282737631453932021083547444559726431135091498832389615642); // vk.K[1273].Y
        mul_input[2] = input[1272];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1273] * input[1272]
        mul_input[0] = uint256(15284240746777811434318879804300345491867750751354578603417497183413490518835); // vk.K[1274].X
        mul_input[1] = uint256(9079959646672191268049252199424318895243877035714972759230005070862676345351); // vk.K[1274].Y
        mul_input[2] = input[1273];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1274] * input[1273]
        mul_input[0] = uint256(7472855792075764847099491331483158673105002208972249560608057626541505546546); // vk.K[1275].X
        mul_input[1] = uint256(2981559703046652590859240616477654675179758553495246579148977230560758769660); // vk.K[1275].Y
        mul_input[2] = input[1274];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1275] * input[1274]
        mul_input[0] = uint256(3687752811970722349540393496244839674302583164541038408262587388290619063885); // vk.K[1276].X
        mul_input[1] = uint256(16865779453762114828977004609248562842246920130633196392315125510272782213316); // vk.K[1276].Y
        mul_input[2] = input[1275];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1276] * input[1275]
        mul_input[0] = uint256(21822609751071593682361156627086275129391916181042741344011071186850060033195); // vk.K[1277].X
        mul_input[1] = uint256(19318834032553192624514793501054167888092190183547756132745156518737409998348); // vk.K[1277].Y
        mul_input[2] = input[1276];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1277] * input[1276]
        mul_input[0] = uint256(21043665990370165871230176971669639749063010756314852403275621282962747414246); // vk.K[1278].X
        mul_input[1] = uint256(3905748235849530514184803111359231305952387731025911444530690798595584539373); // vk.K[1278].Y
        mul_input[2] = input[1277];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1278] * input[1277]
        mul_input[0] = uint256(20577375038824354873251665620605562083180510178726978120069750820300506287217); // vk.K[1279].X
        mul_input[1] = uint256(12606830161148645370445300903525635163143413010355392328380176756816506557622); // vk.K[1279].Y
        mul_input[2] = input[1278];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1279] * input[1278]
        mul_input[0] = uint256(962945732841102416797752767495540623302508058522080244325494445657489621131); // vk.K[1280].X
        mul_input[1] = uint256(15706164523917784141041367921158112647131829575532904553344599056726912440282); // vk.K[1280].Y
        mul_input[2] = input[1279];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1280] * input[1279]
        mul_input[0] = uint256(2568409950106283917135573489795586842519350153655784420597145116837461113337); // vk.K[1281].X
        mul_input[1] = uint256(8726382983303307496896490633336438204128464757079406449321555262441573728614); // vk.K[1281].Y
        mul_input[2] = input[1280];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1281] * input[1280]
        mul_input[0] = uint256(9928870992052602819961798219248815125099049496459510794551432716019327217982); // vk.K[1282].X
        mul_input[1] = uint256(20156797442092783222407898843926310273767346492246134102747770631188907092563); // vk.K[1282].Y
        mul_input[2] = input[1281];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1282] * input[1281]
        mul_input[0] = uint256(16573056463186988868480664525453543436979716818358527877909653776493657586530); // vk.K[1283].X
        mul_input[1] = uint256(1235141885083873555703777035510855134644020225535753896647345649758008559629); // vk.K[1283].Y
        mul_input[2] = input[1282];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1283] * input[1282]
        mul_input[0] = uint256(18388339490403425836684823782122238322295297363276644751098600115160428357516); // vk.K[1284].X
        mul_input[1] = uint256(10757461202452763505893947215244421025839779871777310502933346430776733410775); // vk.K[1284].Y
        mul_input[2] = input[1283];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1284] * input[1283]
        mul_input[0] = uint256(13634457277696959207661725049818027605351579942739147468809269861757094688444); // vk.K[1285].X
        mul_input[1] = uint256(14943030917359360844009644029015577576656745444475534567619057158143299325332); // vk.K[1285].Y
        mul_input[2] = input[1284];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1285] * input[1284]
        mul_input[0] = uint256(1790918523466019612993626699873028325342645273141126022608948008312746242624); // vk.K[1286].X
        mul_input[1] = uint256(20954468670561261575835382334200572275921472436005551355308171989339229277949); // vk.K[1286].Y
        mul_input[2] = input[1285];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1286] * input[1285]
        mul_input[0] = uint256(20748191152488194415828388536181810277904292235316690291508475737391353689859); // vk.K[1287].X
        mul_input[1] = uint256(32957050339614902295063700020815595579409582588462401656258351874101661590); // vk.K[1287].Y
        mul_input[2] = input[1286];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1287] * input[1286]
        mul_input[0] = uint256(19515674060365383340872554423951168367389722272474503998511891144627933753486); // vk.K[1288].X
        mul_input[1] = uint256(18913874603488575443798568993659242295513685029559234790905654133048436405691); // vk.K[1288].Y
        mul_input[2] = input[1287];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1288] * input[1287]
        mul_input[0] = uint256(17116582982682756304054342461071403178877408535173592056119533943055702491937); // vk.K[1289].X
        mul_input[1] = uint256(2896590635587357769576425969332876984659165652884104678551316397473868917846); // vk.K[1289].Y
        mul_input[2] = input[1288];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1289] * input[1288]
        mul_input[0] = uint256(17486931427507976331047820008907440014400005111205105603277128080099995578832); // vk.K[1290].X
        mul_input[1] = uint256(17789312652525679052317375256593337218050511686840655496573257631846942438906); // vk.K[1290].Y
        mul_input[2] = input[1289];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1290] * input[1289]
        mul_input[0] = uint256(15853850416309255819253007496271556117107045112128327627581678005092535216954); // vk.K[1291].X
        mul_input[1] = uint256(21548761488921919001667746242765856104761875433231490635353008562082709158998); // vk.K[1291].Y
        mul_input[2] = input[1290];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1291] * input[1290]
        mul_input[0] = uint256(4076396413105437257262705556608702306673007392575894324595803491154658423278); // vk.K[1292].X
        mul_input[1] = uint256(7861481211938664893908668329032279045014189520271055373749532890312693764239); // vk.K[1292].Y
        mul_input[2] = input[1291];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1292] * input[1291]
        mul_input[0] = uint256(10737343272042334247950173389434266022199463007285184448351698735532774264398); // vk.K[1293].X
        mul_input[1] = uint256(7915322405466788161178058878804056888255612607706982116897613353976346343642); // vk.K[1293].Y
        mul_input[2] = input[1292];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1293] * input[1292]
        mul_input[0] = uint256(9654347953742441423063608998762523389866901792883503433817081758834175954238); // vk.K[1294].X
        mul_input[1] = uint256(4676299760853363562788626554589681201531861370272598508354991339081697942086); // vk.K[1294].Y
        mul_input[2] = input[1293];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1294] * input[1293]
        mul_input[0] = uint256(6760483440147171853747346392964385954388341287789924672967874227348013488505); // vk.K[1295].X
        mul_input[1] = uint256(15952589973438908197342749767941264871127447193838813595655423918950461122792); // vk.K[1295].Y
        mul_input[2] = input[1294];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1295] * input[1294]
        mul_input[0] = uint256(9737371090265689449870727308915468979349962583990580048190264857419981609833); // vk.K[1296].X
        mul_input[1] = uint256(5714641008374946534733516975576102049830105270620524856870020155095457988269); // vk.K[1296].Y
        mul_input[2] = input[1295];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1296] * input[1295]
        mul_input[0] = uint256(15287111479428253930569543129092618792972840387429091344793566346692723900015); // vk.K[1297].X
        mul_input[1] = uint256(19972470452867805951277581533354663845549799019506075930133948961294840696458); // vk.K[1297].Y
        mul_input[2] = input[1296];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1297] * input[1296]
        mul_input[0] = uint256(8085485102968688119496005040229577873665637638682850640554875807245043264397); // vk.K[1298].X
        mul_input[1] = uint256(9511473795903690879838735471886248517004443840430870744924044553567090250407); // vk.K[1298].Y
        mul_input[2] = input[1297];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1298] * input[1297]
        mul_input[0] = uint256(4867751740605130516523456140350908100148904591393703233443641485841763904740); // vk.K[1299].X
        mul_input[1] = uint256(10334939912118416994235330159847092604641167518832425246596717582621806478655); // vk.K[1299].Y
        mul_input[2] = input[1298];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1299] * input[1298]
        mul_input[0] = uint256(5122847582356403664617117887295424605180341029555636630186167896325127290522); // vk.K[1300].X
        mul_input[1] = uint256(7343690028193027262489442244480558424572266204557995132309948332850241899568); // vk.K[1300].Y
        mul_input[2] = input[1299];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1300] * input[1299]
        mul_input[0] = uint256(6743299226008937422009936791014812346001196316091997223389859212499162407364); // vk.K[1301].X
        mul_input[1] = uint256(20774365585975345400432743121764347084862583924147578469208535121225143841093); // vk.K[1301].Y
        mul_input[2] = input[1300];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1301] * input[1300]
        mul_input[0] = uint256(12545873510591590377152437936781467994136972192465792356497328354682237984838); // vk.K[1302].X
        mul_input[1] = uint256(141861749852917647556110898837482461181410930446295286153005660476083508120); // vk.K[1302].Y
        mul_input[2] = input[1301];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1302] * input[1301]
        mul_input[0] = uint256(9483256313146414648818694683585275105352131510871853906261203374421366482763); // vk.K[1303].X
        mul_input[1] = uint256(9479184196576474653515592252425558672474823057429804307508241569971327306488); // vk.K[1303].Y
        mul_input[2] = input[1302];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1303] * input[1302]
        mul_input[0] = uint256(6629793459788573448906311229666184084593048400518680984687672669304230116172); // vk.K[1304].X
        mul_input[1] = uint256(20841867422870250067567758146099708890902476350584208124644456900871600789209); // vk.K[1304].Y
        mul_input[2] = input[1303];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1304] * input[1303]
        mul_input[0] = uint256(13908096851065997638160849976901958482901540474548365671725746562288383406617); // vk.K[1305].X
        mul_input[1] = uint256(12829009806214973910089370782688083802420936424242141129064976417354767355769); // vk.K[1305].Y
        mul_input[2] = input[1304];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1305] * input[1304]
        mul_input[0] = uint256(9969191737125749676857477729470468173750965699494810076815687134197333106766); // vk.K[1306].X
        mul_input[1] = uint256(18988954755448441813267098925137859915196568060330975339592886964046399708685); // vk.K[1306].Y
        mul_input[2] = input[1305];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1306] * input[1305]
        mul_input[0] = uint256(6204897889264917133384614778031406131825530418844385278419972713515909005984); // vk.K[1307].X
        mul_input[1] = uint256(1971036858544122128300750577531996009277911922812609626382769532168481788131); // vk.K[1307].Y
        mul_input[2] = input[1306];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1307] * input[1306]
        mul_input[0] = uint256(3800631333071980703898760531326239280252097356513821747071101459975026197733); // vk.K[1308].X
        mul_input[1] = uint256(9040326014779552186811177106102703172852909839304137079664977356167514350371); // vk.K[1308].Y
        mul_input[2] = input[1307];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1308] * input[1307]
        mul_input[0] = uint256(7515625909483152706575563651846850462617097242864494406448583924369770956274); // vk.K[1309].X
        mul_input[1] = uint256(7481773187415677264672858159125166950406152779470182009453757532820217550964); // vk.K[1309].Y
        mul_input[2] = input[1308];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1309] * input[1308]
        mul_input[0] = uint256(19288622733484399350714866531187252902142793551439624020458117188829753286294); // vk.K[1310].X
        mul_input[1] = uint256(10189323465745879347940261828417364157084975486754403173796205677956021197541); // vk.K[1310].Y
        mul_input[2] = input[1309];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1310] * input[1309]
        mul_input[0] = uint256(13228339824514430180953028897439325080012661093915187328580911457501563947233); // vk.K[1311].X
        mul_input[1] = uint256(10921147110910200948839370582725074220857837002780707914522768678386634432488); // vk.K[1311].Y
        mul_input[2] = input[1310];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1311] * input[1310]
        mul_input[0] = uint256(839552993835151657409897549534620056844530494862514177083715124455945105468); // vk.K[1312].X
        mul_input[1] = uint256(1177126865685578802407900826676720457182375499326490589609688396563328455898); // vk.K[1312].Y
        mul_input[2] = input[1311];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1312] * input[1311]
        mul_input[0] = uint256(12926621852465473852050289441878491974491149463884653960297543089312567867407); // vk.K[1313].X
        mul_input[1] = uint256(14277993490826754282893793222600241555168791576867302048280403792565695690583); // vk.K[1313].Y
        mul_input[2] = input[1312];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1313] * input[1312]
        mul_input[0] = uint256(16321579643085078271785023671234641039632501904186234931407188082881233265158); // vk.K[1314].X
        mul_input[1] = uint256(9665007563615720028890291222335709655801278290613701662298690504078325169577); // vk.K[1314].Y
        mul_input[2] = input[1313];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1314] * input[1313]
        mul_input[0] = uint256(17303987626467521249231570974748760218506658044607374090136796426576721929545); // vk.K[1315].X
        mul_input[1] = uint256(1625186604143665003732540388309624527186840426529779907312041473829036992864); // vk.K[1315].Y
        mul_input[2] = input[1314];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1315] * input[1314]
        mul_input[0] = uint256(18000860610579514187439860981697984803155758378986409098408283459321065490234); // vk.K[1316].X
        mul_input[1] = uint256(11091781246600164368992202168395165095639583604081602927076152641141867431986); // vk.K[1316].Y
        mul_input[2] = input[1315];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1316] * input[1315]
        mul_input[0] = uint256(12799339569426741186330802344962244256511064839058215434052886509269074366822); // vk.K[1317].X
        mul_input[1] = uint256(14698663697791061566039393269134661746030294776906097401555503791352984162146); // vk.K[1317].Y
        mul_input[2] = input[1316];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1317] * input[1316]
        mul_input[0] = uint256(4129377465996346876472899787579303150801972881454159370256589757858854304318); // vk.K[1318].X
        mul_input[1] = uint256(3658722145141083782419656252955553542403352723362910694436414700490443446168); // vk.K[1318].Y
        mul_input[2] = input[1317];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1318] * input[1317]
        mul_input[0] = uint256(6041839623514399140222131099156270984433483459931274781997697431270570368877); // vk.K[1319].X
        mul_input[1] = uint256(8916707131856394252034974333904395524546599149415027933386420488918490147290); // vk.K[1319].Y
        mul_input[2] = input[1318];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1319] * input[1318]
        mul_input[0] = uint256(16109065937000435546639859731587368751432322203497286333482991206460795016924); // vk.K[1320].X
        mul_input[1] = uint256(21347235423296994798481225967895881734130919006092165340312587059639833329827); // vk.K[1320].Y
        mul_input[2] = input[1319];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1320] * input[1319]
        mul_input[0] = uint256(13871948961697753401477900055804158240451762588774481068381774815033996238729); // vk.K[1321].X
        mul_input[1] = uint256(4107882131322369091730413248855379992308740160877362131670682314714703251046); // vk.K[1321].Y
        mul_input[2] = input[1320];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1321] * input[1320]
        mul_input[0] = uint256(1435570414715033107290572078549921048729689967306522319418621550427257340761); // vk.K[1322].X
        mul_input[1] = uint256(7954848743790259703001828764693406392940763762198364938618943245997182890637); // vk.K[1322].Y
        mul_input[2] = input[1321];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1322] * input[1321]
        mul_input[0] = uint256(13815146728493259195557828289602558751087554556047139779373610812288383977291); // vk.K[1323].X
        mul_input[1] = uint256(12133143696672590795903421400437280096248159326739346061593506622858669491124); // vk.K[1323].Y
        mul_input[2] = input[1322];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1323] * input[1322]
        mul_input[0] = uint256(16206034561595584360358102771479682517974019248231579580832695880625102508450); // vk.K[1324].X
        mul_input[1] = uint256(5093101698349059140346089752271767317748214600990148903501153104602596259128); // vk.K[1324].Y
        mul_input[2] = input[1323];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1324] * input[1323]
        mul_input[0] = uint256(12010416511806792985713562911954313262330330903981906494086865347974445347100); // vk.K[1325].X
        mul_input[1] = uint256(515732513614893035976492902416885466686716167356657814724634170695236561641); // vk.K[1325].Y
        mul_input[2] = input[1324];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1325] * input[1324]
        mul_input[0] = uint256(10896155153718060045345640559567571486681945613718381489532675346981813634358); // vk.K[1326].X
        mul_input[1] = uint256(12043756694386363935689216252092973434729990879509439497607904986576641532370); // vk.K[1326].Y
        mul_input[2] = input[1325];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1326] * input[1325]
        mul_input[0] = uint256(8092326731181304556361991992699782395178461132903857791380804334606333216608); // vk.K[1327].X
        mul_input[1] = uint256(19011793118056022384362451532159585116885019594976239274656207197057258176052); // vk.K[1327].Y
        mul_input[2] = input[1326];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1327] * input[1326]
        mul_input[0] = uint256(7305951216180989512368193160616021394092775898550861180781551022974363895526); // vk.K[1328].X
        mul_input[1] = uint256(20238127323424945331506551364046181508860980774007205650521424730564827661051); // vk.K[1328].Y
        mul_input[2] = input[1327];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1328] * input[1327]
        mul_input[0] = uint256(7931682139816647412065695142127763415574560189570686663156075183417879857866); // vk.K[1329].X
        mul_input[1] = uint256(2350706521444555981941578141612446706150489437802893157580848010740098890075); // vk.K[1329].Y
        mul_input[2] = input[1328];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1329] * input[1328]
        mul_input[0] = uint256(9538054678859913805575594218518831823761171035923878991420690294170741951278); // vk.K[1330].X
        mul_input[1] = uint256(3063693742088803403843079567182560774602090675007066345773243109156581872789); // vk.K[1330].Y
        mul_input[2] = input[1329];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1330] * input[1329]
        mul_input[0] = uint256(21363282469325371879435913989895804205240447633171096833197668203221254026706); // vk.K[1331].X
        mul_input[1] = uint256(1475893255714621984550947741915876847250681404710561758772067768569652369645); // vk.K[1331].Y
        mul_input[2] = input[1330];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1331] * input[1330]
        mul_input[0] = uint256(10745907891043972928314597601299350952873627978623042477175438431962479538641); // vk.K[1332].X
        mul_input[1] = uint256(15024790861359244402389264411572951199294004362303709559304154752399155803731); // vk.K[1332].Y
        mul_input[2] = input[1331];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1332] * input[1331]
        mul_input[0] = uint256(10430625970754394873843239972176807756652008265134157273868737845436512767118); // vk.K[1333].X
        mul_input[1] = uint256(17235493472948134924056210341960100813614929851816518370923345818090302884462); // vk.K[1333].Y
        mul_input[2] = input[1332];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1333] * input[1332]
        mul_input[0] = uint256(16213972852035131180745308530392104078440666379389617903064872161522327714704); // vk.K[1334].X
        mul_input[1] = uint256(7454250962126588872692203707760813675912735436964880573324567487874073787412); // vk.K[1334].Y
        mul_input[2] = input[1333];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1334] * input[1333]
        mul_input[0] = uint256(10619498278781114337147229459242562225041482801111202862800068089718343389547); // vk.K[1335].X
        mul_input[1] = uint256(4586512889827684383901396173020009655893105275873798732439338190749583554684); // vk.K[1335].Y
        mul_input[2] = input[1334];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1335] * input[1334]
        mul_input[0] = uint256(5408314575923041955891048016516327153425089498667459685135388860847262917597); // vk.K[1336].X
        mul_input[1] = uint256(2969222868350140514128744753620867986850882346732098906948928426713948600584); // vk.K[1336].Y
        mul_input[2] = input[1335];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1336] * input[1335]
        mul_input[0] = uint256(6534207881392964930551036536124657493153234503637690296494667986048144843094); // vk.K[1337].X
        mul_input[1] = uint256(9363609221001758926904838565196705164920254353312373274503983510239927143503); // vk.K[1337].Y
        mul_input[2] = input[1336];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1337] * input[1336]
        mul_input[0] = uint256(9441037231102837673368703193552551464524288903115746909317631358442380459258); // vk.K[1338].X
        mul_input[1] = uint256(11601179339552870888514507919839140902237299256221028371905667844494391020238); // vk.K[1338].Y
        mul_input[2] = input[1337];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1338] * input[1337]
        mul_input[0] = uint256(12343817349484465877295811056941938621380099885260834403048852571695045984893); // vk.K[1339].X
        mul_input[1] = uint256(11530054192713768075740113290446899651962088140353360137758804834245810825290); // vk.K[1339].Y
        mul_input[2] = input[1338];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1339] * input[1338]
        mul_input[0] = uint256(18810407814443880634915375056192969259938823726528074833709948945201221933139); // vk.K[1340].X
        mul_input[1] = uint256(6762370038936004902565904528906539087755829286499431817696068072243913591938); // vk.K[1340].Y
        mul_input[2] = input[1339];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1340] * input[1339]
        mul_input[0] = uint256(12082140351266758724054729933875630977770927122590143488958332449597860913488); // vk.K[1341].X
        mul_input[1] = uint256(15157505576988808583699669482145043231097068331609537941955154254917138620158); // vk.K[1341].Y
        mul_input[2] = input[1340];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1341] * input[1340]
        mul_input[0] = uint256(11589209311959549069323316403024643144823902103377241413209452845602651515367); // vk.K[1342].X
        mul_input[1] = uint256(11436768688285509954795860312805066114592718673474896541268460764761859844033); // vk.K[1342].Y
        mul_input[2] = input[1341];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1342] * input[1341]
        mul_input[0] = uint256(11018568008508082272856515599369118104262881064001247621366512522985187595618); // vk.K[1343].X
        mul_input[1] = uint256(14211359830124513019158879028852242723620976572522461866287403455204823569983); // vk.K[1343].Y
        mul_input[2] = input[1342];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1343] * input[1342]
        mul_input[0] = uint256(17696625594799097148692800160754184746489235187656206184850135626807468649781); // vk.K[1344].X
        mul_input[1] = uint256(15419425339474277933800924239143426704465161130216739180163271639783461293399); // vk.K[1344].Y
        mul_input[2] = input[1343];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1344] * input[1343]
        mul_input[0] = uint256(16342737574385979092362332915247953374424138936726763031144445143805284739513); // vk.K[1345].X
        mul_input[1] = uint256(10052098723554204725530433704675555232254504779569740190583415917860480474431); // vk.K[1345].Y
        mul_input[2] = input[1344];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1345] * input[1344]
        mul_input[0] = uint256(12700508771471973933652419001285974174635646322132732966604151823549032420681); // vk.K[1346].X
        mul_input[1] = uint256(19222985185186979793741254993152836450666972961358963860222002066401456216810); // vk.K[1346].Y
        mul_input[2] = input[1345];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1346] * input[1345]
        mul_input[0] = uint256(1580756175774190801039435540614202241749902091549984523917385556525455471106); // vk.K[1347].X
        mul_input[1] = uint256(6599538412504455440463846787074531485225947003028883498021871569295139377854); // vk.K[1347].Y
        mul_input[2] = input[1346];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1347] * input[1346]
        mul_input[0] = uint256(10140701435074994302141807716313480835820516112357383844103820313140396793059); // vk.K[1348].X
        mul_input[1] = uint256(19373427752037204112259976189008017616650984008390105066621585547459256592778); // vk.K[1348].Y
        mul_input[2] = input[1347];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1348] * input[1347]
        mul_input[0] = uint256(2553415400946469146211342324446735845921336699828731849751034033557210869071); // vk.K[1349].X
        mul_input[1] = uint256(12436910814135645516317714394092880322635496461551514341088807228943923650226); // vk.K[1349].Y
        mul_input[2] = input[1348];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1349] * input[1348]
        mul_input[0] = uint256(17109562512384229905999881778727327891737020583879615549439888513525321414452); // vk.K[1350].X
        mul_input[1] = uint256(14195797075520015709245744867130615640262039497267931406170284536881514841755); // vk.K[1350].Y
        mul_input[2] = input[1349];
        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1350] * input[1349]

        return Pairing.pairing(
            Pairing.negate(proof.A),
            proof.B,
            vk.alfa1,
            vk.beta2,
            vk_x,
            vk.gamma2,
            proof.C,
            vk.delta2
        );
    }
}
